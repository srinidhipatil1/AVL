package com.example;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.delete(100);
        int int12 = aVLTree6.height();
        com.example.AVLTree.Node node14 = aVLTree6.find((int) (short) -1);
        com.example.AVLTree.Node node15 = aVLTree6.getRoot();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 1);
        com.example.AVLTree.Node node19 = aVLTree6.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = node21.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        aVLTree0.insert((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) (short) 100);
        com.example.AVLTree.Node node19 = aVLTree11.find((int) ' ');
        aVLTree11.delete((int) (byte) 1);
        com.example.AVLTree.Node node22 = aVLTree11.getRoot();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree23.getBalance(node26);
        aVLTree23.insert(0);
        aVLTree23.insert((int) (short) 10);
        com.example.AVLTree.Node node32 = aVLTree23.getRoot();
        com.example.AVLTree.Node node34 = aVLTree23.find((int) (short) 0);
        int int35 = aVLTree11.getBalance(node34);
        int int36 = aVLTree0.getBalance(node34);
        com.example.AVLTree.Node node38 = aVLTree0.find((int) (short) 100);
        java.lang.Class<?> wildcardClass39 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        aVLTree0.insert((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.insert((-1));
        aVLTree0.delete((int) (byte) 1);
        java.lang.Class<?> wildcardClass8 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        int int30 = aVLTree0.height();
        aVLTree0.insert(100);
        com.example.AVLTree.Node node34 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node36 = aVLTree0.find(100);
        java.lang.Class<?> wildcardClass37 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        int int10 = aVLTree0.height();
        aVLTree0.delete(0);
        int int13 = aVLTree0.height();
        aVLTree0.delete(1);
        java.lang.Class<?> wildcardClass16 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree13.find((int) 'a');
        aVLTree13.delete((int) (short) 10);
        int int20 = aVLTree13.height();
        aVLTree13.delete((int) '#');
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree23.getBalance(node24);
        aVLTree23.insert((int) (byte) 100);
        aVLTree23.insert((int) 'a');
        com.example.AVLTree.Node node31 = aVLTree23.find((int) (byte) 100);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        aVLTree32.delete((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree32.getRoot();
        aVLTree32.delete(0);
        com.example.AVLTree.Node node40 = null;
        int int41 = aVLTree32.getBalance(node40);
        int int42 = aVLTree32.height();
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        int int52 = aVLTree32.getBalance(node51);
        int int53 = aVLTree23.getBalance(node51);
        com.example.AVLTree.Node node54 = aVLTree23.getRoot();
        com.example.AVLTree.Node node55 = aVLTree23.getRoot();
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        aVLTree56.delete((int) 'a');
        com.example.AVLTree.Node node61 = aVLTree56.getRoot();
        aVLTree56.delete(0);
        com.example.AVLTree.Node node64 = null;
        int int65 = aVLTree56.getBalance(node64);
        com.example.AVLTree.Node node66 = null;
        int int67 = aVLTree56.getBalance(node66);
        com.example.AVLTree aVLTree68 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = aVLTree68.find((int) '4');
        aVLTree68.delete((int) 'a');
        com.example.AVLTree.Node node73 = aVLTree68.getRoot();
        com.example.AVLTree.Node node74 = null;
        int int75 = aVLTree68.getBalance(node74);
        com.example.AVLTree.Node node77 = aVLTree68.find((int) ' ');
        com.example.AVLTree aVLTree78 = new com.example.AVLTree();
        com.example.AVLTree.Node node80 = aVLTree78.find((int) '4');
        com.example.AVLTree.Node node82 = aVLTree78.find((int) 'a');
        aVLTree78.delete((int) (short) 10);
        com.example.AVLTree aVLTree85 = new com.example.AVLTree();
        com.example.AVLTree.Node node86 = null;
        int int87 = aVLTree85.getBalance(node86);
        aVLTree85.insert((int) (byte) 100);
        aVLTree85.insert((int) 'a');
        com.example.AVLTree.Node node93 = aVLTree85.find((int) (byte) 100);
        int int94 = aVLTree78.getBalance(node93);
        int int95 = aVLTree68.getBalance(node93);
        int int96 = aVLTree56.getBalance(node93);
        int int97 = aVLTree23.getBalance(node93);
        int int98 = aVLTree13.getBalance(node93);
        int int99 = aVLTree0.getBalance(node93);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        com.example.AVLTree.Node node4 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = aVLTree5.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree5.getRoot();
        aVLTree5.insert((int) (byte) 100);
        int int11 = aVLTree5.height();
        aVLTree5.insert(10);
        com.example.AVLTree.Node node15 = aVLTree5.find((int) (byte) 10);
        int int16 = aVLTree0.getBalance(node15);
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert((int) (byte) -1);
        java.lang.Class<?> wildcardClass21 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        aVLTree0.delete((-1));
        aVLTree0.insert((int) '#');
        int int55 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.delete((int) 'a');
        aVLTree10.delete(1);
        aVLTree10.delete((int) '#');
        com.example.AVLTree.Node node19 = null;
        int int20 = aVLTree10.getBalance(node19);
        com.example.AVLTree.Node node21 = aVLTree10.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        int int27 = aVLTree22.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree28.getBalance(node29);
        com.example.AVLTree.Node node31 = aVLTree28.getRoot();
        aVLTree28.insert((int) (byte) 100);
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        aVLTree34.delete((int) 'a');
        com.example.AVLTree.Node node39 = aVLTree34.getRoot();
        aVLTree34.delete(0);
        com.example.AVLTree.Node node42 = null;
        int int43 = aVLTree34.getBalance(node42);
        int int44 = aVLTree34.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node48 = aVLTree45.getRoot();
        aVLTree45.delete(100);
        aVLTree45.insert((int) (byte) 10);
        com.example.AVLTree.Node node53 = aVLTree45.getRoot();
        int int54 = aVLTree34.getBalance(node53);
        int int55 = aVLTree28.getBalance(node53);
        int int56 = aVLTree22.getBalance(node53);
        int int57 = aVLTree10.getBalance(node53);
        aVLTree10.insert((int) (short) -1);
        com.example.AVLTree.Node node61 = aVLTree10.find((int) (short) 0);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = null;
        int int66 = aVLTree62.getBalance(node65);
        aVLTree62.insert((int) '4');
        com.example.AVLTree.Node node70 = aVLTree62.find((int) (short) 0);
        com.example.AVLTree.Node node72 = aVLTree62.find((int) ' ');
        aVLTree62.insert((int) (short) 100);
        com.example.AVLTree.Node node76 = aVLTree62.find((int) (short) 100);
        int int77 = aVLTree10.getBalance(node76);
        int int78 = aVLTree0.getBalance(node76);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree12.getBalance(node18);
        com.example.AVLTree.Node node21 = aVLTree12.find((int) ' ');
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree12.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        int int41 = aVLTree0.height();
        int int42 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree0.getBalance(node13);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        aVLTree0.delete(2);
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 0);
        int int18 = aVLTree0.height();
        com.example.AVLTree.Node node20 = aVLTree0.find(2);
        java.lang.Class<?> wildcardClass21 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass12 = node11.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node45 = aVLTree0.find((int) (byte) -1);
        int int46 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree46.getBalance(node49);
        aVLTree46.insert(0);
        aVLTree46.insert((int) (short) 10);
        com.example.AVLTree.Node node55 = aVLTree46.getRoot();
        aVLTree46.delete(0);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        aVLTree58.delete((int) 'a');
        aVLTree58.delete(1);
        com.example.AVLTree.Node node65 = aVLTree58.getRoot();
        com.example.AVLTree.Node node67 = aVLTree58.find((int) (byte) 10);
        com.example.AVLTree.Node node68 = aVLTree58.getRoot();
        aVLTree58.delete(0);
        aVLTree58.insert((int) (short) 1);
        com.example.AVLTree.Node node73 = aVLTree58.getRoot();
        int int74 = aVLTree46.getBalance(node73);
        int int75 = aVLTree0.getBalance(node73);
        com.example.AVLTree.Node node77 = aVLTree0.find((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        com.example.AVLTree.Node node16 = aVLTree0.find(0);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node19 = aVLTree0.find(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = node15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        aVLTree0.delete((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = node8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree12.getBalance(node15);
        aVLTree12.insert((int) '4');
        com.example.AVLTree.Node node20 = aVLTree12.find((int) (short) 0);
        int int21 = aVLTree12.height();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node24 = aVLTree12.getRoot();
        int int25 = aVLTree0.getBalance(node24);
        java.lang.Class<?> wildcardClass26 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree8.getRoot();
        aVLTree8.delete(100);
        int int14 = aVLTree8.height();
        com.example.AVLTree.Node node16 = aVLTree8.find((int) (short) -1);
        aVLTree8.insert(0);
        com.example.AVLTree.Node node19 = aVLTree8.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        java.lang.Class<?> wildcardClass21 = node19.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        int int7 = aVLTree0.height();
        aVLTree0.insert(0);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((-1));
        int int14 = aVLTree11.height();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (byte) 100);
        aVLTree11.delete((int) (short) 100);
        int int19 = aVLTree11.height();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node24 = aVLTree20.find((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        com.example.AVLTree.Node node26 = aVLTree20.getRoot();
        com.example.AVLTree.Node node27 = aVLTree20.getRoot();
        aVLTree20.delete((int) (byte) 10);
        int int30 = aVLTree20.height();
        com.example.AVLTree.Node node32 = aVLTree20.find((int) (short) 10);
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.delete(100);
        aVLTree33.insert((int) (byte) 10);
        com.example.AVLTree.Node node41 = aVLTree33.getRoot();
        int int42 = aVLTree20.getBalance(node41);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node47 = aVLTree43.find((int) 'a');
        com.example.AVLTree.Node node49 = aVLTree43.find((int) ' ');
        com.example.AVLTree.Node node51 = aVLTree43.find(0);
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        aVLTree52.delete((int) 'a');
        aVLTree52.delete(1);
        aVLTree52.delete((int) '#');
        aVLTree52.delete((int) (short) -1);
        com.example.AVLTree.Node node63 = aVLTree52.getRoot();
        com.example.AVLTree.Node node65 = aVLTree52.find((int) (byte) 100);
        int int66 = aVLTree52.height();
        com.example.AVLTree aVLTree67 = new com.example.AVLTree();
        com.example.AVLTree.Node node69 = aVLTree67.find((int) '4');
        com.example.AVLTree.Node node70 = aVLTree67.getRoot();
        aVLTree67.insert((int) (byte) 100);
        com.example.AVLTree aVLTree73 = new com.example.AVLTree();
        com.example.AVLTree.Node node75 = aVLTree73.find((int) '4');
        com.example.AVLTree.Node node77 = aVLTree73.find((int) 'a');
        aVLTree73.delete((int) (short) 10);
        com.example.AVLTree aVLTree80 = new com.example.AVLTree();
        com.example.AVLTree.Node node81 = null;
        int int82 = aVLTree80.getBalance(node81);
        aVLTree80.insert((int) (byte) 100);
        aVLTree80.insert((int) 'a');
        com.example.AVLTree.Node node88 = aVLTree80.find((int) (byte) 100);
        int int89 = aVLTree73.getBalance(node88);
        int int90 = aVLTree67.getBalance(node88);
        int int91 = aVLTree52.getBalance(node88);
        int int92 = aVLTree43.getBalance(node88);
        int int93 = aVLTree20.getBalance(node88);
        int int94 = aVLTree11.getBalance(node88);
        int int95 = aVLTree0.getBalance(node88);
        com.example.AVLTree.Node node97 = aVLTree0.find((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find(10);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = node18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete((int) '4');
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (short) 0);
        aVLTree0.insert(100);
        int int18 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 0);
        int int18 = aVLTree0.height();
        com.example.AVLTree.Node node20 = aVLTree0.find(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree7.getRoot();
        int int15 = aVLTree0.getBalance(node14);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.insert(10);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) (short) -1);
        int int24 = aVLTree0.height();
        java.lang.Class<?> wildcardClass25 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.insert(0);
        aVLTree0.insert((int) '#');
        aVLTree0.insert((int) (byte) -1);
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node18 = aVLTree15.getRoot();
        aVLTree15.delete(100);
        int int21 = aVLTree15.height();
        com.example.AVLTree.Node node23 = aVLTree15.find((int) (short) -1);
        com.example.AVLTree.Node node24 = aVLTree15.getRoot();
        com.example.AVLTree.Node node26 = aVLTree15.find(1);
        aVLTree15.delete(10);
        int int29 = aVLTree15.height();
        aVLTree15.insert((int) ' ');
        com.example.AVLTree.Node node32 = aVLTree15.getRoot();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.insert((int) (byte) 100);
        int int39 = aVLTree33.height();
        aVLTree33.insert(1);
        com.example.AVLTree.Node node43 = aVLTree33.find(100);
        int int44 = aVLTree15.getBalance(node43);
        int int45 = aVLTree0.getBalance(node43);
        com.example.AVLTree.Node node47 = aVLTree0.find(0);
        aVLTree0.delete((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        aVLTree0.insert((int) (short) -1);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass16 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        int int7 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass13 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        int int9 = aVLTree0.height();
        int int10 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree0.getBalance(node13);
        com.example.AVLTree.Node node16 = aVLTree0.find((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        com.example.AVLTree.Node node23 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree.Node node25 = aVLTree0.find((int) (byte) 1);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node31 = aVLTree0.find(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree13.find((int) 'a');
        int int18 = aVLTree13.height();
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree19.getBalance(node20);
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.insert((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete(0);
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree25.getBalance(node33);
        int int35 = aVLTree25.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree36.getRoot();
        aVLTree36.delete(100);
        aVLTree36.insert((int) (byte) 10);
        com.example.AVLTree.Node node44 = aVLTree36.getRoot();
        int int45 = aVLTree25.getBalance(node44);
        int int46 = aVLTree19.getBalance(node44);
        int int47 = aVLTree13.getBalance(node44);
        int int48 = aVLTree0.getBalance(node44);
        com.example.AVLTree.Node node49 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass50 = node49.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree8.getBalance(node9);
        com.example.AVLTree.Node node11 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        aVLTree8.insert((int) (byte) -1);
        com.example.AVLTree.Node node16 = aVLTree8.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        java.lang.Class<?> wildcardClass18 = node16.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) (short) 100);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree9.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        aVLTree17.delete(100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree17.getBalance(node38);
        int int40 = aVLTree11.getBalance(node38);
        int int41 = aVLTree9.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node48 = null;
        int int49 = aVLTree45.getBalance(node48);
        aVLTree45.insert(0);
        aVLTree45.insert((int) (short) 10);
        com.example.AVLTree.Node node54 = aVLTree45.getRoot();
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = null;
        int int57 = aVLTree55.getBalance(node56);
        aVLTree55.insert((int) (byte) 100);
        aVLTree55.insert((int) 'a');
        com.example.AVLTree.Node node63 = aVLTree55.find((int) (byte) 100);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        aVLTree64.delete((int) 'a');
        com.example.AVLTree.Node node69 = aVLTree64.getRoot();
        aVLTree64.delete(0);
        com.example.AVLTree.Node node72 = null;
        int int73 = aVLTree64.getBalance(node72);
        int int74 = aVLTree64.height();
        com.example.AVLTree aVLTree75 = new com.example.AVLTree();
        com.example.AVLTree.Node node77 = aVLTree75.find((int) '4');
        com.example.AVLTree.Node node78 = aVLTree75.getRoot();
        aVLTree75.delete(100);
        aVLTree75.insert((int) (byte) 10);
        com.example.AVLTree.Node node83 = aVLTree75.getRoot();
        int int84 = aVLTree64.getBalance(node83);
        int int85 = aVLTree55.getBalance(node83);
        int int86 = aVLTree45.getBalance(node83);
        int int87 = aVLTree0.getBalance(node83);
        aVLTree0.delete((int) ' ');
        com.example.AVLTree.Node node90 = aVLTree0.getRoot();
        aVLTree0.delete((int) '4');
        aVLTree0.insert((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = null;
        int int6 = aVLTree0.getBalance(node5);
        aVLTree0.insert((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 1);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        aVLTree0.insert(1);
        int int44 = aVLTree0.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node49 = aVLTree45.find((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        com.example.AVLTree.Node node51 = aVLTree45.getRoot();
        int int52 = aVLTree45.height();
        aVLTree45.insert((int) 'a');
        aVLTree45.insert((int) (short) 100);
        com.example.AVLTree.Node node57 = aVLTree45.getRoot();
        int int58 = aVLTree0.getBalance(node57);
        int int59 = aVLTree0.height();
        com.example.AVLTree.Node node61 = aVLTree0.find(0);
        int int62 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree12.getBalance(node18);
        com.example.AVLTree.Node node21 = aVLTree12.find((int) ' ');
        int int22 = aVLTree12.height();
        aVLTree12.delete(0);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree25.getBalance(node26);
        aVLTree25.insert((int) (byte) 100);
        aVLTree25.insert((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree25.find((int) (byte) 100);
        int int34 = aVLTree12.getBalance(node33);
        int int35 = aVLTree0.getBalance(node33);
        com.example.AVLTree.Node node37 = aVLTree0.find((int) (byte) -1);
        int int38 = aVLTree0.height();
        com.example.AVLTree.Node node40 = aVLTree0.find(100);
        aVLTree0.insert((int) '4');
        java.lang.Class<?> wildcardClass43 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((-1));
        aVLTree30.delete(100);
        com.example.AVLTree.Node node36 = aVLTree30.find((int) '#');
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node39 = aVLTree37.find((int) '4');
        aVLTree37.delete((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree37.getRoot();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree37.getBalance(node43);
        com.example.AVLTree.Node node46 = aVLTree37.find((int) ' ');
        aVLTree37.insert((-1));
        com.example.AVLTree.Node node49 = aVLTree37.getRoot();
        int int50 = aVLTree37.height();
        com.example.AVLTree.Node node52 = aVLTree37.find((int) (short) -1);
        aVLTree37.insert((int) ' ');
        com.example.AVLTree.Node node55 = aVLTree37.getRoot();
        int int56 = aVLTree30.getBalance(node55);
        int int57 = aVLTree0.getBalance(node55);
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (byte) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        aVLTree7.insert((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree7.find((int) ' ');
        int int16 = aVLTree7.height();
        com.example.AVLTree.Node node17 = aVLTree7.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        aVLTree0.insert((int) (short) -1);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node23 = aVLTree0.getRoot();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        int int12 = aVLTree0.height();
        aVLTree0.insert(2);
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        aVLTree51.delete((int) 'a');
        com.example.AVLTree.Node node56 = aVLTree51.getRoot();
        aVLTree51.delete((int) (byte) 1);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = null;
        int int61 = aVLTree59.getBalance(node60);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = aVLTree62.getRoot();
        aVLTree62.insert((int) (byte) 100);
        com.example.AVLTree aVLTree68 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = aVLTree68.find((int) '4');
        com.example.AVLTree.Node node71 = null;
        int int72 = aVLTree68.getBalance(node71);
        aVLTree68.insert((int) (short) 100);
        com.example.AVLTree.Node node76 = aVLTree68.find((int) ' ');
        int int77 = aVLTree68.height();
        com.example.AVLTree.Node node78 = aVLTree68.getRoot();
        int int79 = aVLTree62.getBalance(node78);
        int int80 = aVLTree59.getBalance(node78);
        int int81 = aVLTree51.getBalance(node78);
        int int82 = aVLTree0.getBalance(node78);
        com.example.AVLTree.Node node83 = aVLTree0.getRoot();
        com.example.AVLTree.Node node85 = aVLTree0.find((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        java.lang.Class<?> wildcardClass18 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node10 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 100);
        java.lang.Class<?> wildcardClass13 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node15 = aVLTree0.find(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find(0);
        aVLTree0.insert((-1));
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node15 = aVLTree0.find(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 10);
        aVLTree0.insert(0);
        java.lang.Class<?> wildcardClass21 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = aVLTree7.getRoot();
        com.example.AVLTree.Node node12 = aVLTree7.find((int) (short) -1);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        aVLTree13.delete((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree13.getRoot();
        aVLTree13.delete(0);
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree13.getBalance(node21);
        int int23 = aVLTree13.height();
        aVLTree13.delete(100);
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node29 = aVLTree26.getRoot();
        aVLTree26.delete(100);
        aVLTree26.insert((int) (byte) 10);
        com.example.AVLTree.Node node34 = aVLTree26.getRoot();
        int int35 = aVLTree13.getBalance(node34);
        int int36 = aVLTree7.getBalance(node34);
        com.example.AVLTree.Node node37 = aVLTree7.getRoot();
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((-1));
        int int41 = aVLTree38.height();
        com.example.AVLTree.Node node42 = aVLTree38.getRoot();
        aVLTree38.insert((int) (byte) 100);
        aVLTree38.delete(100);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        aVLTree47.delete((int) 'a');
        com.example.AVLTree.Node node52 = aVLTree47.getRoot();
        aVLTree47.delete(0);
        com.example.AVLTree.Node node55 = null;
        int int56 = aVLTree47.getBalance(node55);
        com.example.AVLTree.Node node57 = null;
        int int58 = aVLTree47.getBalance(node57);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        com.example.AVLTree.Node node65 = null;
        int int66 = aVLTree59.getBalance(node65);
        com.example.AVLTree.Node node68 = aVLTree59.find((int) ' ');
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node71 = aVLTree69.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree69.find((int) 'a');
        aVLTree69.delete((int) (short) 10);
        com.example.AVLTree aVLTree76 = new com.example.AVLTree();
        com.example.AVLTree.Node node77 = null;
        int int78 = aVLTree76.getBalance(node77);
        aVLTree76.insert((int) (byte) 100);
        aVLTree76.insert((int) 'a');
        com.example.AVLTree.Node node84 = aVLTree76.find((int) (byte) 100);
        int int85 = aVLTree69.getBalance(node84);
        int int86 = aVLTree59.getBalance(node84);
        int int87 = aVLTree47.getBalance(node84);
        int int88 = aVLTree38.getBalance(node84);
        int int89 = aVLTree7.getBalance(node84);
        int int90 = aVLTree0.getBalance(node84);
        int int91 = aVLTree0.height();
        com.example.AVLTree.Node node92 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node21 = aVLTree0.find(0);
        int int22 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) 100);
        aVLTree0.insert((int) '#');
        aVLTree0.insert((int) (byte) 10);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        com.example.AVLTree.Node node46 = aVLTree0.find((int) (short) 1);
        aVLTree0.insert((int) (byte) 10);
        int int49 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) (byte) -1);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        aVLTree11.delete((int) 'a');
        aVLTree11.delete(1);
        aVLTree11.delete((int) '#');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree11.getBalance(node20);
        com.example.AVLTree.Node node22 = aVLTree11.getRoot();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree23.find((int) 'a');
        int int28 = aVLTree23.height();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        com.example.AVLTree.Node node32 = aVLTree29.getRoot();
        aVLTree29.insert((int) (byte) 100);
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        aVLTree35.delete((int) 'a');
        com.example.AVLTree.Node node40 = aVLTree35.getRoot();
        aVLTree35.delete(0);
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree35.getBalance(node43);
        int int45 = aVLTree35.height();
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        com.example.AVLTree.Node node49 = aVLTree46.getRoot();
        aVLTree46.delete(100);
        aVLTree46.insert((int) (byte) 10);
        com.example.AVLTree.Node node54 = aVLTree46.getRoot();
        int int55 = aVLTree35.getBalance(node54);
        int int56 = aVLTree29.getBalance(node54);
        int int57 = aVLTree23.getBalance(node54);
        int int58 = aVLTree11.getBalance(node54);
        aVLTree11.insert((int) (short) -1);
        com.example.AVLTree.Node node62 = aVLTree11.find((int) (short) 0);
        com.example.AVLTree.Node node63 = aVLTree11.getRoot();
        int int64 = aVLTree0.getBalance(node63);
        java.lang.Class<?> wildcardClass65 = node63.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree9.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        aVLTree17.delete(100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree17.getBalance(node38);
        int int40 = aVLTree11.getBalance(node38);
        int int41 = aVLTree9.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(10);
        aVLTree0.delete((int) '#');
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node50 = aVLTree0.find(0);
        com.example.AVLTree.Node node51 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        java.lang.Class<?> wildcardClass54 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert(0);
        aVLTree0.delete((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass10 = node9.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(2);
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        int int30 = aVLTree0.height();
        int int31 = aVLTree0.height();
        aVLTree0.insert(100);
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass35 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        aVLTree0.insert(0);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass10 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node10 = aVLTree6.find((int) 'a');
        aVLTree6.delete((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree13.getBalance(node14);
        aVLTree13.insert((int) (byte) 100);
        aVLTree13.insert((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree13.find((int) (byte) 100);
        int int22 = aVLTree6.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) -1);
        java.lang.Class<?> wildcardClass27 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = node8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.insert((-1));
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        aVLTree8.delete((int) (byte) -1);
        aVLTree8.delete((int) (byte) 0);
        com.example.AVLTree.Node node13 = aVLTree8.getRoot();
        com.example.AVLTree.Node node15 = aVLTree8.find(1);
        com.example.AVLTree.Node node17 = aVLTree8.find(10);
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = null;
        int int20 = aVLTree18.getBalance(node19);
        aVLTree18.delete((int) (byte) -1);
        int int23 = aVLTree18.height();
        int int24 = aVLTree18.height();
        com.example.AVLTree.Node node26 = aVLTree18.find((int) '#');
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree27.find((int) 'a');
        aVLTree27.delete((int) (short) 10);
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree34.getBalance(node35);
        aVLTree34.insert((int) (byte) 100);
        aVLTree34.insert((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree34.find((int) (byte) 100);
        int int43 = aVLTree27.getBalance(node42);
        int int44 = aVLTree18.getBalance(node42);
        int int45 = aVLTree8.getBalance(node42);
        int int46 = aVLTree0.getBalance(node42);
        java.lang.Class<?> wildcardClass47 = node42.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node6 = aVLTree0.find(100);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        com.example.AVLTree.Node node51 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        int int10 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node14 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) ' ');
        int int17 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = aVLTree3.getRoot();
        aVLTree3.insert((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree3.getBalance(node19);
        int int21 = aVLTree0.getBalance(node19);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        com.example.AVLTree.Node node25 = aVLTree0.getRoot();
        com.example.AVLTree.Node node27 = aVLTree0.find((int) (byte) 100);
        int int28 = aVLTree0.height();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        int int13 = aVLTree0.height();
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree14.getBalance(node17);
        aVLTree14.insert((int) '4');
        com.example.AVLTree.Node node22 = aVLTree14.find(100);
        com.example.AVLTree.Node node23 = aVLTree14.getRoot();
        int int24 = aVLTree0.getBalance(node23);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree0.find((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) 'a');
        aVLTree0.delete((int) (short) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        com.example.AVLTree.Node node16 = aVLTree0.find(0);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = node17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((-1));
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass18 = node17.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass9 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.delete(100);
        aVLTree6.insert((int) (byte) 10);
        com.example.AVLTree.Node node14 = aVLTree6.getRoot();
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        aVLTree15.delete((int) 'a');
        com.example.AVLTree.Node node20 = aVLTree15.getRoot();
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree15.getBalance(node21);
        com.example.AVLTree.Node node24 = aVLTree15.find((int) ' ');
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node29 = aVLTree25.find((int) 'a');
        aVLTree25.delete((int) (short) 10);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree32.getBalance(node33);
        aVLTree32.insert((int) (byte) 100);
        aVLTree32.insert((int) 'a');
        com.example.AVLTree.Node node40 = aVLTree32.find((int) (byte) 100);
        int int41 = aVLTree25.getBalance(node40);
        int int42 = aVLTree15.getBalance(node40);
        int int43 = aVLTree6.getBalance(node40);
        int int44 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        aVLTree0.insert(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        aVLTree7.insert((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree7.find((int) ' ');
        int int16 = aVLTree7.height();
        com.example.AVLTree.Node node17 = aVLTree7.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        aVLTree19.delete(100);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree19.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        aVLTree0.insert((int) '4');
        java.lang.Class<?> wildcardClass48 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        aVLTree28.insert(0);
        int int51 = aVLTree28.height();
        com.example.AVLTree.Node node52 = aVLTree28.getRoot();
        int int53 = aVLTree0.getBalance(node52);
        int int54 = aVLTree0.height();
        com.example.AVLTree.Node node55 = aVLTree0.getRoot();
        com.example.AVLTree.Node node57 = aVLTree0.find((int) (short) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node11 = aVLTree0.find(2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node28 = aVLTree0.getRoot();
        int int29 = aVLTree0.height();
        com.example.AVLTree.Node node30 = aVLTree0.getRoot();
        com.example.AVLTree.Node node31 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        int int12 = aVLTree0.height();
        java.lang.Class<?> wildcardClass13 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 1);
        java.lang.Class<?> wildcardClass24 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        int int16 = aVLTree13.height();
        aVLTree13.insert((-1));
        aVLTree13.delete((int) (byte) 1);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        aVLTree21.delete((int) (byte) -1);
        aVLTree21.delete((int) (byte) 0);
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        com.example.AVLTree.Node node28 = aVLTree21.find(1);
        com.example.AVLTree.Node node30 = aVLTree21.find(10);
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree31.getBalance(node32);
        aVLTree31.delete((int) (byte) -1);
        int int36 = aVLTree31.height();
        int int37 = aVLTree31.height();
        com.example.AVLTree.Node node39 = aVLTree31.find((int) '#');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node44 = aVLTree40.find((int) 'a');
        aVLTree40.delete((int) (short) 10);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = null;
        int int49 = aVLTree47.getBalance(node48);
        aVLTree47.insert((int) (byte) 100);
        aVLTree47.insert((int) 'a');
        com.example.AVLTree.Node node55 = aVLTree47.find((int) (byte) 100);
        int int56 = aVLTree40.getBalance(node55);
        int int57 = aVLTree31.getBalance(node55);
        int int58 = aVLTree21.getBalance(node55);
        int int59 = aVLTree13.getBalance(node55);
        int int60 = aVLTree0.getBalance(node55);
        java.lang.Class<?> wildcardClass61 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        int int11 = aVLTree0.height();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = aVLTree12.getRoot();
        aVLTree12.delete(100);
        aVLTree12.delete((int) (short) -1);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.insert((int) (short) 0);
        com.example.AVLTree.Node node26 = aVLTree20.find(100);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        aVLTree27.delete((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree27.getRoot();
        aVLTree27.delete(0);
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree27.getBalance(node35);
        int int37 = aVLTree27.height();
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        com.example.AVLTree.Node node41 = aVLTree38.getRoot();
        aVLTree38.delete(100);
        aVLTree38.insert((int) (byte) 10);
        com.example.AVLTree.Node node46 = aVLTree38.getRoot();
        int int47 = aVLTree27.getBalance(node46);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        aVLTree48.delete((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree48.getRoot();
        aVLTree48.delete(0);
        com.example.AVLTree.Node node56 = null;
        int int57 = aVLTree48.getBalance(node56);
        int int58 = aVLTree48.height();
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree59.getRoot();
        aVLTree59.delete(100);
        aVLTree59.insert((int) (byte) 10);
        com.example.AVLTree.Node node67 = aVLTree59.getRoot();
        int int68 = aVLTree48.getBalance(node67);
        int int69 = aVLTree27.getBalance(node67);
        int int70 = aVLTree20.getBalance(node67);
        int int71 = aVLTree12.getBalance(node67);
        aVLTree12.insert(1);
        int int74 = aVLTree12.height();
        com.example.AVLTree.Node node75 = aVLTree12.getRoot();
        int int76 = aVLTree0.getBalance(node75);
        aVLTree0.insert((int) (short) 100);
        aVLTree0.delete((int) ' ');
        int int81 = aVLTree0.height();
        aVLTree0.delete((int) (short) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.delete((int) '4');
        aVLTree0.insert((int) (short) -1);
        aVLTree0.insert(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        int int10 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node14 = aVLTree0.find((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        int int5 = aVLTree0.height();
        com.example.AVLTree.Node node7 = aVLTree0.find((-1));
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node12 = aVLTree8.find((int) 'a');
        aVLTree8.delete((int) (short) 10);
        int int15 = aVLTree8.height();
        aVLTree8.delete((int) '#');
        aVLTree8.delete((int) (short) -1);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.delete((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree20.getBalance(node26);
        com.example.AVLTree.Node node29 = aVLTree20.find((int) ' ');
        aVLTree20.insert((-1));
        com.example.AVLTree.Node node32 = aVLTree20.getRoot();
        aVLTree20.delete((int) (byte) -1);
        aVLTree20.insert(0);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        aVLTree46.delete((int) 'a');
        com.example.AVLTree.Node node51 = aVLTree46.getRoot();
        aVLTree46.delete(0);
        com.example.AVLTree.Node node54 = null;
        int int55 = aVLTree46.getBalance(node54);
        int int56 = aVLTree46.height();
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        com.example.AVLTree.Node node60 = aVLTree57.getRoot();
        aVLTree57.delete(100);
        aVLTree57.insert((int) (byte) 10);
        com.example.AVLTree.Node node65 = aVLTree57.getRoot();
        int int66 = aVLTree46.getBalance(node65);
        int int67 = aVLTree37.getBalance(node65);
        com.example.AVLTree.Node node68 = aVLTree37.getRoot();
        com.example.AVLTree.Node node69 = aVLTree37.getRoot();
        int int70 = aVLTree20.getBalance(node69);
        com.example.AVLTree.Node node71 = aVLTree20.getRoot();
        int int72 = aVLTree8.getBalance(node71);
        int int73 = aVLTree0.getBalance(node71);
        aVLTree0.insert((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        int int3 = aVLTree0.height();
        aVLTree0.insert(1);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree14.getBalance(node15);
        aVLTree14.insert((int) (byte) 100);
        aVLTree14.insert((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree14.find((int) (byte) 100);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        aVLTree23.delete((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree23.getRoot();
        aVLTree23.delete(0);
        com.example.AVLTree.Node node31 = null;
        int int32 = aVLTree23.getBalance(node31);
        int int33 = aVLTree23.height();
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        com.example.AVLTree.Node node37 = aVLTree34.getRoot();
        aVLTree34.delete(100);
        aVLTree34.insert((int) (byte) 10);
        com.example.AVLTree.Node node42 = aVLTree34.getRoot();
        int int43 = aVLTree23.getBalance(node42);
        int int44 = aVLTree14.getBalance(node42);
        com.example.AVLTree.Node node45 = aVLTree14.getRoot();
        com.example.AVLTree.Node node46 = aVLTree14.getRoot();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        aVLTree47.delete((int) 'a');
        com.example.AVLTree.Node node52 = aVLTree47.getRoot();
        aVLTree47.delete(0);
        com.example.AVLTree.Node node55 = null;
        int int56 = aVLTree47.getBalance(node55);
        com.example.AVLTree.Node node57 = null;
        int int58 = aVLTree47.getBalance(node57);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        com.example.AVLTree.Node node65 = null;
        int int66 = aVLTree59.getBalance(node65);
        com.example.AVLTree.Node node68 = aVLTree59.find((int) ' ');
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node71 = aVLTree69.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree69.find((int) 'a');
        aVLTree69.delete((int) (short) 10);
        com.example.AVLTree aVLTree76 = new com.example.AVLTree();
        com.example.AVLTree.Node node77 = null;
        int int78 = aVLTree76.getBalance(node77);
        aVLTree76.insert((int) (byte) 100);
        aVLTree76.insert((int) 'a');
        com.example.AVLTree.Node node84 = aVLTree76.find((int) (byte) 100);
        int int85 = aVLTree69.getBalance(node84);
        int int86 = aVLTree59.getBalance(node84);
        int int87 = aVLTree47.getBalance(node84);
        int int88 = aVLTree14.getBalance(node84);
        int int89 = aVLTree7.getBalance(node84);
        int int90 = aVLTree0.getBalance(node84);
        aVLTree0.insert((int) '#');
        java.lang.Class<?> wildcardClass93 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree23.find((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree23.find((int) ' ');
        com.example.AVLTree.Node node31 = aVLTree23.find(0);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        aVLTree32.delete((int) 'a');
        aVLTree32.delete(1);
        aVLTree32.delete((int) '#');
        aVLTree32.delete((int) (short) -1);
        com.example.AVLTree.Node node43 = aVLTree32.getRoot();
        com.example.AVLTree.Node node45 = aVLTree32.find((int) (byte) 100);
        int int46 = aVLTree32.height();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node50 = aVLTree47.getRoot();
        aVLTree47.insert((int) (byte) 100);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree53.find((int) 'a');
        aVLTree53.delete((int) (short) 10);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree60.getBalance(node61);
        aVLTree60.insert((int) (byte) 100);
        aVLTree60.insert((int) 'a');
        com.example.AVLTree.Node node68 = aVLTree60.find((int) (byte) 100);
        int int69 = aVLTree53.getBalance(node68);
        int int70 = aVLTree47.getBalance(node68);
        int int71 = aVLTree32.getBalance(node68);
        int int72 = aVLTree23.getBalance(node68);
        int int73 = aVLTree0.getBalance(node68);
        int int74 = aVLTree0.height();
        int int75 = aVLTree0.height();
        java.lang.Class<?> wildcardClass76 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        aVLTree0.insert((int) (short) 1);
        int int44 = aVLTree0.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node48 = null;
        int int49 = aVLTree45.getBalance(node48);
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        com.example.AVLTree.Node node54 = aVLTree51.getRoot();
        aVLTree51.delete(100);
        int int57 = aVLTree51.height();
        com.example.AVLTree.Node node59 = aVLTree51.find((int) (short) -1);
        com.example.AVLTree.Node node60 = aVLTree51.getRoot();
        com.example.AVLTree.Node node61 = aVLTree51.getRoot();
        aVLTree51.insert((int) (byte) 1);
        com.example.AVLTree.Node node64 = aVLTree51.getRoot();
        int int65 = aVLTree45.getBalance(node64);
        int int66 = aVLTree0.getBalance(node64);
        java.lang.Class<?> wildcardClass67 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        int int7 = aVLTree0.height();
        int int8 = aVLTree0.height();
        com.example.AVLTree.Node node10 = aVLTree0.find(100);
        java.lang.Class<?> wildcardClass11 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        int int17 = aVLTree0.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree18.getBalance(node21);
        aVLTree18.insert((int) (short) 100);
        com.example.AVLTree.Node node26 = aVLTree18.find((int) ' ');
        int int27 = aVLTree18.height();
        com.example.AVLTree.Node node28 = aVLTree18.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        int int30 = aVLTree0.height();
        com.example.AVLTree.Node node32 = aVLTree0.find(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        int int21 = aVLTree0.height();
        int int22 = aVLTree0.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        int int26 = aVLTree23.height();
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        aVLTree27.delete((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree27.getRoot();
        aVLTree27.insert((int) (short) 1);
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((-1));
        int int38 = aVLTree35.height();
        com.example.AVLTree.Node node39 = aVLTree35.getRoot();
        aVLTree35.insert((int) (byte) 100);
        aVLTree35.delete(100);
        com.example.AVLTree aVLTree44 = new com.example.AVLTree();
        com.example.AVLTree.Node node46 = aVLTree44.find((int) '4');
        aVLTree44.delete((int) 'a');
        com.example.AVLTree.Node node49 = aVLTree44.getRoot();
        aVLTree44.delete(0);
        com.example.AVLTree.Node node52 = null;
        int int53 = aVLTree44.getBalance(node52);
        com.example.AVLTree.Node node54 = null;
        int int55 = aVLTree44.getBalance(node54);
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        aVLTree56.delete((int) 'a');
        com.example.AVLTree.Node node61 = aVLTree56.getRoot();
        com.example.AVLTree.Node node62 = null;
        int int63 = aVLTree56.getBalance(node62);
        com.example.AVLTree.Node node65 = aVLTree56.find((int) ' ');
        com.example.AVLTree aVLTree66 = new com.example.AVLTree();
        com.example.AVLTree.Node node68 = aVLTree66.find((int) '4');
        com.example.AVLTree.Node node70 = aVLTree66.find((int) 'a');
        aVLTree66.delete((int) (short) 10);
        com.example.AVLTree aVLTree73 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = null;
        int int75 = aVLTree73.getBalance(node74);
        aVLTree73.insert((int) (byte) 100);
        aVLTree73.insert((int) 'a');
        com.example.AVLTree.Node node81 = aVLTree73.find((int) (byte) 100);
        int int82 = aVLTree66.getBalance(node81);
        int int83 = aVLTree56.getBalance(node81);
        int int84 = aVLTree44.getBalance(node81);
        int int85 = aVLTree35.getBalance(node81);
        int int86 = aVLTree27.getBalance(node81);
        int int87 = aVLTree23.getBalance(node81);
        int int88 = aVLTree0.getBalance(node81);
        java.lang.Class<?> wildcardClass89 = node81.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree10.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree19.find((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        com.example.AVLTree.Node node25 = aVLTree19.getRoot();
        com.example.AVLTree.Node node26 = aVLTree19.getRoot();
        aVLTree19.delete((int) (byte) 10);
        int int29 = aVLTree19.height();
        com.example.AVLTree.Node node31 = aVLTree19.find((int) (short) 10);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree19.getBalance(node40);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree42.getBalance(node43);
        aVLTree42.insert((int) (byte) 100);
        aVLTree42.insert((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree42.find((int) (byte) 100);
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        aVLTree51.delete((int) 'a');
        com.example.AVLTree.Node node56 = aVLTree51.getRoot();
        aVLTree51.delete(0);
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree51.getBalance(node59);
        int int61 = aVLTree51.height();
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = aVLTree62.getRoot();
        aVLTree62.delete(100);
        aVLTree62.insert((int) (byte) 10);
        com.example.AVLTree.Node node70 = aVLTree62.getRoot();
        int int71 = aVLTree51.getBalance(node70);
        int int72 = aVLTree42.getBalance(node70);
        com.example.AVLTree.Node node73 = aVLTree42.getRoot();
        int int74 = aVLTree19.getBalance(node73);
        int int75 = aVLTree0.getBalance(node73);
        aVLTree0.insert(0);
        java.lang.Class<?> wildcardClass78 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        java.lang.Class<?> wildcardClass7 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (byte) -1);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree16.getRoot();
        aVLTree16.insert((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree16.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        int int41 = aVLTree0.height();
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.delete(100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        com.example.AVLTree.Node node30 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((-1));
        int int34 = aVLTree31.height();
        com.example.AVLTree.Node node35 = aVLTree31.getRoot();
        aVLTree31.insert((int) (byte) 100);
        aVLTree31.delete(100);
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        aVLTree40.delete((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree40.getRoot();
        aVLTree40.delete(0);
        com.example.AVLTree.Node node48 = null;
        int int49 = aVLTree40.getBalance(node48);
        com.example.AVLTree.Node node50 = null;
        int int51 = aVLTree40.getBalance(node50);
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        aVLTree52.delete((int) 'a');
        com.example.AVLTree.Node node57 = aVLTree52.getRoot();
        com.example.AVLTree.Node node58 = null;
        int int59 = aVLTree52.getBalance(node58);
        com.example.AVLTree.Node node61 = aVLTree52.find((int) ' ');
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node66 = aVLTree62.find((int) 'a');
        aVLTree62.delete((int) (short) 10);
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree69.getBalance(node70);
        aVLTree69.insert((int) (byte) 100);
        aVLTree69.insert((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree69.find((int) (byte) 100);
        int int78 = aVLTree62.getBalance(node77);
        int int79 = aVLTree52.getBalance(node77);
        int int80 = aVLTree40.getBalance(node77);
        int int81 = aVLTree31.getBalance(node77);
        int int82 = aVLTree0.getBalance(node77);
        aVLTree0.insert((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        aVLTree7.insert((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree7.find((int) ' ');
        int int16 = aVLTree7.height();
        com.example.AVLTree.Node node17 = aVLTree7.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        aVLTree19.delete(100);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree19.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass44 = node43.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree12.getBalance(node18);
        com.example.AVLTree.Node node21 = aVLTree12.find((int) ' ');
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree12.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        int int41 = aVLTree0.height();
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        int int11 = aVLTree0.height();
        aVLTree0.insert((int) (short) -1);
        aVLTree0.delete((int) (byte) -1);
        java.lang.Class<?> wildcardClass16 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        int int7 = aVLTree0.height();
        int int8 = aVLTree0.height();
        aVLTree0.insert((int) '#');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node6 = aVLTree0.find(100);
        int int7 = aVLTree0.height();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((-1));
        aVLTree8.delete(100);
        com.example.AVLTree.Node node14 = aVLTree8.find((int) '#');
        int int15 = aVLTree8.height();
        com.example.AVLTree.Node node17 = aVLTree8.find(10);
        com.example.AVLTree.Node node18 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) -1);
        com.example.AVLTree.Node node21 = aVLTree8.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree22.getBalance(node25);
        aVLTree22.insert((int) '4');
        com.example.AVLTree.Node node30 = aVLTree22.find((int) (short) 0);
        aVLTree22.insert((int) (byte) 1);
        aVLTree22.delete((int) (short) -1);
        int int35 = aVLTree22.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        aVLTree36.delete((int) (byte) -1);
        aVLTree36.delete((int) (byte) 0);
        com.example.AVLTree.Node node41 = aVLTree36.getRoot();
        com.example.AVLTree.Node node43 = aVLTree36.find(1);
        com.example.AVLTree.Node node45 = aVLTree36.find(10);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = null;
        int int48 = aVLTree46.getBalance(node47);
        aVLTree46.delete((int) (byte) -1);
        int int51 = aVLTree46.height();
        int int52 = aVLTree46.height();
        com.example.AVLTree.Node node54 = aVLTree46.find((int) '#');
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree55.find((int) 'a');
        aVLTree55.delete((int) (short) 10);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = null;
        int int64 = aVLTree62.getBalance(node63);
        aVLTree62.insert((int) (byte) 100);
        aVLTree62.insert((int) 'a');
        com.example.AVLTree.Node node70 = aVLTree62.find((int) (byte) 100);
        int int71 = aVLTree55.getBalance(node70);
        int int72 = aVLTree46.getBalance(node70);
        int int73 = aVLTree36.getBalance(node70);
        int int74 = aVLTree22.getBalance(node70);
        int int75 = aVLTree8.getBalance(node70);
        int int76 = aVLTree0.getBalance(node70);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree32.getBalance(node35);
        aVLTree32.insert((int) (short) 100);
        com.example.AVLTree.Node node40 = aVLTree32.find((int) ' ');
        int int41 = aVLTree32.height();
        com.example.AVLTree.Node node42 = aVLTree32.getRoot();
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        aVLTree43.insert((int) (byte) 100);
        int int54 = aVLTree43.height();
        aVLTree43.delete((int) (byte) 0);
        com.example.AVLTree.Node node58 = aVLTree43.find(0);
        int int59 = aVLTree43.height();
        com.example.AVLTree.Node node61 = aVLTree43.find((int) (short) 10);
        int int62 = aVLTree32.getBalance(node61);
        int int63 = aVLTree0.getBalance(node61);
        com.example.AVLTree.Node node65 = aVLTree0.find((int) (short) 10);
        java.lang.Class<?> wildcardClass66 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert((int) '#');
        aVLTree0.delete(100);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) 'a');
        aVLTree0.delete(0);
        java.lang.Class<?> wildcardClass25 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) (byte) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) '4');
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        aVLTree16.delete((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree16.getRoot();
        aVLTree16.insert((int) (short) 1);
        com.example.AVLTree.Node node25 = aVLTree16.find((int) (byte) 1);
        int int26 = aVLTree0.getBalance(node25);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.delete((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) 'a');
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node22 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass23 = node22.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        aVLTree7.insert((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree7.find((int) ' ');
        int int16 = aVLTree7.height();
        com.example.AVLTree.Node node17 = aVLTree7.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        aVLTree0.insert((int) (short) -1);
        java.lang.Class<?> wildcardClass21 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        int int7 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        int int9 = aVLTree0.height();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.insert((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        aVLTree0.insert(0);
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (short) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree8.getRoot();
        aVLTree8.delete(100);
        aVLTree8.insert((int) (byte) 10);
        com.example.AVLTree.Node node16 = aVLTree8.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.delete((int) (short) 100);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node22 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 10);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        int int14 = aVLTree0.height();
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree15.find((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree15.find((int) ' ');
        aVLTree15.delete((int) '4');
        aVLTree15.delete((int) (short) 100);
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree26.find((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree26.find((int) ' ');
        com.example.AVLTree.Node node34 = aVLTree26.find((int) '#');
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree35.getBalance(node38);
        aVLTree35.insert((int) (short) 100);
        com.example.AVLTree.Node node43 = aVLTree35.find((int) ' ');
        int int44 = aVLTree35.height();
        com.example.AVLTree.Node node45 = aVLTree35.getRoot();
        int int46 = aVLTree26.getBalance(node45);
        int int47 = aVLTree15.getBalance(node45);
        int int48 = aVLTree0.getBalance(node45);
        int int49 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (short) -1);
        java.lang.Class<?> wildcardClass8 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) '#');
        int int10 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node10 = aVLTree6.find((int) 'a');
        aVLTree6.delete((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree13.getBalance(node14);
        aVLTree13.insert((int) (byte) 100);
        aVLTree13.insert((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree13.find((int) (byte) 100);
        int int22 = aVLTree6.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        aVLTree0.delete((int) 'a');
        aVLTree0.delete((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.find(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = aVLTree5.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree5.getRoot();
        aVLTree5.insert((int) (byte) 100);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) (short) 100);
        com.example.AVLTree.Node node19 = aVLTree11.find((int) ' ');
        int int20 = aVLTree11.height();
        com.example.AVLTree.Node node21 = aVLTree11.getRoot();
        int int22 = aVLTree5.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node27 = aVLTree0.find((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree12.find((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete((int) (short) 10);
        com.example.AVLTree.Node node20 = aVLTree12.getRoot();
        com.example.AVLTree.Node node21 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        aVLTree22.insert((int) (byte) 100);
        aVLTree22.insert((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree22.find((int) (byte) 100);
        int int31 = aVLTree12.getBalance(node30);
        int int32 = aVLTree0.getBalance(node30);
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        aVLTree33.delete((int) (byte) 1);
        aVLTree33.delete((int) '#');
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node47 = aVLTree43.find((int) 'a');
        com.example.AVLTree.Node node48 = aVLTree43.getRoot();
        com.example.AVLTree.Node node49 = aVLTree43.getRoot();
        com.example.AVLTree.Node node50 = aVLTree43.getRoot();
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node52 = null;
        int int53 = aVLTree51.getBalance(node52);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree54.getRoot();
        aVLTree54.insert((int) (byte) 100);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        com.example.AVLTree.Node node63 = null;
        int int64 = aVLTree60.getBalance(node63);
        aVLTree60.insert((int) (short) 100);
        com.example.AVLTree.Node node68 = aVLTree60.find((int) ' ');
        int int69 = aVLTree60.height();
        com.example.AVLTree.Node node70 = aVLTree60.getRoot();
        int int71 = aVLTree54.getBalance(node70);
        int int72 = aVLTree51.getBalance(node70);
        int int73 = aVLTree43.getBalance(node70);
        int int74 = aVLTree33.getBalance(node70);
        int int75 = aVLTree0.getBalance(node70);
        java.lang.Class<?> wildcardClass76 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        int int8 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.insert(100);
        aVLTree0.delete((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(100);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree12.getBalance(node18);
        com.example.AVLTree.Node node21 = aVLTree12.find((int) ' ');
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree12.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree41.getBalance(node44);
        aVLTree41.insert(0);
        aVLTree41.insert((int) (short) 10);
        com.example.AVLTree.Node node50 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        aVLTree53.delete((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree53.getRoot();
        aVLTree53.delete(0);
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree53.getBalance(node61);
        com.example.AVLTree.Node node63 = null;
        int int64 = aVLTree53.getBalance(node63);
        com.example.AVLTree aVLTree65 = new com.example.AVLTree();
        com.example.AVLTree.Node node67 = aVLTree65.find((int) '4');
        com.example.AVLTree.Node node69 = aVLTree65.find((int) 'a');
        com.example.AVLTree.Node node70 = aVLTree65.getRoot();
        aVLTree65.delete((int) (short) 10);
        com.example.AVLTree.Node node73 = aVLTree65.getRoot();
        com.example.AVLTree.Node node74 = aVLTree65.getRoot();
        com.example.AVLTree aVLTree75 = new com.example.AVLTree();
        com.example.AVLTree.Node node76 = null;
        int int77 = aVLTree75.getBalance(node76);
        aVLTree75.insert((int) (byte) 100);
        aVLTree75.insert((int) 'a');
        com.example.AVLTree.Node node83 = aVLTree75.find((int) (byte) 100);
        int int84 = aVLTree65.getBalance(node83);
        int int85 = aVLTree53.getBalance(node83);
        int int86 = aVLTree41.getBalance(node83);
        aVLTree41.delete(0);
        com.example.AVLTree.Node node89 = aVLTree41.getRoot();
        int int90 = aVLTree0.getBalance(node89);
        aVLTree0.delete(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        aVLTree0.insert((int) (short) -1);
        aVLTree0.insert((int) (short) 10);
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = aVLTree3.getRoot();
        aVLTree3.insert((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree3.getBalance(node19);
        int int21 = aVLTree0.getBalance(node19);
        aVLTree0.insert((int) (short) 1);
        int int24 = aVLTree0.height();
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree.Node node27 = aVLTree0.getRoot();
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node31 = aVLTree0.find(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass32 = node31.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 1);
        int int6 = aVLTree0.height();
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.delete((int) (byte) 1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) (byte) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert(100);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree7.find((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree7.find((int) ' ');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) '#');
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = null;
        int int20 = aVLTree16.getBalance(node19);
        aVLTree16.insert((int) (short) 100);
        com.example.AVLTree.Node node24 = aVLTree16.find((int) ' ');
        int int25 = aVLTree16.height();
        com.example.AVLTree.Node node26 = aVLTree16.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        int int28 = aVLTree0.getBalance(node26);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        aVLTree29.insert(0);
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree36.getBalance(node37);
        aVLTree36.insert((int) (byte) 100);
        aVLTree36.insert((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree36.getRoot();
        int int44 = aVLTree29.getBalance(node43);
        com.example.AVLTree.Node node46 = aVLTree29.find((int) (short) 100);
        aVLTree29.delete((int) (short) -1);
        aVLTree29.insert(10);
        aVLTree29.insert(1);
        com.example.AVLTree.Node node54 = aVLTree29.find((int) (short) 1);
        int int55 = aVLTree0.getBalance(node54);
        int int56 = aVLTree0.height();
        java.lang.Class<?> wildcardClass57 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree9.find((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        com.example.AVLTree.Node node15 = aVLTree9.getRoot();
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        aVLTree9.delete((int) (byte) 10);
        int int19 = aVLTree9.height();
        com.example.AVLTree.Node node21 = aVLTree9.find((int) (short) 10);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node25 = aVLTree22.getRoot();
        aVLTree22.delete(100);
        aVLTree22.insert((int) (byte) 10);
        com.example.AVLTree.Node node30 = aVLTree22.getRoot();
        int int31 = aVLTree9.getBalance(node30);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree32.find((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree32.find((int) ' ');
        com.example.AVLTree.Node node40 = aVLTree32.find(0);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        aVLTree41.delete(1);
        aVLTree41.delete((int) '#');
        aVLTree41.delete((int) (short) -1);
        com.example.AVLTree.Node node52 = aVLTree41.getRoot();
        com.example.AVLTree.Node node54 = aVLTree41.find((int) (byte) 100);
        int int55 = aVLTree41.height();
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree56.getRoot();
        aVLTree56.insert((int) (byte) 100);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node66 = aVLTree62.find((int) 'a');
        aVLTree62.delete((int) (short) 10);
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree69.getBalance(node70);
        aVLTree69.insert((int) (byte) 100);
        aVLTree69.insert((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree69.find((int) (byte) 100);
        int int78 = aVLTree62.getBalance(node77);
        int int79 = aVLTree56.getBalance(node77);
        int int80 = aVLTree41.getBalance(node77);
        int int81 = aVLTree32.getBalance(node77);
        int int82 = aVLTree9.getBalance(node77);
        int int83 = aVLTree0.getBalance(node77);
        com.example.AVLTree.Node node84 = aVLTree0.getRoot();
        com.example.AVLTree.Node node85 = aVLTree0.getRoot();
        com.example.AVLTree.Node node87 = aVLTree0.find((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        aVLTree0.insert((int) (short) 1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node10 = aVLTree0.find(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree12.getBalance(node13);
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node18 = aVLTree15.getRoot();
        aVLTree15.insert((int) (byte) 100);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree21.getBalance(node24);
        aVLTree21.insert((int) (short) 100);
        com.example.AVLTree.Node node29 = aVLTree21.find((int) ' ');
        int int30 = aVLTree21.height();
        com.example.AVLTree.Node node31 = aVLTree21.getRoot();
        int int32 = aVLTree15.getBalance(node31);
        int int33 = aVLTree12.getBalance(node31);
        com.example.AVLTree.Node node35 = aVLTree12.find((int) 'a');
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree36.getBalance(node37);
        aVLTree36.insert((int) (byte) 100);
        aVLTree36.insert((int) 'a');
        com.example.AVLTree.Node node44 = aVLTree36.find((int) (byte) 100);
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        aVLTree45.delete((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        aVLTree45.delete(0);
        com.example.AVLTree.Node node53 = null;
        int int54 = aVLTree45.getBalance(node53);
        int int55 = aVLTree45.height();
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree56.getRoot();
        aVLTree56.delete(100);
        aVLTree56.insert((int) (byte) 10);
        com.example.AVLTree.Node node64 = aVLTree56.getRoot();
        int int65 = aVLTree45.getBalance(node64);
        int int66 = aVLTree36.getBalance(node64);
        com.example.AVLTree.Node node67 = aVLTree36.getRoot();
        int int68 = aVLTree12.getBalance(node67);
        int int69 = aVLTree0.getBalance(node67);
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node75 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node77 = aVLTree0.find((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass78 = node77.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        aVLTree0.insert((int) (short) 0);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        aVLTree0.insert((int) (short) 1);
        aVLTree0.delete((int) (short) -1);
        java.lang.Class<?> wildcardClass10 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree0.getBalance(node9);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        int int12 = aVLTree0.height();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = null;
        int int17 = aVLTree13.getBalance(node16);
        aVLTree13.insert((int) '4');
        com.example.AVLTree.Node node21 = aVLTree13.find((int) '#');
        aVLTree13.insert(0);
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        aVLTree24.delete((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree24.getRoot();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree24.getBalance(node30);
        com.example.AVLTree.Node node33 = aVLTree24.find((int) ' ');
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        com.example.AVLTree.Node node38 = aVLTree34.find((int) 'a');
        aVLTree34.delete((int) (short) 10);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = null;
        int int43 = aVLTree41.getBalance(node42);
        aVLTree41.insert((int) (byte) 100);
        aVLTree41.insert((int) 'a');
        com.example.AVLTree.Node node49 = aVLTree41.find((int) (byte) 100);
        int int50 = aVLTree34.getBalance(node49);
        int int51 = aVLTree24.getBalance(node49);
        int int52 = aVLTree13.getBalance(node49);
        int int53 = aVLTree0.getBalance(node49);
        aVLTree0.insert(10);
        aVLTree0.delete(0);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree58.getBalance(node59);
        com.example.AVLTree aVLTree61 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = aVLTree61.find((int) '4');
        com.example.AVLTree.Node node64 = null;
        int int65 = aVLTree61.getBalance(node64);
        aVLTree61.insert((int) (short) 100);
        com.example.AVLTree.Node node69 = aVLTree61.find((int) ' ');
        int int70 = aVLTree61.height();
        com.example.AVLTree.Node node71 = aVLTree61.getRoot();
        int int72 = aVLTree58.getBalance(node71);
        int int73 = aVLTree58.height();
        com.example.AVLTree.Node node75 = aVLTree58.find((int) (short) 0);
        int int76 = aVLTree58.height();
        com.example.AVLTree aVLTree77 = new com.example.AVLTree();
        com.example.AVLTree.Node node79 = aVLTree77.find((int) '4');
        com.example.AVLTree.Node node80 = aVLTree77.getRoot();
        aVLTree77.delete(100);
        int int83 = aVLTree77.height();
        com.example.AVLTree.Node node85 = aVLTree77.find((int) (short) -1);
        com.example.AVLTree.Node node86 = aVLTree77.getRoot();
        com.example.AVLTree.Node node87 = aVLTree77.getRoot();
        aVLTree77.insert((int) (byte) 1);
        int int90 = aVLTree77.height();
        com.example.AVLTree.Node node91 = aVLTree77.getRoot();
        int int92 = aVLTree58.getBalance(node91);
        int int93 = aVLTree0.getBalance(node91);
        java.lang.Class<?> wildcardClass94 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node30 = aVLTree0.getRoot();
        int int31 = aVLTree0.height();
        int int32 = aVLTree0.height();
        int int33 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete((int) ' ');
        int int7 = aVLTree0.height();
        aVLTree0.insert(100);
        com.example.AVLTree.Node node11 = aVLTree0.find((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree.Node node14 = aVLTree0.find(100);
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree15.getBalance(node18);
        aVLTree15.insert(0);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        aVLTree22.insert((int) (byte) 100);
        aVLTree22.insert((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree22.getRoot();
        int int30 = aVLTree15.getBalance(node29);
        aVLTree15.insert((int) (short) -1);
        com.example.AVLTree.Node node33 = aVLTree15.getRoot();
        int int34 = aVLTree0.getBalance(node33);
        int int35 = aVLTree0.height();
        java.lang.Class<?> wildcardClass36 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete(10);
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        int int7 = aVLTree0.height();
        int int8 = aVLTree0.height();
        com.example.AVLTree.Node node10 = aVLTree0.find((-1));
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        int int11 = aVLTree0.height();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = aVLTree12.getRoot();
        aVLTree12.delete(100);
        aVLTree12.delete((int) (short) -1);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.insert((int) (short) 0);
        com.example.AVLTree.Node node26 = aVLTree20.find(100);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        aVLTree27.delete((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree27.getRoot();
        aVLTree27.delete(0);
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree27.getBalance(node35);
        int int37 = aVLTree27.height();
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        com.example.AVLTree.Node node41 = aVLTree38.getRoot();
        aVLTree38.delete(100);
        aVLTree38.insert((int) (byte) 10);
        com.example.AVLTree.Node node46 = aVLTree38.getRoot();
        int int47 = aVLTree27.getBalance(node46);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        aVLTree48.delete((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree48.getRoot();
        aVLTree48.delete(0);
        com.example.AVLTree.Node node56 = null;
        int int57 = aVLTree48.getBalance(node56);
        int int58 = aVLTree48.height();
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree59.getRoot();
        aVLTree59.delete(100);
        aVLTree59.insert((int) (byte) 10);
        com.example.AVLTree.Node node67 = aVLTree59.getRoot();
        int int68 = aVLTree48.getBalance(node67);
        int int69 = aVLTree27.getBalance(node67);
        int int70 = aVLTree20.getBalance(node67);
        int int71 = aVLTree12.getBalance(node67);
        aVLTree12.insert(1);
        int int74 = aVLTree12.height();
        com.example.AVLTree.Node node75 = aVLTree12.getRoot();
        int int76 = aVLTree0.getBalance(node75);
        aVLTree0.insert((int) (short) 100);
        int int79 = aVLTree0.height();
        com.example.AVLTree.Node node80 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass81 = node80.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 1);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree13.find((int) 'a');
        com.example.AVLTree.Node node19 = aVLTree13.find((int) ' ');
        com.example.AVLTree.Node node21 = aVLTree13.find((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree22.getRoot();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        com.example.AVLTree.Node node29 = aVLTree24.find((int) (short) -1);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        aVLTree30.delete((int) 'a');
        com.example.AVLTree.Node node35 = aVLTree30.getRoot();
        aVLTree30.delete(0);
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree30.getBalance(node38);
        int int40 = aVLTree30.height();
        aVLTree30.delete(100);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        int int52 = aVLTree30.getBalance(node51);
        int int53 = aVLTree24.getBalance(node51);
        int int54 = aVLTree22.getBalance(node51);
        int int55 = aVLTree13.getBalance(node51);
        int int56 = aVLTree0.getBalance(node51);
        int int57 = aVLTree0.height();
        com.example.AVLTree.Node node58 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass59 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert((int) '#');
        aVLTree0.delete(10);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        int int14 = aVLTree0.height();
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.delete(0);
        int int12 = aVLTree0.height();
        int int13 = aVLTree0.height();
        aVLTree0.delete((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        com.example.AVLTree.Node node16 = aVLTree0.find((int) (short) 0);
        int int17 = aVLTree0.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        aVLTree18.insert((int) (byte) 100);
        int int29 = aVLTree18.height();
        aVLTree18.delete((int) (byte) 0);
        com.example.AVLTree.Node node33 = aVLTree18.find(0);
        com.example.AVLTree.Node node35 = aVLTree18.find(100);
        int int36 = aVLTree0.getBalance(node35);
        com.example.AVLTree.Node node37 = aVLTree0.getRoot();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node33 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node42 = aVLTree0.getRoot();
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        aVLTree13.insert((int) (short) 0);
        com.example.AVLTree.Node node19 = aVLTree13.find(100);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.delete((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        aVLTree20.delete(0);
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree20.getBalance(node28);
        int int30 = aVLTree20.height();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree31.getRoot();
        aVLTree31.delete(100);
        aVLTree31.insert((int) (byte) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        int int40 = aVLTree20.getBalance(node39);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        com.example.AVLTree.Node node46 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree41.getBalance(node49);
        int int51 = aVLTree41.height();
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        com.example.AVLTree.Node node55 = aVLTree52.getRoot();
        aVLTree52.delete(100);
        aVLTree52.insert((int) (byte) 10);
        com.example.AVLTree.Node node60 = aVLTree52.getRoot();
        int int61 = aVLTree41.getBalance(node60);
        int int62 = aVLTree20.getBalance(node60);
        int int63 = aVLTree13.getBalance(node60);
        int int64 = aVLTree7.getBalance(node60);
        int int65 = aVLTree7.height();
        aVLTree7.insert((int) (byte) 0);
        int int68 = aVLTree7.height();
        com.example.AVLTree.Node node70 = aVLTree7.find((int) (short) 0);
        int int71 = aVLTree0.getBalance(node70);
        com.example.AVLTree.Node node73 = aVLTree0.find(100);
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert(100);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(100);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        aVLTree26.delete((int) 'a');
        com.example.AVLTree.Node node31 = aVLTree26.getRoot();
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree26.getBalance(node32);
        com.example.AVLTree.Node node35 = aVLTree26.find((int) ' ');
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node40 = aVLTree36.find((int) 'a');
        aVLTree36.delete((int) (short) 10);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree43.getBalance(node44);
        aVLTree43.insert((int) (byte) 100);
        aVLTree43.insert((int) 'a');
        com.example.AVLTree.Node node51 = aVLTree43.find((int) (byte) 100);
        int int52 = aVLTree36.getBalance(node51);
        int int53 = aVLTree26.getBalance(node51);
        int int54 = aVLTree17.getBalance(node51);
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree55.find((int) 'a');
        com.example.AVLTree.Node node60 = aVLTree55.getRoot();
        com.example.AVLTree.Node node61 = aVLTree55.getRoot();
        com.example.AVLTree.Node node62 = aVLTree55.getRoot();
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = null;
        int int65 = aVLTree63.getBalance(node64);
        com.example.AVLTree aVLTree66 = new com.example.AVLTree();
        com.example.AVLTree.Node node68 = aVLTree66.find((int) '4');
        com.example.AVLTree.Node node69 = aVLTree66.getRoot();
        aVLTree66.insert((int) (byte) 100);
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node75 = null;
        int int76 = aVLTree72.getBalance(node75);
        aVLTree72.insert((int) (short) 100);
        com.example.AVLTree.Node node80 = aVLTree72.find((int) ' ');
        int int81 = aVLTree72.height();
        com.example.AVLTree.Node node82 = aVLTree72.getRoot();
        int int83 = aVLTree66.getBalance(node82);
        int int84 = aVLTree63.getBalance(node82);
        int int85 = aVLTree55.getBalance(node82);
        int int86 = aVLTree17.getBalance(node82);
        int int87 = aVLTree0.getBalance(node82);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) 100);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node15 = aVLTree11.find((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree11.find((int) ' ');
        com.example.AVLTree.Node node19 = aVLTree11.find((int) '#');
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree20.getBalance(node23);
        aVLTree20.insert((int) (short) 100);
        com.example.AVLTree.Node node28 = aVLTree20.find((int) ' ');
        int int29 = aVLTree20.height();
        com.example.AVLTree.Node node30 = aVLTree20.getRoot();
        int int31 = aVLTree11.getBalance(node30);
        int int32 = aVLTree0.getBalance(node30);
        int int33 = aVLTree0.height();
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        com.example.AVLTree.Node node37 = aVLTree34.getRoot();
        aVLTree34.delete(100);
        int int40 = aVLTree34.height();
        com.example.AVLTree.Node node42 = aVLTree34.find((int) (short) -1);
        com.example.AVLTree.Node node43 = aVLTree34.getRoot();
        com.example.AVLTree.Node node44 = aVLTree34.getRoot();
        aVLTree34.insert((int) (byte) 1);
        com.example.AVLTree.Node node47 = aVLTree34.getRoot();
        int int48 = aVLTree0.getBalance(node47);
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree19.getBalance(node22);
        aVLTree19.insert((int) '4');
        com.example.AVLTree.Node node27 = aVLTree19.find((int) (short) 0);
        com.example.AVLTree.Node node29 = aVLTree19.find((int) ' ');
        int int30 = aVLTree19.height();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree31.find((int) 'a');
        com.example.AVLTree.Node node36 = aVLTree31.getRoot();
        aVLTree31.delete((int) (short) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        int int40 = aVLTree31.height();
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.insert((int) (short) 0);
        com.example.AVLTree.Node node47 = aVLTree41.find(100);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree48.getRoot();
        aVLTree48.delete(100);
        aVLTree48.insert((int) (byte) 10);
        com.example.AVLTree.Node node56 = aVLTree48.getRoot();
        int int57 = aVLTree41.getBalance(node56);
        int int58 = aVLTree31.getBalance(node56);
        int int59 = aVLTree19.getBalance(node56);
        com.example.AVLTree.Node node60 = aVLTree19.getRoot();
        int int61 = aVLTree0.getBalance(node60);
        int int62 = aVLTree0.height();
        com.example.AVLTree.Node node63 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        int int11 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 0);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree14.getBalance(node17);
        aVLTree14.insert((int) (short) 100);
        com.example.AVLTree.Node node22 = aVLTree14.find((int) ' ');
        int int23 = aVLTree14.height();
        aVLTree14.delete(0);
        aVLTree14.delete(10);
        aVLTree14.insert(0);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        aVLTree30.delete((int) 'a');
        com.example.AVLTree.Node node35 = aVLTree30.getRoot();
        aVLTree30.delete(0);
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree30.getBalance(node38);
        int int40 = aVLTree30.height();
        aVLTree30.delete(100);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        int int52 = aVLTree30.getBalance(node51);
        int int53 = aVLTree14.getBalance(node51);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        aVLTree54.insert((int) (short) 0);
        com.example.AVLTree.Node node60 = aVLTree54.find(100);
        int int61 = aVLTree54.height();
        com.example.AVLTree.Node node62 = aVLTree54.getRoot();
        int int63 = aVLTree14.getBalance(node62);
        int int64 = aVLTree0.getBalance(node62);
        int int65 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        int int9 = aVLTree0.height();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 0);
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree16.find((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree16.find((int) ' ');
        aVLTree16.delete((int) '4');
        aVLTree16.delete((int) (short) 100);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree27.find((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree27.find((int) ' ');
        com.example.AVLTree.Node node35 = aVLTree27.find((int) '#');
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = null;
        int int40 = aVLTree36.getBalance(node39);
        aVLTree36.insert((int) (short) 100);
        com.example.AVLTree.Node node44 = aVLTree36.find((int) ' ');
        int int45 = aVLTree36.height();
        com.example.AVLTree.Node node46 = aVLTree36.getRoot();
        int int47 = aVLTree27.getBalance(node46);
        int int48 = aVLTree16.getBalance(node46);
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.delete((int) (short) -1);
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        aVLTree57.delete((int) 'a');
        aVLTree57.delete(1);
        aVLTree57.delete((int) '#');
        aVLTree57.delete((int) (short) -1);
        com.example.AVLTree.Node node68 = aVLTree57.getRoot();
        com.example.AVLTree.Node node70 = aVLTree57.find((int) (byte) 100);
        int int71 = aVLTree57.height();
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node75 = aVLTree72.getRoot();
        aVLTree72.insert((int) (byte) 100);
        com.example.AVLTree aVLTree78 = new com.example.AVLTree();
        com.example.AVLTree.Node node80 = aVLTree78.find((int) '4');
        com.example.AVLTree.Node node82 = aVLTree78.find((int) 'a');
        aVLTree78.delete((int) (short) 10);
        com.example.AVLTree aVLTree85 = new com.example.AVLTree();
        com.example.AVLTree.Node node86 = null;
        int int87 = aVLTree85.getBalance(node86);
        aVLTree85.insert((int) (byte) 100);
        aVLTree85.insert((int) 'a');
        com.example.AVLTree.Node node93 = aVLTree85.find((int) (byte) 100);
        int int94 = aVLTree78.getBalance(node93);
        int int95 = aVLTree72.getBalance(node93);
        int int96 = aVLTree57.getBalance(node93);
        int int97 = aVLTree49.getBalance(node93);
        int int98 = aVLTree16.getBalance(node93);
        int int99 = aVLTree0.getBalance(node93);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        java.lang.Class<?> wildcardClass51 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        int int3 = aVLTree0.height();
        aVLTree0.insert(1);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        aVLTree7.delete(1);
        aVLTree7.delete((int) '#');
        aVLTree7.delete((int) (short) -1);
        aVLTree7.insert((int) (short) -1);
        aVLTree7.delete((int) (byte) 100);
        com.example.AVLTree.Node node22 = aVLTree7.getRoot();
        int int23 = aVLTree0.getBalance(node22);
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        aVLTree24.delete((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree24.getRoot();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree24.getBalance(node30);
        com.example.AVLTree.Node node33 = aVLTree24.find((int) ' ');
        aVLTree24.insert((-1));
        com.example.AVLTree.Node node36 = aVLTree24.getRoot();
        aVLTree24.delete((int) (byte) -1);
        aVLTree24.insert(0);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = null;
        int int43 = aVLTree41.getBalance(node42);
        aVLTree41.insert((int) (byte) 100);
        aVLTree41.insert((int) 'a');
        com.example.AVLTree.Node node49 = aVLTree41.find((int) (byte) 100);
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node52 = aVLTree50.find((int) '4');
        aVLTree50.delete((int) 'a');
        com.example.AVLTree.Node node55 = aVLTree50.getRoot();
        aVLTree50.delete(0);
        com.example.AVLTree.Node node58 = null;
        int int59 = aVLTree50.getBalance(node58);
        int int60 = aVLTree50.height();
        com.example.AVLTree aVLTree61 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = aVLTree61.find((int) '4');
        com.example.AVLTree.Node node64 = aVLTree61.getRoot();
        aVLTree61.delete(100);
        aVLTree61.insert((int) (byte) 10);
        com.example.AVLTree.Node node69 = aVLTree61.getRoot();
        int int70 = aVLTree50.getBalance(node69);
        int int71 = aVLTree41.getBalance(node69);
        com.example.AVLTree.Node node72 = aVLTree41.getRoot();
        com.example.AVLTree.Node node73 = aVLTree41.getRoot();
        int int74 = aVLTree24.getBalance(node73);
        int int75 = aVLTree0.getBalance(node73);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        int int9 = aVLTree0.height();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree.Node node13 = aVLTree0.find(1);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) '#');
        aVLTree0.delete((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node23 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        int int26 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete((int) ' ');
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 1);
        java.lang.Class<?> wildcardClass16 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.find((-1));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = node6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) '#');
        aVLTree0.insert((int) ' ');
        aVLTree0.insert((-1));
        java.lang.Class<?> wildcardClass20 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 10);
        aVLTree0.delete((-1));
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (byte) 10);
        aVLTree0.delete((int) (byte) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.insert((int) (short) 0);
        com.example.AVLTree.Node node12 = aVLTree6.find(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        aVLTree13.delete((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree13.getRoot();
        aVLTree13.delete(0);
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree13.getBalance(node21);
        int int23 = aVLTree13.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.delete(100);
        aVLTree24.insert((int) (byte) 10);
        com.example.AVLTree.Node node32 = aVLTree24.getRoot();
        int int33 = aVLTree13.getBalance(node32);
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        aVLTree34.delete((int) 'a');
        com.example.AVLTree.Node node39 = aVLTree34.getRoot();
        aVLTree34.delete(0);
        com.example.AVLTree.Node node42 = null;
        int int43 = aVLTree34.getBalance(node42);
        int int44 = aVLTree34.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node48 = aVLTree45.getRoot();
        aVLTree45.delete(100);
        aVLTree45.insert((int) (byte) 10);
        com.example.AVLTree.Node node53 = aVLTree45.getRoot();
        int int54 = aVLTree34.getBalance(node53);
        int int55 = aVLTree13.getBalance(node53);
        int int56 = aVLTree6.getBalance(node53);
        int int57 = aVLTree0.getBalance(node53);
        int int58 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 0);
        int int61 = aVLTree0.height();
        com.example.AVLTree.Node node63 = aVLTree0.find((int) (short) 0);
        int int64 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 0);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass14 = node13.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find(100);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) '#');
        java.lang.Class<?> wildcardClass29 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.insert((int) (byte) 100);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree23.getBalance(node26);
        aVLTree23.insert((int) (short) 100);
        com.example.AVLTree.Node node31 = aVLTree23.find((int) ' ');
        int int32 = aVLTree23.height();
        com.example.AVLTree.Node node33 = aVLTree23.getRoot();
        int int34 = aVLTree17.getBalance(node33);
        int int35 = aVLTree12.getBalance(node33);
        int int36 = aVLTree12.height();
        aVLTree12.delete((int) (short) -1);
        aVLTree12.insert((int) 'a');
        aVLTree12.delete((-1));
        aVLTree12.delete((int) (byte) 0);
        aVLTree12.delete(0);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree47.find((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree47.find((int) ' ');
        aVLTree47.delete((int) '4');
        aVLTree47.delete((int) (short) 100);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree58.find((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree58.find((int) ' ');
        com.example.AVLTree.Node node66 = aVLTree58.find((int) '#');
        com.example.AVLTree aVLTree67 = new com.example.AVLTree();
        com.example.AVLTree.Node node69 = aVLTree67.find((int) '4');
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree67.getBalance(node70);
        aVLTree67.insert((int) (short) 100);
        com.example.AVLTree.Node node75 = aVLTree67.find((int) ' ');
        int int76 = aVLTree67.height();
        com.example.AVLTree.Node node77 = aVLTree67.getRoot();
        int int78 = aVLTree58.getBalance(node77);
        int int79 = aVLTree47.getBalance(node77);
        int int80 = aVLTree12.getBalance(node77);
        int int81 = aVLTree0.getBalance(node77);
        aVLTree0.delete(1);
        aVLTree0.insert(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        java.lang.Class<?> wildcardClass19 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass6 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.insert((-1));
        aVLTree0.insert(100);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass9 = node8.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int15 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree12.find((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete((int) (short) 10);
        com.example.AVLTree.Node node20 = aVLTree12.getRoot();
        com.example.AVLTree.Node node21 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        aVLTree22.insert((int) (byte) 100);
        aVLTree22.insert((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree22.find((int) (byte) 100);
        int int31 = aVLTree12.getBalance(node30);
        int int32 = aVLTree0.getBalance(node30);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree35.getBalance(node36);
        com.example.AVLTree.Node node38 = aVLTree35.getRoot();
        aVLTree35.insert((int) (byte) 100);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        com.example.AVLTree.Node node46 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree41.getBalance(node49);
        int int51 = aVLTree41.height();
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        com.example.AVLTree.Node node55 = aVLTree52.getRoot();
        aVLTree52.delete(100);
        aVLTree52.insert((int) (byte) 10);
        com.example.AVLTree.Node node60 = aVLTree52.getRoot();
        int int61 = aVLTree41.getBalance(node60);
        int int62 = aVLTree35.getBalance(node60);
        aVLTree35.insert((int) (byte) 0);
        com.example.AVLTree.Node node66 = aVLTree35.find(100);
        int int67 = aVLTree0.getBalance(node66);
        com.example.AVLTree.Node node69 = aVLTree0.find((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(node69);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        com.example.AVLTree.Node node46 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node50 = aVLTree47.getRoot();
        aVLTree47.delete(100);
        int int53 = aVLTree47.height();
        com.example.AVLTree.Node node55 = aVLTree47.find((int) (short) -1);
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree56.getBalance(node59);
        aVLTree56.insert(0);
        com.example.AVLTree.Node node63 = aVLTree56.getRoot();
        int int64 = aVLTree47.getBalance(node63);
        int int65 = aVLTree0.getBalance(node63);
        java.lang.Class<?> wildcardClass66 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree12.getBalance(node15);
        aVLTree12.insert((int) '4');
        com.example.AVLTree.Node node20 = aVLTree12.find((int) (short) 0);
        int int21 = aVLTree12.height();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node24 = aVLTree12.getRoot();
        int int25 = aVLTree0.getBalance(node24);
        aVLTree0.insert((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node45 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((int) '#');
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        aVLTree48.delete((int) 'a');
        aVLTree48.insert((int) (short) 1);
        com.example.AVLTree.Node node56 = aVLTree48.find((int) ' ');
        aVLTree48.insert((int) (short) 10);
        aVLTree48.insert(0);
        com.example.AVLTree.Node node61 = aVLTree48.getRoot();
        int int62 = aVLTree0.getBalance(node61);
        java.lang.Class<?> wildcardClass63 = node61.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) '4');
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((-1));
        int int23 = aVLTree20.height();
        com.example.AVLTree.Node node25 = aVLTree20.find((int) (byte) 100);
        aVLTree20.insert(0);
        com.example.AVLTree.Node node28 = aVLTree20.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        aVLTree0.insert((int) (byte) 1);
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        com.example.AVLTree.Node node35 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(100);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node42 = aVLTree0.getRoot();
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass44 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        aVLTree0.delete(0);
        aVLTree0.insert(10);
        aVLTree0.insert((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 100);
        java.lang.Class<?> wildcardClass9 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = null;
        int int8 = aVLTree6.getBalance(node7);
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree12.getBalance(node20);
        int int22 = aVLTree12.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree12.getBalance(node31);
        int int33 = aVLTree6.getBalance(node31);
        int int34 = aVLTree0.getBalance(node31);
        com.example.AVLTree.Node node35 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.delete((int) (short) 10);
        int int11 = aVLTree0.height();
        java.lang.Class<?> wildcardClass12 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree16.getRoot();
        aVLTree16.delete(100);
        int int22 = aVLTree16.height();
        com.example.AVLTree.Node node24 = aVLTree16.find((int) (short) -1);
        com.example.AVLTree.Node node25 = aVLTree16.getRoot();
        com.example.AVLTree.Node node27 = aVLTree16.find(1);
        com.example.AVLTree.Node node28 = aVLTree16.getRoot();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((-1));
        aVLTree29.delete(100);
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree34.getBalance(node35);
        aVLTree34.insert((int) (byte) 100);
        aVLTree34.insert((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree34.find((int) (byte) 100);
        int int43 = aVLTree29.getBalance(node42);
        int int44 = aVLTree16.getBalance(node42);
        int int45 = aVLTree0.getBalance(node42);
        java.lang.Class<?> wildcardClass46 = node42.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert((-1));
        java.lang.Class<?> wildcardClass11 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) '#');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree0.getBalance(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        aVLTree9.delete(1);
        aVLTree9.delete((int) '#');
        aVLTree9.delete((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree9.getRoot();
        com.example.AVLTree.Node node22 = aVLTree9.find((int) (byte) 100);
        int int23 = aVLTree9.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.insert((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        aVLTree30.delete((int) (short) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        int int46 = aVLTree30.getBalance(node45);
        int int47 = aVLTree24.getBalance(node45);
        int int48 = aVLTree9.getBalance(node45);
        int int49 = aVLTree0.getBalance(node45);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        aVLTree0.delete(100);
        int int55 = aVLTree0.height();
        com.example.AVLTree.Node node57 = aVLTree0.find(1);
        com.example.AVLTree.Node node58 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass59 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) -1);
        int int23 = aVLTree0.height();
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(100);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (byte) -1);
        int int13 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 0);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node33 = aVLTree0.find(0);
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node39 = aVLTree37.find((int) '4');
        com.example.AVLTree.Node node40 = aVLTree37.getRoot();
        aVLTree37.delete(100);
        aVLTree37.insert((int) (byte) 10);
        com.example.AVLTree.Node node45 = aVLTree37.getRoot();
        aVLTree37.insert((int) (byte) 100);
        int int48 = aVLTree37.height();
        aVLTree37.insert((int) (byte) -1);
        com.example.AVLTree.Node node52 = aVLTree37.find((int) (short) -1);
        int int53 = aVLTree0.getBalance(node52);
        java.lang.Class<?> wildcardClass54 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree12.getBalance(node20);
        int int22 = aVLTree12.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree12.getBalance(node31);
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        aVLTree33.delete(0);
        com.example.AVLTree.Node node41 = null;
        int int42 = aVLTree33.getBalance(node41);
        int int43 = aVLTree33.height();
        com.example.AVLTree aVLTree44 = new com.example.AVLTree();
        com.example.AVLTree.Node node46 = aVLTree44.find((int) '4');
        com.example.AVLTree.Node node47 = aVLTree44.getRoot();
        aVLTree44.delete(100);
        aVLTree44.insert((int) (byte) 10);
        com.example.AVLTree.Node node52 = aVLTree44.getRoot();
        int int53 = aVLTree33.getBalance(node52);
        int int54 = aVLTree12.getBalance(node52);
        com.example.AVLTree.Node node55 = aVLTree12.getRoot();
        com.example.AVLTree.Node node56 = aVLTree12.getRoot();
        com.example.AVLTree.Node node57 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree58.getBalance(node61);
        aVLTree58.insert(0);
        aVLTree58.insert((int) (short) 10);
        com.example.AVLTree.Node node67 = aVLTree58.getRoot();
        aVLTree58.delete(0);
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        aVLTree70.delete((int) 'a');
        aVLTree70.delete(1);
        com.example.AVLTree.Node node77 = aVLTree70.getRoot();
        com.example.AVLTree.Node node79 = aVLTree70.find((int) (byte) 10);
        com.example.AVLTree.Node node80 = aVLTree70.getRoot();
        aVLTree70.delete(0);
        aVLTree70.insert((int) (short) 1);
        com.example.AVLTree.Node node85 = aVLTree70.getRoot();
        int int86 = aVLTree58.getBalance(node85);
        int int87 = aVLTree12.getBalance(node85);
        int int88 = aVLTree0.getBalance(node85);
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        int int19 = aVLTree0.getBalance(node18);
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.delete((int) 'a');
        com.example.AVLTree.Node node27 = aVLTree22.getRoot();
        aVLTree22.delete(0);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree22.getBalance(node30);
        int int32 = aVLTree22.height();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.delete(100);
        aVLTree33.insert((int) (byte) 10);
        com.example.AVLTree.Node node41 = aVLTree33.getRoot();
        int int42 = aVLTree22.getBalance(node41);
        aVLTree22.insert(0);
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((-1));
        int int48 = aVLTree45.height();
        com.example.AVLTree.Node node50 = aVLTree45.find((int) (byte) 100);
        aVLTree45.insert(0);
        com.example.AVLTree.Node node53 = aVLTree45.getRoot();
        int int54 = aVLTree22.getBalance(node53);
        int int55 = aVLTree0.getBalance(node53);
        aVLTree0.insert((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree.Node node21 = aVLTree0.find((int) (byte) -1);
        java.lang.Class<?> wildcardClass22 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete((int) '#');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.insert((int) '#');
        int int14 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.delete((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        aVLTree0.delete(0);
        aVLTree0.delete((int) ' ');
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node58 = aVLTree55.getRoot();
        aVLTree55.delete(100);
        aVLTree55.insert((int) (byte) 10);
        com.example.AVLTree.Node node63 = aVLTree55.getRoot();
        aVLTree55.insert((int) (byte) 100);
        int int66 = aVLTree55.height();
        com.example.AVLTree.Node node68 = aVLTree55.find((int) (byte) -1);
        aVLTree55.insert((-1));
        int int71 = aVLTree55.height();
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node75 = aVLTree72.getRoot();
        aVLTree72.insert((int) (byte) 100);
        int int78 = aVLTree72.height();
        aVLTree72.insert(1);
        aVLTree72.insert(0);
        com.example.AVLTree.Node node83 = aVLTree72.getRoot();
        int int84 = aVLTree55.getBalance(node83);
        com.example.AVLTree.Node node85 = aVLTree55.getRoot();
        int int86 = aVLTree0.getBalance(node85);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((-1));
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        aVLTree0.insert((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        aVLTree9.delete(0);
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree9.getBalance(node17);
        int int19 = aVLTree9.height();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree20.getRoot();
        aVLTree20.delete(100);
        aVLTree20.insert((int) (byte) 10);
        com.example.AVLTree.Node node28 = aVLTree20.getRoot();
        int int29 = aVLTree9.getBalance(node28);
        int int30 = aVLTree0.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree0.getRoot();
        com.example.AVLTree.Node node32 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 0);
        aVLTree0.insert(10);
        com.example.AVLTree.Node node38 = aVLTree0.find((int) 'a');
        int int39 = aVLTree0.height();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node19 = aVLTree0.getRoot();
        com.example.AVLTree.Node node21 = aVLTree0.find(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree7.find((int) 'a');
        int int12 = aVLTree7.height();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree13.getBalance(node14);
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.insert((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree13.getBalance(node38);
        int int41 = aVLTree7.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(0);
        aVLTree0.delete(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree7.getRoot();
        int int15 = aVLTree0.getBalance(node14);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.insert(10);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) (short) -1);
        int int24 = aVLTree0.height();
        aVLTree0.insert(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node16 = null;
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.insert((int) '#');
        aVLTree0.delete(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree5.getBalance(node6);
        aVLTree5.insert((int) (byte) 100);
        aVLTree5.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree5.find((int) (byte) 100);
        int int14 = aVLTree0.getBalance(node13);
        java.lang.Class<?> wildcardClass15 = node13.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (byte) 1);
        com.example.AVLTree.Node node20 = aVLTree0.find(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = node20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        int int17 = aVLTree11.height();
        com.example.AVLTree.Node node19 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree11.getRoot();
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree21.getBalance(node22);
        aVLTree21.insert((int) (byte) 100);
        aVLTree21.insert((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree21.find((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        aVLTree30.delete((int) 'a');
        com.example.AVLTree.Node node35 = aVLTree30.getRoot();
        aVLTree30.delete(0);
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree30.getBalance(node38);
        int int40 = aVLTree30.height();
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        com.example.AVLTree.Node node44 = aVLTree41.getRoot();
        aVLTree41.delete(100);
        aVLTree41.insert((int) (byte) 10);
        com.example.AVLTree.Node node49 = aVLTree41.getRoot();
        int int50 = aVLTree30.getBalance(node49);
        int int51 = aVLTree21.getBalance(node49);
        int int52 = aVLTree11.getBalance(node49);
        aVLTree11.insert((int) (short) 1);
        int int55 = aVLTree11.height();
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree56.getBalance(node59);
        com.example.AVLTree.Node node61 = aVLTree56.getRoot();
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = aVLTree62.getRoot();
        aVLTree62.delete(100);
        int int68 = aVLTree62.height();
        com.example.AVLTree.Node node70 = aVLTree62.find((int) (short) -1);
        com.example.AVLTree.Node node71 = aVLTree62.getRoot();
        com.example.AVLTree.Node node72 = aVLTree62.getRoot();
        aVLTree62.insert((int) (byte) 1);
        com.example.AVLTree.Node node75 = aVLTree62.getRoot();
        int int76 = aVLTree56.getBalance(node75);
        int int77 = aVLTree11.getBalance(node75);
        int int78 = aVLTree0.getBalance(node75);
        java.lang.Class<?> wildcardClass79 = node75.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        int int12 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) (byte) -1);
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find(1);
        aVLTree0.delete(10);
        int int14 = aVLTree0.height();
        aVLTree0.delete((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node12 = aVLTree0.find(10);
        aVLTree0.insert((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) 'a');
        int int9 = aVLTree0.height();
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find(100);
        aVLTree0.delete((int) (short) -1);
        int int11 = aVLTree0.height();
        int int12 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        aVLTree9.delete(1);
        aVLTree9.delete((int) '#');
        aVLTree9.delete((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree9.getRoot();
        com.example.AVLTree.Node node22 = aVLTree9.find((int) (byte) 100);
        int int23 = aVLTree9.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.insert((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        aVLTree30.delete((int) (short) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        int int46 = aVLTree30.getBalance(node45);
        int int47 = aVLTree24.getBalance(node45);
        int int48 = aVLTree9.getBalance(node45);
        int int49 = aVLTree0.getBalance(node45);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        aVLTree0.delete(100);
        com.example.AVLTree.Node node56 = aVLTree0.find(0);
        java.lang.Class<?> wildcardClass57 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 0);
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass9 = node8.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree13.find((int) 'a');
        int int18 = aVLTree13.height();
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree19.getBalance(node20);
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.insert((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete(0);
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree25.getBalance(node33);
        int int35 = aVLTree25.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree36.getRoot();
        aVLTree36.delete(100);
        aVLTree36.insert((int) (byte) 10);
        com.example.AVLTree.Node node44 = aVLTree36.getRoot();
        int int45 = aVLTree25.getBalance(node44);
        int int46 = aVLTree19.getBalance(node44);
        int int47 = aVLTree13.getBalance(node44);
        int int48 = aVLTree0.getBalance(node44);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node52 = aVLTree0.find((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        aVLTree14.delete((int) 'a');
        com.example.AVLTree.Node node19 = aVLTree14.getRoot();
        aVLTree14.delete(0);
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree14.getBalance(node22);
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree14.getBalance(node24);
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree26.find((int) 'a');
        com.example.AVLTree.Node node31 = aVLTree26.getRoot();
        aVLTree26.delete((int) (short) 10);
        com.example.AVLTree.Node node34 = aVLTree26.getRoot();
        com.example.AVLTree.Node node35 = aVLTree26.getRoot();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree36.getBalance(node37);
        aVLTree36.insert((int) (byte) 100);
        aVLTree36.insert((int) 'a');
        com.example.AVLTree.Node node44 = aVLTree36.find((int) (byte) 100);
        int int45 = aVLTree26.getBalance(node44);
        int int46 = aVLTree14.getBalance(node44);
        int int47 = aVLTree0.getBalance(node44);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.insert(2);
        com.example.AVLTree.Node node52 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        int int23 = aVLTree0.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        aVLTree24.delete((int) (byte) -1);
        aVLTree24.delete((int) (byte) 0);
        aVLTree24.insert(100);
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree31.find((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree31.find((int) ' ');
        com.example.AVLTree.Node node39 = aVLTree31.find((int) '#');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree40.getBalance(node43);
        aVLTree40.insert((int) (short) 100);
        com.example.AVLTree.Node node48 = aVLTree40.find((int) ' ');
        int int49 = aVLTree40.height();
        com.example.AVLTree.Node node50 = aVLTree40.getRoot();
        int int51 = aVLTree31.getBalance(node50);
        int int52 = aVLTree24.getBalance(node50);
        int int53 = aVLTree0.getBalance(node50);
        java.lang.Class<?> wildcardClass54 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        aVLTree9.delete(1);
        aVLTree9.delete((int) '#');
        aVLTree9.delete((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree9.getRoot();
        com.example.AVLTree.Node node22 = aVLTree9.find((int) (byte) 100);
        int int23 = aVLTree9.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.insert((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        aVLTree30.delete((int) (short) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        int int46 = aVLTree30.getBalance(node45);
        int int47 = aVLTree24.getBalance(node45);
        int int48 = aVLTree9.getBalance(node45);
        int int49 = aVLTree0.getBalance(node45);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        aVLTree0.delete(100);
        com.example.AVLTree.Node node56 = aVLTree0.find(0);
        int int57 = aVLTree0.height();
        com.example.AVLTree.Node node58 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass59 = node58.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node45 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((int) '#');
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node50 = null;
        int int51 = aVLTree0.getBalance(node50);
        com.example.AVLTree.Node node53 = aVLTree0.find((int) '#');
        java.lang.Class<?> wildcardClass54 = node53.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((-1));
        int int11 = aVLTree8.height();
        com.example.AVLTree.Node node12 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        aVLTree8.delete(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree17.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree29.getBalance(node35);
        com.example.AVLTree.Node node38 = aVLTree29.find((int) ' ');
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree39.find((int) 'a');
        aVLTree39.delete((int) (short) 10);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = null;
        int int48 = aVLTree46.getBalance(node47);
        aVLTree46.insert((int) (byte) 100);
        aVLTree46.insert((int) 'a');
        com.example.AVLTree.Node node54 = aVLTree46.find((int) (byte) 100);
        int int55 = aVLTree39.getBalance(node54);
        int int56 = aVLTree29.getBalance(node54);
        int int57 = aVLTree17.getBalance(node54);
        int int58 = aVLTree8.getBalance(node54);
        int int59 = aVLTree0.getBalance(node54);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        aVLTree60.delete((int) 'a');
        com.example.AVLTree.Node node65 = aVLTree60.getRoot();
        aVLTree60.delete(0);
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree60.getBalance(node68);
        int int70 = aVLTree60.height();
        com.example.AVLTree aVLTree71 = new com.example.AVLTree();
        com.example.AVLTree.Node node73 = aVLTree71.find((int) '4');
        com.example.AVLTree.Node node74 = aVLTree71.getRoot();
        aVLTree71.delete(100);
        aVLTree71.insert((int) (byte) 10);
        com.example.AVLTree.Node node79 = aVLTree71.getRoot();
        int int80 = aVLTree60.getBalance(node79);
        int int81 = aVLTree0.getBalance(node79);
        java.lang.Class<?> wildcardClass82 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        com.example.AVLTree.Node node32 = aVLTree28.find((int) 'a');
        int int33 = aVLTree28.height();
        aVLTree28.delete(1);
        aVLTree28.insert((int) 'a');
        aVLTree28.insert((int) '#');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        int int43 = aVLTree40.height();
        int int44 = aVLTree40.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree45.getBalance(node46);
        aVLTree45.insert((int) (byte) 100);
        aVLTree45.insert((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree45.find((int) (byte) 100);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        aVLTree54.delete((int) 'a');
        com.example.AVLTree.Node node59 = aVLTree54.getRoot();
        aVLTree54.delete(0);
        com.example.AVLTree.Node node62 = null;
        int int63 = aVLTree54.getBalance(node62);
        int int64 = aVLTree54.height();
        com.example.AVLTree aVLTree65 = new com.example.AVLTree();
        com.example.AVLTree.Node node67 = aVLTree65.find((int) '4');
        com.example.AVLTree.Node node68 = aVLTree65.getRoot();
        aVLTree65.delete(100);
        aVLTree65.insert((int) (byte) 10);
        com.example.AVLTree.Node node73 = aVLTree65.getRoot();
        int int74 = aVLTree54.getBalance(node73);
        int int75 = aVLTree45.getBalance(node73);
        int int76 = aVLTree40.getBalance(node73);
        int int77 = aVLTree28.getBalance(node73);
        int int78 = aVLTree0.getBalance(node73);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) -1);
        java.lang.Class<?> wildcardClass83 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        int int17 = aVLTree0.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree18.getBalance(node21);
        aVLTree18.insert((int) (short) 100);
        com.example.AVLTree.Node node26 = aVLTree18.find((int) ' ');
        int int27 = aVLTree18.height();
        com.example.AVLTree.Node node28 = aVLTree18.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete(1);
        java.lang.Class<?> wildcardClass34 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        aVLTree28.insert(0);
        int int51 = aVLTree28.height();
        com.example.AVLTree.Node node52 = aVLTree28.getRoot();
        int int53 = aVLTree0.getBalance(node52);
        int int54 = aVLTree0.height();
        com.example.AVLTree.Node node56 = aVLTree0.find((int) (byte) -1);
        java.lang.Class<?> wildcardClass57 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((-1));
        int int11 = aVLTree8.height();
        com.example.AVLTree.Node node12 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        aVLTree8.delete(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree17.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree29.getBalance(node35);
        com.example.AVLTree.Node node38 = aVLTree29.find((int) ' ');
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree39.find((int) 'a');
        aVLTree39.delete((int) (short) 10);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = null;
        int int48 = aVLTree46.getBalance(node47);
        aVLTree46.insert((int) (byte) 100);
        aVLTree46.insert((int) 'a');
        com.example.AVLTree.Node node54 = aVLTree46.find((int) (byte) 100);
        int int55 = aVLTree39.getBalance(node54);
        int int56 = aVLTree29.getBalance(node54);
        int int57 = aVLTree17.getBalance(node54);
        int int58 = aVLTree8.getBalance(node54);
        int int59 = aVLTree0.getBalance(node54);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        aVLTree60.delete((int) 'a');
        com.example.AVLTree.Node node65 = aVLTree60.getRoot();
        aVLTree60.delete(0);
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree60.getBalance(node68);
        int int70 = aVLTree60.height();
        com.example.AVLTree aVLTree71 = new com.example.AVLTree();
        com.example.AVLTree.Node node73 = aVLTree71.find((int) '4');
        com.example.AVLTree.Node node74 = aVLTree71.getRoot();
        aVLTree71.delete(100);
        aVLTree71.insert((int) (byte) 10);
        com.example.AVLTree.Node node79 = aVLTree71.getRoot();
        int int80 = aVLTree60.getBalance(node79);
        int int81 = aVLTree0.getBalance(node79);
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree.Node node84 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        aVLTree9.delete(0);
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree9.getBalance(node17);
        int int19 = aVLTree9.height();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree20.getRoot();
        aVLTree20.delete(100);
        aVLTree20.insert((int) (byte) 10);
        com.example.AVLTree.Node node28 = aVLTree20.getRoot();
        int int29 = aVLTree9.getBalance(node28);
        int int30 = aVLTree0.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree0.getRoot();
        com.example.AVLTree.Node node32 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        aVLTree33.delete(0);
        com.example.AVLTree.Node node41 = null;
        int int42 = aVLTree33.getBalance(node41);
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree33.getBalance(node43);
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        aVLTree45.delete((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree45.getBalance(node51);
        com.example.AVLTree.Node node54 = aVLTree45.find((int) ' ');
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree55.find((int) 'a');
        aVLTree55.delete((int) (short) 10);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = null;
        int int64 = aVLTree62.getBalance(node63);
        aVLTree62.insert((int) (byte) 100);
        aVLTree62.insert((int) 'a');
        com.example.AVLTree.Node node70 = aVLTree62.find((int) (byte) 100);
        int int71 = aVLTree55.getBalance(node70);
        int int72 = aVLTree45.getBalance(node70);
        int int73 = aVLTree33.getBalance(node70);
        int int74 = aVLTree0.getBalance(node70);
        com.example.AVLTree.Node node76 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node78 = aVLTree0.find((-1));
        java.lang.Class<?> wildcardClass79 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree24.getBalance(node27);
        aVLTree24.insert((int) 'a');
        int int31 = aVLTree24.height();
        aVLTree24.delete(0);
        int int34 = aVLTree24.height();
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        aVLTree35.delete((int) 'a');
        com.example.AVLTree.Node node40 = aVLTree35.getRoot();
        com.example.AVLTree.Node node41 = null;
        int int42 = aVLTree35.getBalance(node41);
        com.example.AVLTree.Node node44 = aVLTree35.find((int) ' ');
        aVLTree35.insert((-1));
        com.example.AVLTree.Node node47 = aVLTree35.getRoot();
        aVLTree35.delete((int) (byte) -1);
        aVLTree35.insert(0);
        aVLTree35.delete((int) (byte) -1);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        aVLTree54.delete((int) 'a');
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree59.getRoot();
        aVLTree59.insert((int) (byte) 100);
        com.example.AVLTree aVLTree65 = new com.example.AVLTree();
        com.example.AVLTree.Node node67 = aVLTree65.find((int) '4');
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree65.getBalance(node68);
        aVLTree65.insert((int) (short) 100);
        com.example.AVLTree.Node node73 = aVLTree65.find((int) ' ');
        int int74 = aVLTree65.height();
        com.example.AVLTree.Node node75 = aVLTree65.getRoot();
        int int76 = aVLTree59.getBalance(node75);
        int int77 = aVLTree54.getBalance(node75);
        int int78 = aVLTree35.getBalance(node75);
        int int79 = aVLTree24.getBalance(node75);
        aVLTree24.delete((int) (short) 100);
        com.example.AVLTree aVLTree82 = new com.example.AVLTree();
        com.example.AVLTree.Node node84 = aVLTree82.find((int) '4');
        com.example.AVLTree.Node node85 = aVLTree82.getRoot();
        aVLTree82.insert((int) (byte) 100);
        int int88 = aVLTree82.height();
        aVLTree82.insert(1);
        aVLTree82.insert(0);
        com.example.AVLTree.Node node93 = aVLTree82.getRoot();
        com.example.AVLTree.Node node94 = aVLTree82.getRoot();
        int int95 = aVLTree24.getBalance(node94);
        int int96 = aVLTree0.getBalance(node94);
        java.lang.Class<?> wildcardClass97 = node94.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        int int17 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.insert(0);
        java.lang.Class<?> wildcardClass22 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        int int17 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.delete((int) 'a');
        com.example.AVLTree.Node node27 = aVLTree22.getRoot();
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree22.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree22.find((int) ' ');
        com.example.AVLTree.Node node32 = aVLTree22.getRoot();
        com.example.AVLTree.Node node33 = aVLTree22.getRoot();
        aVLTree22.insert((int) (byte) 10);
        com.example.AVLTree.Node node36 = aVLTree22.getRoot();
        int int37 = aVLTree0.getBalance(node36);
        aVLTree0.insert(10);
        int int40 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        int int13 = aVLTree0.height();
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree14.getBalance(node17);
        aVLTree14.insert((int) '4');
        com.example.AVLTree.Node node22 = aVLTree14.find(100);
        com.example.AVLTree.Node node23 = aVLTree14.getRoot();
        int int24 = aVLTree0.getBalance(node23);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        aVLTree29.insert((int) '4');
        com.example.AVLTree.Node node37 = aVLTree29.find(100);
        aVLTree29.delete((int) (short) -1);
        int int40 = aVLTree29.height();
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree41.getBalance(node44);
        aVLTree41.insert((int) '4');
        com.example.AVLTree.Node node49 = aVLTree41.find(100);
        com.example.AVLTree.Node node50 = aVLTree41.getRoot();
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        aVLTree51.delete((int) 'a');
        com.example.AVLTree.Node node56 = aVLTree51.getRoot();
        aVLTree51.delete(0);
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree51.getBalance(node59);
        int int61 = aVLTree51.height();
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = aVLTree62.getRoot();
        aVLTree62.delete(100);
        aVLTree62.insert((int) (byte) 10);
        com.example.AVLTree.Node node70 = aVLTree62.getRoot();
        int int71 = aVLTree51.getBalance(node70);
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        aVLTree72.delete((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree72.getRoot();
        aVLTree72.delete(0);
        com.example.AVLTree.Node node80 = null;
        int int81 = aVLTree72.getBalance(node80);
        int int82 = aVLTree72.height();
        com.example.AVLTree aVLTree83 = new com.example.AVLTree();
        com.example.AVLTree.Node node85 = aVLTree83.find((int) '4');
        com.example.AVLTree.Node node86 = aVLTree83.getRoot();
        aVLTree83.delete(100);
        aVLTree83.insert((int) (byte) 10);
        com.example.AVLTree.Node node91 = aVLTree83.getRoot();
        int int92 = aVLTree72.getBalance(node91);
        int int93 = aVLTree51.getBalance(node91);
        int int94 = aVLTree41.getBalance(node91);
        aVLTree41.insert(100);
        com.example.AVLTree.Node node97 = aVLTree41.getRoot();
        int int98 = aVLTree29.getBalance(node97);
        int int99 = aVLTree0.getBalance(node97);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        com.example.AVLTree.Node node27 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node28 = aVLTree0.getRoot();
        int int29 = aVLTree0.height();
        int int30 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        int int10 = aVLTree0.height();
        aVLTree0.delete(1);
        java.lang.Class<?> wildcardClass13 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) -1);
        int int23 = aVLTree0.height();
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass25 = node24.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = aVLTree42.find((int) '4');
        com.example.AVLTree.Node node45 = aVLTree42.getRoot();
        aVLTree42.delete(100);
        aVLTree42.insert((int) (byte) 10);
        com.example.AVLTree.Node node50 = aVLTree42.getRoot();
        aVLTree42.insert((int) (byte) 100);
        int int53 = aVLTree42.height();
        aVLTree42.delete((int) (byte) 0);
        com.example.AVLTree.Node node57 = aVLTree42.find(0);
        com.example.AVLTree.Node node58 = aVLTree42.getRoot();
        int int59 = aVLTree0.getBalance(node58);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = aVLTree5.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree5.getRoot();
        aVLTree5.insert((int) (byte) 100);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) (short) 100);
        com.example.AVLTree.Node node19 = aVLTree11.find((int) ' ');
        int int20 = aVLTree11.height();
        com.example.AVLTree.Node node21 = aVLTree11.getRoot();
        int int22 = aVLTree5.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        com.example.AVLTree.Node node25 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node27 = aVLTree0.find((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        aVLTree7.insert((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree7.find((int) ' ');
        int int16 = aVLTree7.height();
        com.example.AVLTree.Node node17 = aVLTree7.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        aVLTree19.delete(100);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree19.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        aVLTree0.delete((int) '#');
        java.lang.Class<?> wildcardClass46 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        int int12 = aVLTree6.height();
        aVLTree6.insert(1);
        aVLTree6.insert(0);
        com.example.AVLTree.Node node17 = aVLTree6.getRoot();
        com.example.AVLTree.Node node18 = aVLTree6.getRoot();
        int int19 = aVLTree0.getBalance(node18);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree20.getBalance(node21);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.insert((int) (byte) 100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        aVLTree29.insert((int) (short) 100);
        com.example.AVLTree.Node node37 = aVLTree29.find((int) ' ');
        int int38 = aVLTree29.height();
        com.example.AVLTree.Node node39 = aVLTree29.getRoot();
        int int40 = aVLTree23.getBalance(node39);
        int int41 = aVLTree20.getBalance(node39);
        aVLTree20.insert((int) (short) 1);
        int int44 = aVLTree20.height();
        com.example.AVLTree.Node node46 = aVLTree20.find(2);
        com.example.AVLTree.Node node47 = aVLTree20.getRoot();
        int int48 = aVLTree0.getBalance(node47);
        com.example.AVLTree.Node node50 = aVLTree0.find(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        int int8 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int12 = aVLTree0.height();
        int int13 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        int int17 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        java.lang.Class<?> wildcardClass20 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert((int) ' ');
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        com.example.AVLTree.Node node23 = aVLTree0.find((int) (byte) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find((-1));
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.delete((int) ' ');
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = null;
        int int8 = aVLTree6.getBalance(node7);
        aVLTree6.delete((int) (byte) -1);
        int int11 = aVLTree6.height();
        int int12 = aVLTree6.height();
        com.example.AVLTree.Node node14 = aVLTree6.find((int) '#');
        com.example.AVLTree.Node node15 = aVLTree6.getRoot();
        aVLTree6.insert(0);
        com.example.AVLTree.Node node19 = aVLTree6.find((int) (byte) 0);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node24 = aVLTree20.find((int) 'a');
        aVLTree20.delete((int) (short) 10);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree27.getBalance(node28);
        aVLTree27.insert((int) (byte) 100);
        aVLTree27.insert((int) 'a');
        com.example.AVLTree.Node node35 = aVLTree27.find((int) (byte) 100);
        int int36 = aVLTree20.getBalance(node35);
        int int37 = aVLTree20.height();
        aVLTree20.delete((int) (byte) 100);
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        aVLTree40.delete((int) 'a');
        aVLTree40.delete(1);
        aVLTree40.delete((int) '#');
        aVLTree40.delete((int) (short) -1);
        com.example.AVLTree.Node node51 = aVLTree40.getRoot();
        aVLTree40.insert(10);
        aVLTree40.delete(1);
        com.example.AVLTree.Node node56 = aVLTree40.getRoot();
        int int57 = aVLTree40.height();
        aVLTree40.delete((int) 'a');
        com.example.AVLTree.Node node60 = aVLTree40.getRoot();
        int int61 = aVLTree20.getBalance(node60);
        int int62 = aVLTree6.getBalance(node60);
        int int63 = aVLTree0.getBalance(node60);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        aVLTree9.delete(1);
        aVLTree9.delete((int) '#');
        aVLTree9.delete((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree9.getRoot();
        com.example.AVLTree.Node node22 = aVLTree9.find((int) (byte) 100);
        int int23 = aVLTree9.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.insert((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        aVLTree30.delete((int) (short) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        int int46 = aVLTree30.getBalance(node45);
        int int47 = aVLTree24.getBalance(node45);
        int int48 = aVLTree9.getBalance(node45);
        int int49 = aVLTree0.getBalance(node45);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        aVLTree0.delete(100);
        com.example.AVLTree.Node node56 = aVLTree0.find(0);
        int int57 = aVLTree0.height();
        com.example.AVLTree.Node node58 = aVLTree0.getRoot();
        aVLTree0.insert((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node19 = aVLTree0.find(10);
        com.example.AVLTree.Node node21 = aVLTree0.find((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = node21.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        int int11 = aVLTree0.height();
        aVLTree0.insert(0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((-1));
        java.lang.Class<?> wildcardClass19 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((-1));
        int int16 = aVLTree0.height();
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.insert((int) (byte) 100);
        int int23 = aVLTree17.height();
        aVLTree17.insert(1);
        aVLTree17.insert(0);
        com.example.AVLTree.Node node28 = aVLTree17.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        aVLTree0.insert((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = null;
        int int8 = aVLTree6.getBalance(node7);
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree12.getBalance(node20);
        int int22 = aVLTree12.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree12.getBalance(node31);
        int int33 = aVLTree6.getBalance(node31);
        int int34 = aVLTree0.getBalance(node31);
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        int int38 = aVLTree35.height();
        aVLTree35.insert((-1));
        com.example.AVLTree.Node node41 = aVLTree35.getRoot();
        int int42 = aVLTree0.getBalance(node41);
        java.lang.Class<?> wildcardClass43 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        int int7 = aVLTree0.height();
        int int8 = aVLTree0.height();
        aVLTree0.delete(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.insert((int) (byte) 100);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree23.getBalance(node26);
        aVLTree23.insert((int) (short) 100);
        com.example.AVLTree.Node node31 = aVLTree23.find((int) ' ');
        int int32 = aVLTree23.height();
        com.example.AVLTree.Node node33 = aVLTree23.getRoot();
        int int34 = aVLTree17.getBalance(node33);
        int int35 = aVLTree12.getBalance(node33);
        int int36 = aVLTree12.height();
        aVLTree12.delete((int) (short) -1);
        aVLTree12.insert((int) 'a');
        aVLTree12.delete((-1));
        aVLTree12.delete((int) (byte) 0);
        aVLTree12.delete(0);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree47.find((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree47.find((int) ' ');
        aVLTree47.delete((int) '4');
        aVLTree47.delete((int) (short) 100);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree58.find((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree58.find((int) ' ');
        com.example.AVLTree.Node node66 = aVLTree58.find((int) '#');
        com.example.AVLTree aVLTree67 = new com.example.AVLTree();
        com.example.AVLTree.Node node69 = aVLTree67.find((int) '4');
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree67.getBalance(node70);
        aVLTree67.insert((int) (short) 100);
        com.example.AVLTree.Node node75 = aVLTree67.find((int) ' ');
        int int76 = aVLTree67.height();
        com.example.AVLTree.Node node77 = aVLTree67.getRoot();
        int int78 = aVLTree58.getBalance(node77);
        int int79 = aVLTree47.getBalance(node77);
        int int80 = aVLTree12.getBalance(node77);
        int int81 = aVLTree0.getBalance(node77);
        aVLTree0.insert(1);
        java.lang.Class<?> wildcardClass84 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree9.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        aVLTree17.delete(100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree17.getBalance(node38);
        int int40 = aVLTree11.getBalance(node38);
        int int41 = aVLTree9.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(10);
        aVLTree0.delete((int) '#');
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        int int55 = aVLTree49.height();
        com.example.AVLTree.Node node57 = aVLTree49.find((int) (short) -1);
        aVLTree49.insert(0);
        aVLTree49.insert((int) (byte) 1);
        com.example.AVLTree.Node node62 = aVLTree49.getRoot();
        int int63 = aVLTree0.getBalance(node62);
        java.lang.Class<?> wildcardClass64 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (byte) 0);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.delete((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree10.getRoot();
        com.example.AVLTree.Node node16 = null;
        int int17 = aVLTree10.getBalance(node16);
        com.example.AVLTree.Node node19 = aVLTree10.find((int) ' ');
        aVLTree10.insert((-1));
        com.example.AVLTree.Node node22 = aVLTree10.getRoot();
        int int23 = aVLTree10.height();
        com.example.AVLTree.Node node25 = aVLTree10.find((int) (short) -1);
        aVLTree10.insert((int) ' ');
        com.example.AVLTree.Node node28 = aVLTree10.getRoot();
        aVLTree10.delete((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree10.getRoot();
        int int32 = aVLTree0.getBalance(node31);
        java.lang.Class<?> wildcardClass33 = node31.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) (byte) -1);
        int int7 = aVLTree0.height();
        java.lang.Class<?> wildcardClass8 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find(100);
        aVLTree0.delete((int) (short) -1);
        int int11 = aVLTree0.height();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree12.getBalance(node15);
        aVLTree12.insert((int) '4');
        com.example.AVLTree.Node node20 = aVLTree12.find(100);
        com.example.AVLTree.Node node21 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.delete((int) 'a');
        com.example.AVLTree.Node node27 = aVLTree22.getRoot();
        aVLTree22.delete(0);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree22.getBalance(node30);
        int int32 = aVLTree22.height();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.delete(100);
        aVLTree33.insert((int) (byte) 10);
        com.example.AVLTree.Node node41 = aVLTree33.getRoot();
        int int42 = aVLTree22.getBalance(node41);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        aVLTree43.delete((int) 'a');
        com.example.AVLTree.Node node48 = aVLTree43.getRoot();
        aVLTree43.delete(0);
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree43.getBalance(node51);
        int int53 = aVLTree43.height();
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree54.getRoot();
        aVLTree54.delete(100);
        aVLTree54.insert((int) (byte) 10);
        com.example.AVLTree.Node node62 = aVLTree54.getRoot();
        int int63 = aVLTree43.getBalance(node62);
        int int64 = aVLTree22.getBalance(node62);
        int int65 = aVLTree12.getBalance(node62);
        aVLTree12.insert(100);
        com.example.AVLTree.Node node68 = aVLTree12.getRoot();
        int int69 = aVLTree0.getBalance(node68);
        java.lang.Class<?> wildcardClass70 = node68.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) ' ');
        java.lang.Class<?> wildcardClass9 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        int int5 = aVLTree0.height();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = node6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        java.lang.Class<?> wildcardClass7 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        aVLTree0.delete((int) (short) 1);
        int int17 = aVLTree0.height();
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree20.getBalance(node23);
        aVLTree20.insert((int) (short) 100);
        com.example.AVLTree.Node node28 = aVLTree20.find((int) ' ');
        int int29 = aVLTree20.height();
        com.example.AVLTree.Node node30 = aVLTree20.getRoot();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree31.getRoot();
        aVLTree31.delete(100);
        aVLTree31.insert((int) (byte) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        aVLTree31.insert((int) (byte) 100);
        int int42 = aVLTree31.height();
        aVLTree31.delete((int) (byte) 0);
        com.example.AVLTree.Node node46 = aVLTree31.find(0);
        int int47 = aVLTree31.height();
        com.example.AVLTree.Node node49 = aVLTree31.find((int) (short) 10);
        int int50 = aVLTree20.getBalance(node49);
        int int51 = aVLTree0.getBalance(node49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node24 = aVLTree0.find((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = node24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        aVLTree0.insert(1);
        int int44 = aVLTree0.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node49 = aVLTree45.find((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        com.example.AVLTree.Node node51 = aVLTree45.getRoot();
        int int52 = aVLTree45.height();
        aVLTree45.insert((int) 'a');
        aVLTree45.insert((int) (short) 100);
        com.example.AVLTree.Node node57 = aVLTree45.getRoot();
        int int58 = aVLTree0.getBalance(node57);
        int int59 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = node8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        aVLTree12.delete(1);
        com.example.AVLTree.Node node19 = aVLTree12.getRoot();
        com.example.AVLTree.Node node21 = aVLTree12.find((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        aVLTree12.insert((int) (short) 1);
        com.example.AVLTree.Node node27 = aVLTree12.getRoot();
        int int28 = aVLTree0.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree29.find((int) 'a');
        aVLTree29.delete((int) (short) 10);
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree36.getBalance(node37);
        aVLTree36.insert((int) (byte) 100);
        aVLTree36.insert((int) 'a');
        com.example.AVLTree.Node node44 = aVLTree36.find((int) (byte) 100);
        int int45 = aVLTree29.getBalance(node44);
        int int46 = aVLTree29.height();
        aVLTree29.insert(1);
        com.example.AVLTree.Node node49 = aVLTree29.getRoot();
        int int50 = aVLTree0.getBalance(node49);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 0);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.find(10);
        aVLTree0.delete(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        com.example.AVLTree.Node node4 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.find((int) (byte) 1);
        aVLTree0.delete(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.find(1);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node11 = aVLTree0.find(0);
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) 100);
        aVLTree0.insert((int) (byte) 1);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = node11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass9 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.delete((int) (byte) 1);
        int int20 = aVLTree0.height();
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((-1));
        aVLTree30.delete(100);
        com.example.AVLTree.Node node36 = aVLTree30.find((int) '#');
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node39 = aVLTree37.find((int) '4');
        aVLTree37.delete((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree37.getRoot();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree37.getBalance(node43);
        com.example.AVLTree.Node node46 = aVLTree37.find((int) ' ');
        aVLTree37.insert((-1));
        com.example.AVLTree.Node node49 = aVLTree37.getRoot();
        int int50 = aVLTree37.height();
        com.example.AVLTree.Node node52 = aVLTree37.find((int) (short) -1);
        aVLTree37.insert((int) ' ');
        com.example.AVLTree.Node node55 = aVLTree37.getRoot();
        int int56 = aVLTree30.getBalance(node55);
        int int57 = aVLTree0.getBalance(node55);
        com.example.AVLTree.Node node59 = aVLTree0.find((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.delete((int) '4');
        aVLTree0.insert((int) (short) -1);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass15 = node14.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node10 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.find(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) (byte) -1);
        int int5 = aVLTree0.height();
        aVLTree0.insert(1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node18 = aVLTree14.find((int) 'a');
        aVLTree14.delete((int) (short) 10);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree21.getBalance(node22);
        aVLTree21.insert((int) (byte) 100);
        aVLTree21.insert((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree21.find((int) (byte) 100);
        int int30 = aVLTree14.getBalance(node29);
        int int31 = aVLTree8.getBalance(node29);
        com.example.AVLTree.Node node32 = aVLTree8.getRoot();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = null;
        int int35 = aVLTree33.getBalance(node34);
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree36.getRoot();
        aVLTree36.insert((int) (byte) 100);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = aVLTree42.find((int) '4');
        com.example.AVLTree.Node node45 = null;
        int int46 = aVLTree42.getBalance(node45);
        aVLTree42.insert((int) (short) 100);
        com.example.AVLTree.Node node50 = aVLTree42.find((int) ' ');
        int int51 = aVLTree42.height();
        com.example.AVLTree.Node node52 = aVLTree42.getRoot();
        int int53 = aVLTree36.getBalance(node52);
        int int54 = aVLTree33.getBalance(node52);
        com.example.AVLTree.Node node56 = aVLTree33.find((int) 'a');
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        aVLTree57.delete((int) 'a');
        aVLTree57.delete(1);
        aVLTree57.delete((int) '#');
        aVLTree57.delete((int) (short) -1);
        com.example.AVLTree.Node node68 = aVLTree57.getRoot();
        aVLTree57.insert(10);
        aVLTree57.delete(1);
        com.example.AVLTree.Node node73 = aVLTree57.getRoot();
        int int74 = aVLTree57.height();
        aVLTree57.delete((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree57.getRoot();
        int int78 = aVLTree33.getBalance(node77);
        int int79 = aVLTree8.getBalance(node77);
        int int80 = aVLTree0.getBalance(node77);
        java.lang.Class<?> wildcardClass81 = node77.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) '4');
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((-1));
        int int23 = aVLTree20.height();
        com.example.AVLTree.Node node25 = aVLTree20.find((int) (byte) 100);
        aVLTree20.insert(0);
        com.example.AVLTree.Node node28 = aVLTree20.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        aVLTree0.insert((int) (byte) 1);
        aVLTree0.delete((int) (byte) 1);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node37 = aVLTree0.find((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node11 = aVLTree8.getRoot();
        aVLTree8.delete(100);
        aVLTree8.insert((int) (byte) 10);
        com.example.AVLTree.Node node16 = aVLTree8.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        int int19 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree7.getBalance(node10);
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        aVLTree13.insert((int) (short) 0);
        com.example.AVLTree.Node node19 = aVLTree13.find(100);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.delete((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        aVLTree20.delete(0);
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree20.getBalance(node28);
        int int30 = aVLTree20.height();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree31.getRoot();
        aVLTree31.delete(100);
        aVLTree31.insert((int) (byte) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        int int40 = aVLTree20.getBalance(node39);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        com.example.AVLTree.Node node46 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree41.getBalance(node49);
        int int51 = aVLTree41.height();
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        com.example.AVLTree.Node node55 = aVLTree52.getRoot();
        aVLTree52.delete(100);
        aVLTree52.insert((int) (byte) 10);
        com.example.AVLTree.Node node60 = aVLTree52.getRoot();
        int int61 = aVLTree41.getBalance(node60);
        int int62 = aVLTree20.getBalance(node60);
        int int63 = aVLTree13.getBalance(node60);
        int int64 = aVLTree7.getBalance(node60);
        int int65 = aVLTree7.height();
        aVLTree7.insert((int) (byte) 0);
        int int68 = aVLTree7.height();
        com.example.AVLTree.Node node70 = aVLTree7.find((int) (short) 0);
        int int71 = aVLTree0.getBalance(node70);
        com.example.AVLTree.Node node73 = aVLTree0.find(100);
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert(100);
        java.lang.Class<?> wildcardClass78 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree.Node node14 = aVLTree0.find((int) (short) 0);
        int int15 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(100);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete(0);
        int int10 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.delete((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        com.example.AVLTree.Node node10 = aVLTree7.getRoot();
        aVLTree7.insert((int) (byte) 100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = null;
        int int17 = aVLTree13.getBalance(node16);
        aVLTree13.insert((int) (short) 100);
        com.example.AVLTree.Node node21 = aVLTree13.find((int) ' ');
        int int22 = aVLTree13.height();
        com.example.AVLTree.Node node23 = aVLTree13.getRoot();
        int int24 = aVLTree7.getBalance(node23);
        com.example.AVLTree.Node node26 = aVLTree7.find((int) '4');
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((-1));
        int int30 = aVLTree27.height();
        com.example.AVLTree.Node node32 = aVLTree27.find((int) (byte) 100);
        aVLTree27.insert(0);
        com.example.AVLTree.Node node35 = aVLTree27.getRoot();
        int int36 = aVLTree7.getBalance(node35);
        aVLTree7.insert((int) (byte) 1);
        com.example.AVLTree.Node node39 = aVLTree7.getRoot();
        int int40 = aVLTree0.getBalance(node39);
        com.example.AVLTree.Node node41 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        int int25 = aVLTree19.height();
        com.example.AVLTree.Node node27 = aVLTree19.find((int) (short) -1);
        com.example.AVLTree.Node node28 = aVLTree19.getRoot();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.insert((int) (byte) 10);
        com.example.AVLTree.Node node57 = aVLTree49.getRoot();
        int int58 = aVLTree38.getBalance(node57);
        int int59 = aVLTree29.getBalance(node57);
        int int60 = aVLTree19.getBalance(node57);
        int int61 = aVLTree0.getBalance(node57);
        com.example.AVLTree.Node node63 = aVLTree0.find(1);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        com.example.AVLTree.Node node67 = aVLTree64.getRoot();
        aVLTree64.insert((int) (byte) 100);
        int int70 = aVLTree64.height();
        aVLTree64.insert(1);
        aVLTree64.insert(0);
        com.example.AVLTree.Node node75 = aVLTree64.getRoot();
        com.example.AVLTree.Node node76 = aVLTree64.getRoot();
        int int77 = aVLTree0.getBalance(node76);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree14.getBalance(node15);
        aVLTree14.insert((int) (byte) 100);
        aVLTree14.insert((int) 'a');
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree21.getBalance(node24);
        aVLTree21.insert((int) (short) 100);
        com.example.AVLTree.Node node29 = aVLTree21.find((int) ' ');
        int int30 = aVLTree21.height();
        com.example.AVLTree.Node node31 = aVLTree21.getRoot();
        int int32 = aVLTree14.getBalance(node31);
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        aVLTree33.delete(0);
        com.example.AVLTree.Node node41 = null;
        int int42 = aVLTree33.getBalance(node41);
        int int43 = aVLTree33.height();
        aVLTree33.delete(100);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        com.example.AVLTree.Node node49 = aVLTree46.getRoot();
        aVLTree46.delete(100);
        aVLTree46.insert((int) (byte) 10);
        com.example.AVLTree.Node node54 = aVLTree46.getRoot();
        int int55 = aVLTree33.getBalance(node54);
        int int56 = aVLTree14.getBalance(node54);
        int int57 = aVLTree0.getBalance(node54);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        int int44 = aVLTree0.height();
        aVLTree0.insert(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree7.getBalance(node13);
        com.example.AVLTree.Node node16 = aVLTree7.find((int) ' ');
        aVLTree7.insert((-1));
        com.example.AVLTree.Node node19 = aVLTree7.getRoot();
        int int20 = aVLTree7.height();
        com.example.AVLTree.Node node22 = aVLTree7.find((int) (short) -1);
        aVLTree7.insert((int) ' ');
        com.example.AVLTree.Node node25 = aVLTree7.getRoot();
        int int26 = aVLTree0.getBalance(node25);
        java.lang.Class<?> wildcardClass27 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert(0);
        aVLTree0.delete(0);
        com.example.AVLTree.Node node35 = aVLTree0.find((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree0.getRoot();
        com.example.AVLTree.Node node21 = aVLTree0.find(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        int int9 = aVLTree0.height();
        int int10 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree0.getBalance(node13);
        aVLTree0.delete(0);
        aVLTree0.delete((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node20 = aVLTree0.find((-1));
        com.example.AVLTree.Node node21 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        aVLTree18.delete((int) 'a');
        com.example.AVLTree.Node node23 = aVLTree18.getRoot();
        aVLTree18.delete(0);
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree18.getBalance(node26);
        int int28 = aVLTree18.height();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = aVLTree29.getRoot();
        aVLTree29.delete(100);
        aVLTree29.insert((int) (byte) 10);
        com.example.AVLTree.Node node37 = aVLTree29.getRoot();
        int int38 = aVLTree18.getBalance(node37);
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((-1));
        int int42 = aVLTree39.height();
        com.example.AVLTree.Node node43 = aVLTree39.getRoot();
        com.example.AVLTree aVLTree44 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = null;
        int int46 = aVLTree44.getBalance(node45);
        aVLTree44.insert((int) (byte) 100);
        aVLTree44.insert((int) 'a');
        com.example.AVLTree.Node node52 = aVLTree44.find((int) (byte) 100);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        aVLTree53.delete((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree53.getRoot();
        aVLTree53.delete(0);
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree53.getBalance(node61);
        int int63 = aVLTree53.height();
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        com.example.AVLTree.Node node67 = aVLTree64.getRoot();
        aVLTree64.delete(100);
        aVLTree64.insert((int) (byte) 10);
        com.example.AVLTree.Node node72 = aVLTree64.getRoot();
        int int73 = aVLTree53.getBalance(node72);
        int int74 = aVLTree44.getBalance(node72);
        com.example.AVLTree.Node node75 = aVLTree44.getRoot();
        int int76 = aVLTree39.getBalance(node75);
        int int77 = aVLTree18.getBalance(node75);
        int int78 = aVLTree0.getBalance(node75);
        com.example.AVLTree.Node node80 = aVLTree0.find(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = aVLTree3.getRoot();
        aVLTree3.insert((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree3.getBalance(node19);
        int int21 = aVLTree0.getBalance(node19);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) 'a');
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        aVLTree24.delete((int) 'a');
        aVLTree24.delete(1);
        aVLTree24.delete((int) '#');
        aVLTree24.delete((int) (short) -1);
        com.example.AVLTree.Node node35 = aVLTree24.getRoot();
        aVLTree24.insert(10);
        aVLTree24.delete(1);
        com.example.AVLTree.Node node40 = aVLTree24.getRoot();
        int int41 = aVLTree24.height();
        aVLTree24.delete((int) 'a');
        com.example.AVLTree.Node node44 = aVLTree24.getRoot();
        int int45 = aVLTree0.getBalance(node44);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node49 = aVLTree0.find(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete(0);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        aVLTree11.delete((int) 'a');
        com.example.AVLTree.Node node16 = aVLTree11.getRoot();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree11.getBalance(node17);
        com.example.AVLTree.Node node20 = aVLTree11.find((int) ' ');
        aVLTree11.insert((-1));
        com.example.AVLTree.Node node23 = aVLTree11.getRoot();
        aVLTree11.delete((int) (byte) -1);
        aVLTree11.insert(0);
        aVLTree11.delete((int) (byte) -1);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        aVLTree30.delete((int) 'a');
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node38 = aVLTree35.getRoot();
        aVLTree35.insert((int) (byte) 100);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree41.getBalance(node44);
        aVLTree41.insert((int) (short) 100);
        com.example.AVLTree.Node node49 = aVLTree41.find((int) ' ');
        int int50 = aVLTree41.height();
        com.example.AVLTree.Node node51 = aVLTree41.getRoot();
        int int52 = aVLTree35.getBalance(node51);
        int int53 = aVLTree30.getBalance(node51);
        int int54 = aVLTree11.getBalance(node51);
        int int55 = aVLTree0.getBalance(node51);
        aVLTree0.delete((int) (short) 100);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        com.example.AVLTree.Node node61 = aVLTree58.getRoot();
        aVLTree58.insert((int) (byte) 100);
        int int64 = aVLTree58.height();
        aVLTree58.insert(1);
        aVLTree58.insert(0);
        com.example.AVLTree.Node node69 = aVLTree58.getRoot();
        com.example.AVLTree.Node node70 = aVLTree58.getRoot();
        int int71 = aVLTree0.getBalance(node70);
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node75 = null;
        int int76 = aVLTree72.getBalance(node75);
        aVLTree72.insert((int) '4');
        com.example.AVLTree.Node node80 = aVLTree72.find(100);
        com.example.AVLTree.Node node81 = aVLTree72.getRoot();
        aVLTree72.delete((int) (byte) 1);
        com.example.AVLTree.Node node84 = aVLTree72.getRoot();
        int int85 = aVLTree0.getBalance(node84);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = node13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        int int5 = aVLTree0.height();
        aVLTree0.delete((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = aVLTree3.getRoot();
        aVLTree3.insert((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree3.getBalance(node19);
        int int21 = aVLTree0.getBalance(node19);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) 'a');
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.delete(100);
        int int30 = aVLTree24.height();
        com.example.AVLTree.Node node32 = aVLTree24.find((int) (short) -1);
        com.example.AVLTree.Node node33 = aVLTree24.getRoot();
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree34.getBalance(node35);
        aVLTree34.insert((int) (byte) 100);
        aVLTree34.insert((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree34.find((int) (byte) 100);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        aVLTree43.delete((int) 'a');
        com.example.AVLTree.Node node48 = aVLTree43.getRoot();
        aVLTree43.delete(0);
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree43.getBalance(node51);
        int int53 = aVLTree43.height();
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree54.getRoot();
        aVLTree54.delete(100);
        aVLTree54.insert((int) (byte) 10);
        com.example.AVLTree.Node node62 = aVLTree54.getRoot();
        int int63 = aVLTree43.getBalance(node62);
        int int64 = aVLTree34.getBalance(node62);
        int int65 = aVLTree24.getBalance(node62);
        int int66 = aVLTree0.getBalance(node62);
        aVLTree0.delete(1);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.delete((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.insert((int) (byte) 0);
        aVLTree0.delete(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert((int) '#');
        aVLTree0.delete(10);
        aVLTree0.delete((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) 1);
        aVLTree0.delete((int) '#');
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete((int) '4');
        aVLTree0.delete((int) (short) 100);
        aVLTree0.insert((-1));
        java.lang.Class<?> wildcardClass16 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.insert((int) (byte) 100);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree23.getBalance(node26);
        aVLTree23.insert((int) (short) 100);
        com.example.AVLTree.Node node31 = aVLTree23.find((int) ' ');
        int int32 = aVLTree23.height();
        com.example.AVLTree.Node node33 = aVLTree23.getRoot();
        int int34 = aVLTree17.getBalance(node33);
        int int35 = aVLTree12.getBalance(node33);
        int int36 = aVLTree0.getBalance(node33);
        java.lang.Class<?> wildcardClass37 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        com.example.AVLTree.Node node24 = aVLTree21.getRoot();
        aVLTree21.delete(100);
        int int27 = aVLTree21.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        aVLTree49.delete((int) 'a');
        com.example.AVLTree.Node node54 = aVLTree49.getRoot();
        aVLTree49.delete(0);
        com.example.AVLTree.Node node57 = null;
        int int58 = aVLTree49.getBalance(node57);
        int int59 = aVLTree49.height();
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        com.example.AVLTree.Node node63 = aVLTree60.getRoot();
        aVLTree60.delete(100);
        aVLTree60.insert((int) (byte) 10);
        com.example.AVLTree.Node node68 = aVLTree60.getRoot();
        int int69 = aVLTree49.getBalance(node68);
        int int70 = aVLTree28.getBalance(node68);
        int int71 = aVLTree21.getBalance(node68);
        int int72 = aVLTree0.getBalance(node68);
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node75 = aVLTree0.getRoot();
        int int76 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((-1));
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((-1));
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree15.find((int) 'a');
        aVLTree15.insert((int) (short) -1);
        int int22 = aVLTree15.height();
        com.example.AVLTree.Node node23 = aVLTree15.getRoot();
        int int24 = aVLTree11.getBalance(node23);
        int int25 = aVLTree0.getBalance(node23);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        int int16 = aVLTree13.height();
        aVLTree13.insert((-1));
        aVLTree13.delete((int) (byte) 1);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        aVLTree21.delete((int) (byte) -1);
        aVLTree21.delete((int) (byte) 0);
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        com.example.AVLTree.Node node28 = aVLTree21.find(1);
        com.example.AVLTree.Node node30 = aVLTree21.find(10);
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree31.getBalance(node32);
        aVLTree31.delete((int) (byte) -1);
        int int36 = aVLTree31.height();
        int int37 = aVLTree31.height();
        com.example.AVLTree.Node node39 = aVLTree31.find((int) '#');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node44 = aVLTree40.find((int) 'a');
        aVLTree40.delete((int) (short) 10);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = null;
        int int49 = aVLTree47.getBalance(node48);
        aVLTree47.insert((int) (byte) 100);
        aVLTree47.insert((int) 'a');
        com.example.AVLTree.Node node55 = aVLTree47.find((int) (byte) 100);
        int int56 = aVLTree40.getBalance(node55);
        int int57 = aVLTree31.getBalance(node55);
        int int58 = aVLTree21.getBalance(node55);
        int int59 = aVLTree13.getBalance(node55);
        int int60 = aVLTree0.getBalance(node55);
        com.example.AVLTree.Node node62 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node65 = aVLTree63.find((int) '4');
        com.example.AVLTree.Node node67 = aVLTree63.find((int) 'a');
        com.example.AVLTree.Node node68 = aVLTree63.getRoot();
        com.example.AVLTree.Node node69 = aVLTree63.getRoot();
        int int70 = aVLTree63.height();
        aVLTree63.insert((int) 'a');
        aVLTree63.insert((int) (short) 100);
        com.example.AVLTree.Node node75 = aVLTree63.getRoot();
        int int76 = aVLTree0.getBalance(node75);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 10);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (short) 100);
        aVLTree0.insert((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = null;
        int int8 = aVLTree6.getBalance(node7);
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree12.getBalance(node20);
        int int22 = aVLTree12.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree12.getBalance(node31);
        int int33 = aVLTree6.getBalance(node31);
        int int34 = aVLTree0.getBalance(node31);
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        int int38 = aVLTree35.height();
        aVLTree35.insert((-1));
        com.example.AVLTree.Node node41 = aVLTree35.getRoot();
        int int42 = aVLTree0.getBalance(node41);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) 100);
        com.example.AVLTree.Node node47 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree28.getRoot();
        aVLTree28.delete(100);
        aVLTree28.insert((int) (byte) 10);
        com.example.AVLTree.Node node36 = aVLTree28.getRoot();
        int int37 = aVLTree17.getBalance(node36);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.insert((int) (byte) 10);
        com.example.AVLTree.Node node57 = aVLTree49.getRoot();
        int int58 = aVLTree38.getBalance(node57);
        int int59 = aVLTree17.getBalance(node57);
        int int60 = aVLTree10.getBalance(node57);
        com.example.AVLTree.Node node61 = aVLTree10.getRoot();
        int int62 = aVLTree0.getBalance(node61);
        java.lang.Class<?> wildcardClass63 = node61.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((-1));
        int int11 = aVLTree8.height();
        com.example.AVLTree.Node node12 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        aVLTree8.delete(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree17.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree29.getBalance(node35);
        com.example.AVLTree.Node node38 = aVLTree29.find((int) ' ');
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree39.find((int) 'a');
        aVLTree39.delete((int) (short) 10);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = null;
        int int48 = aVLTree46.getBalance(node47);
        aVLTree46.insert((int) (byte) 100);
        aVLTree46.insert((int) 'a');
        com.example.AVLTree.Node node54 = aVLTree46.find((int) (byte) 100);
        int int55 = aVLTree39.getBalance(node54);
        int int56 = aVLTree29.getBalance(node54);
        int int57 = aVLTree17.getBalance(node54);
        int int58 = aVLTree8.getBalance(node54);
        int int59 = aVLTree0.getBalance(node54);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        aVLTree60.delete((int) 'a');
        com.example.AVLTree.Node node65 = aVLTree60.getRoot();
        aVLTree60.delete(0);
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree60.getBalance(node68);
        int int70 = aVLTree60.height();
        com.example.AVLTree aVLTree71 = new com.example.AVLTree();
        com.example.AVLTree.Node node73 = aVLTree71.find((int) '4');
        com.example.AVLTree.Node node74 = aVLTree71.getRoot();
        aVLTree71.delete(100);
        aVLTree71.insert((int) (byte) 10);
        com.example.AVLTree.Node node79 = aVLTree71.getRoot();
        int int80 = aVLTree60.getBalance(node79);
        int int81 = aVLTree0.getBalance(node79);
        aVLTree0.delete((int) (short) 1);
        int int84 = aVLTree0.height();
        java.lang.Class<?> wildcardClass85 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = node6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 1);
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node16 = aVLTree0.find((int) (byte) 100);
        int int17 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree16.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.insert((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        aVLTree25.insert((int) (short) 100);
        com.example.AVLTree.Node node33 = aVLTree25.find((int) ' ');
        int int34 = aVLTree25.height();
        com.example.AVLTree.Node node35 = aVLTree25.getRoot();
        int int36 = aVLTree19.getBalance(node35);
        int int37 = aVLTree16.getBalance(node35);
        com.example.AVLTree.Node node39 = aVLTree16.find((int) 'a');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        int int46 = aVLTree40.height();
        com.example.AVLTree.Node node48 = aVLTree40.find((int) (short) -1);
        com.example.AVLTree.Node node49 = aVLTree40.getRoot();
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree50.getBalance(node51);
        aVLTree50.insert((int) (byte) 100);
        aVLTree50.insert((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree50.find((int) (byte) 100);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        aVLTree59.delete(0);
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree59.getBalance(node67);
        int int69 = aVLTree59.height();
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree70.getRoot();
        aVLTree70.delete(100);
        aVLTree70.insert((int) (byte) 10);
        com.example.AVLTree.Node node78 = aVLTree70.getRoot();
        int int79 = aVLTree59.getBalance(node78);
        int int80 = aVLTree50.getBalance(node78);
        int int81 = aVLTree40.getBalance(node78);
        int int82 = aVLTree16.getBalance(node78);
        int int83 = aVLTree0.getBalance(node78);
        com.example.AVLTree.Node node84 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        aVLTree8.delete((int) 'a');
        aVLTree8.delete(1);
        aVLTree8.delete((int) '#');
        aVLTree8.delete((int) (short) -1);
        com.example.AVLTree.Node node19 = aVLTree8.getRoot();
        aVLTree8.insert(10);
        aVLTree8.delete(1);
        com.example.AVLTree.Node node24 = aVLTree8.getRoot();
        int int25 = aVLTree8.height();
        aVLTree8.delete((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree8.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree0.find((int) '#');
        aVLTree0.delete(1);
        aVLTree0.insert((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        int int23 = aVLTree0.height();
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node26 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass27 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node28 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        aVLTree35.insert((int) (short) 0);
        com.example.AVLTree.Node node41 = aVLTree35.find(100);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = aVLTree42.find((int) '4');
        aVLTree42.delete((int) 'a');
        com.example.AVLTree.Node node47 = aVLTree42.getRoot();
        aVLTree42.delete(0);
        com.example.AVLTree.Node node50 = null;
        int int51 = aVLTree42.getBalance(node50);
        int int52 = aVLTree42.height();
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        com.example.AVLTree.Node node56 = aVLTree53.getRoot();
        aVLTree53.delete(100);
        aVLTree53.insert((int) (byte) 10);
        com.example.AVLTree.Node node61 = aVLTree53.getRoot();
        int int62 = aVLTree42.getBalance(node61);
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node65 = aVLTree63.find((int) '4');
        aVLTree63.delete((int) 'a');
        com.example.AVLTree.Node node68 = aVLTree63.getRoot();
        aVLTree63.delete(0);
        com.example.AVLTree.Node node71 = null;
        int int72 = aVLTree63.getBalance(node71);
        int int73 = aVLTree63.height();
        com.example.AVLTree aVLTree74 = new com.example.AVLTree();
        com.example.AVLTree.Node node76 = aVLTree74.find((int) '4');
        com.example.AVLTree.Node node77 = aVLTree74.getRoot();
        aVLTree74.delete(100);
        aVLTree74.insert((int) (byte) 10);
        com.example.AVLTree.Node node82 = aVLTree74.getRoot();
        int int83 = aVLTree63.getBalance(node82);
        int int84 = aVLTree42.getBalance(node82);
        int int85 = aVLTree35.getBalance(node82);
        int int86 = aVLTree29.getBalance(node82);
        int int87 = aVLTree0.getBalance(node82);
        java.lang.Class<?> wildcardClass88 = node82.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        aVLTree0.delete((int) (byte) 100);
        int int14 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree47.find((int) 'a');
        aVLTree47.insert((int) (short) -1);
        com.example.AVLTree.Node node54 = aVLTree47.getRoot();
        int int55 = aVLTree0.getBalance(node54);
        int int56 = aVLTree0.height();
        com.example.AVLTree.Node node57 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree32.getBalance(node35);
        aVLTree32.insert((int) (short) 100);
        com.example.AVLTree.Node node40 = aVLTree32.find((int) ' ');
        int int41 = aVLTree32.height();
        com.example.AVLTree.Node node42 = aVLTree32.getRoot();
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        aVLTree43.insert((int) (byte) 100);
        int int54 = aVLTree43.height();
        aVLTree43.delete((int) (byte) 0);
        com.example.AVLTree.Node node58 = aVLTree43.find(0);
        int int59 = aVLTree43.height();
        com.example.AVLTree.Node node61 = aVLTree43.find((int) (short) 10);
        int int62 = aVLTree32.getBalance(node61);
        int int63 = aVLTree0.getBalance(node61);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        aVLTree64.delete((int) 'a');
        aVLTree64.delete(1);
        aVLTree64.delete((int) '#');
        aVLTree64.insert((int) (short) 100);
        aVLTree64.insert(0);
        com.example.AVLTree.Node node77 = aVLTree64.getRoot();
        int int78 = aVLTree0.getBalance(node77);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node45 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((int) '#');
        com.example.AVLTree.Node node49 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass51 = node50.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree12.getBalance(node18);
        com.example.AVLTree.Node node21 = aVLTree12.find((int) ' ');
        int int22 = aVLTree12.height();
        aVLTree12.delete(0);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = null;
        int int27 = aVLTree25.getBalance(node26);
        aVLTree25.insert((int) (byte) 100);
        aVLTree25.insert((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree25.find((int) (byte) 100);
        int int34 = aVLTree12.getBalance(node33);
        int int35 = aVLTree0.getBalance(node33);
        com.example.AVLTree.Node node37 = aVLTree0.find((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = node37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node37);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        int int11 = aVLTree0.height();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = aVLTree12.getRoot();
        aVLTree12.delete(100);
        aVLTree12.delete((int) (short) -1);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.insert((int) (short) 0);
        com.example.AVLTree.Node node26 = aVLTree20.find(100);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        aVLTree27.delete((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree27.getRoot();
        aVLTree27.delete(0);
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree27.getBalance(node35);
        int int37 = aVLTree27.height();
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        com.example.AVLTree.Node node41 = aVLTree38.getRoot();
        aVLTree38.delete(100);
        aVLTree38.insert((int) (byte) 10);
        com.example.AVLTree.Node node46 = aVLTree38.getRoot();
        int int47 = aVLTree27.getBalance(node46);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        aVLTree48.delete((int) 'a');
        com.example.AVLTree.Node node53 = aVLTree48.getRoot();
        aVLTree48.delete(0);
        com.example.AVLTree.Node node56 = null;
        int int57 = aVLTree48.getBalance(node56);
        int int58 = aVLTree48.height();
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        com.example.AVLTree.Node node62 = aVLTree59.getRoot();
        aVLTree59.delete(100);
        aVLTree59.insert((int) (byte) 10);
        com.example.AVLTree.Node node67 = aVLTree59.getRoot();
        int int68 = aVLTree48.getBalance(node67);
        int int69 = aVLTree27.getBalance(node67);
        int int70 = aVLTree20.getBalance(node67);
        int int71 = aVLTree12.getBalance(node67);
        aVLTree12.insert(1);
        int int74 = aVLTree12.height();
        com.example.AVLTree.Node node75 = aVLTree12.getRoot();
        int int76 = aVLTree0.getBalance(node75);
        aVLTree0.insert((int) (short) 100);
        aVLTree0.delete((int) ' ');
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node84 = aVLTree0.find((-1));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 10);
        aVLTree0.insert(0);
        aVLTree0.delete((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        int int6 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree9.getBalance(node15);
        com.example.AVLTree.Node node18 = aVLTree9.find((int) ' ');
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree19.find((int) 'a');
        aVLTree19.delete((int) (short) 10);
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree26.getBalance(node27);
        aVLTree26.insert((int) (byte) 100);
        aVLTree26.insert((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree26.find((int) (byte) 100);
        int int35 = aVLTree19.getBalance(node34);
        int int36 = aVLTree9.getBalance(node34);
        int int37 = aVLTree0.getBalance(node34);
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((-1));
        int int43 = aVLTree40.height();
        com.example.AVLTree.Node node44 = aVLTree40.getRoot();
        int int45 = aVLTree40.height();
        int int46 = aVLTree40.height();
        com.example.AVLTree.Node node47 = aVLTree40.getRoot();
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree48.getBalance(node51);
        aVLTree48.insert(0);
        aVLTree48.insert((int) (short) 10);
        com.example.AVLTree.Node node57 = aVLTree48.getRoot();
        aVLTree48.delete(0);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        aVLTree60.delete((int) 'a');
        com.example.AVLTree.Node node65 = aVLTree60.getRoot();
        aVLTree60.delete(0);
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree60.getBalance(node68);
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree60.getBalance(node70);
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node76 = aVLTree72.find((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree72.getRoot();
        aVLTree72.delete((int) (short) 10);
        com.example.AVLTree.Node node80 = aVLTree72.getRoot();
        com.example.AVLTree.Node node81 = aVLTree72.getRoot();
        com.example.AVLTree aVLTree82 = new com.example.AVLTree();
        com.example.AVLTree.Node node83 = null;
        int int84 = aVLTree82.getBalance(node83);
        aVLTree82.insert((int) (byte) 100);
        aVLTree82.insert((int) 'a');
        com.example.AVLTree.Node node90 = aVLTree82.find((int) (byte) 100);
        int int91 = aVLTree72.getBalance(node90);
        int int92 = aVLTree60.getBalance(node90);
        int int93 = aVLTree48.getBalance(node90);
        int int94 = aVLTree40.getBalance(node90);
        int int95 = aVLTree0.getBalance(node90);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree.Node node10 = aVLTree0.find(10);
        aVLTree0.delete(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int12 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree9.find((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        com.example.AVLTree.Node node15 = aVLTree9.getRoot();
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        aVLTree9.delete((int) (byte) 10);
        int int19 = aVLTree9.height();
        com.example.AVLTree.Node node21 = aVLTree9.find((int) (short) 10);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node25 = aVLTree22.getRoot();
        aVLTree22.delete(100);
        aVLTree22.insert((int) (byte) 10);
        com.example.AVLTree.Node node30 = aVLTree22.getRoot();
        int int31 = aVLTree9.getBalance(node30);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree32.find((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree32.find((int) ' ');
        com.example.AVLTree.Node node40 = aVLTree32.find(0);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        aVLTree41.delete(1);
        aVLTree41.delete((int) '#');
        aVLTree41.delete((int) (short) -1);
        com.example.AVLTree.Node node52 = aVLTree41.getRoot();
        com.example.AVLTree.Node node54 = aVLTree41.find((int) (byte) 100);
        int int55 = aVLTree41.height();
        com.example.AVLTree aVLTree56 = new com.example.AVLTree();
        com.example.AVLTree.Node node58 = aVLTree56.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree56.getRoot();
        aVLTree56.insert((int) (byte) 100);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node66 = aVLTree62.find((int) 'a');
        aVLTree62.delete((int) (short) 10);
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree69.getBalance(node70);
        aVLTree69.insert((int) (byte) 100);
        aVLTree69.insert((int) 'a');
        com.example.AVLTree.Node node77 = aVLTree69.find((int) (byte) 100);
        int int78 = aVLTree62.getBalance(node77);
        int int79 = aVLTree56.getBalance(node77);
        int int80 = aVLTree41.getBalance(node77);
        int int81 = aVLTree32.getBalance(node77);
        int int82 = aVLTree9.getBalance(node77);
        int int83 = aVLTree0.getBalance(node77);
        java.lang.Class<?> wildcardClass84 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        int int26 = aVLTree6.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        aVLTree0.insert((int) (byte) 0);
        aVLTree0.delete(0);
        java.lang.Class<?> wildcardClass32 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) (byte) -1);
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        aVLTree8.delete((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree8.getRoot();
        aVLTree8.delete(0);
        com.example.AVLTree.Node node16 = null;
        int int17 = aVLTree8.getBalance(node16);
        int int18 = aVLTree8.height();
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree8.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = aVLTree29.getRoot();
        aVLTree29.delete(100);
        int int35 = aVLTree29.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        aVLTree36.delete((int) 'a');
        com.example.AVLTree.Node node41 = aVLTree36.getRoot();
        aVLTree36.delete(0);
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree36.getBalance(node44);
        int int46 = aVLTree36.height();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node50 = aVLTree47.getRoot();
        aVLTree47.delete(100);
        aVLTree47.insert((int) (byte) 10);
        com.example.AVLTree.Node node55 = aVLTree47.getRoot();
        int int56 = aVLTree36.getBalance(node55);
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        aVLTree57.delete((int) 'a');
        com.example.AVLTree.Node node62 = aVLTree57.getRoot();
        aVLTree57.delete(0);
        com.example.AVLTree.Node node65 = null;
        int int66 = aVLTree57.getBalance(node65);
        int int67 = aVLTree57.height();
        com.example.AVLTree aVLTree68 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = aVLTree68.find((int) '4');
        com.example.AVLTree.Node node71 = aVLTree68.getRoot();
        aVLTree68.delete(100);
        aVLTree68.insert((int) (byte) 10);
        com.example.AVLTree.Node node76 = aVLTree68.getRoot();
        int int77 = aVLTree57.getBalance(node76);
        int int78 = aVLTree36.getBalance(node76);
        int int79 = aVLTree29.getBalance(node76);
        int int80 = aVLTree8.getBalance(node76);
        int int81 = aVLTree0.getBalance(node76);
        com.example.AVLTree.Node node83 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node85 = aVLTree0.find((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree12.find((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete((int) (short) 10);
        com.example.AVLTree.Node node20 = aVLTree12.getRoot();
        com.example.AVLTree.Node node21 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        aVLTree22.insert((int) (byte) 100);
        aVLTree22.insert((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree22.find((int) (byte) 100);
        int int31 = aVLTree12.getBalance(node30);
        int int32 = aVLTree0.getBalance(node30);
        com.example.AVLTree.Node node33 = aVLTree0.getRoot();
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        int int35 = aVLTree0.height();
        java.lang.Class<?> wildcardClass36 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        int int4 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        int int6 = aVLTree0.height();
        int int7 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        aVLTree0.insert((int) '#');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree9.getRoot();
        aVLTree9.delete(0);
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree9.getBalance(node17);
        int int19 = aVLTree9.height();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree20.getRoot();
        aVLTree20.delete(100);
        aVLTree20.insert((int) (byte) 10);
        com.example.AVLTree.Node node28 = aVLTree20.getRoot();
        int int29 = aVLTree9.getBalance(node28);
        int int30 = aVLTree0.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree0.getRoot();
        com.example.AVLTree.Node node32 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        aVLTree33.delete(0);
        com.example.AVLTree.Node node41 = null;
        int int42 = aVLTree33.getBalance(node41);
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree33.getBalance(node43);
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        aVLTree45.delete((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree45.getRoot();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree45.getBalance(node51);
        com.example.AVLTree.Node node54 = aVLTree45.find((int) ' ');
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node59 = aVLTree55.find((int) 'a');
        aVLTree55.delete((int) (short) 10);
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = null;
        int int64 = aVLTree62.getBalance(node63);
        aVLTree62.insert((int) (byte) 100);
        aVLTree62.insert((int) 'a');
        com.example.AVLTree.Node node70 = aVLTree62.find((int) (byte) 100);
        int int71 = aVLTree55.getBalance(node70);
        int int72 = aVLTree45.getBalance(node70);
        int int73 = aVLTree33.getBalance(node70);
        int int74 = aVLTree0.getBalance(node70);
        int int75 = aVLTree0.height();
        com.example.AVLTree.Node node77 = aVLTree0.find(10);
        com.example.AVLTree.Node node79 = aVLTree0.find((int) (short) 10);
        java.lang.Class<?> wildcardClass80 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree16.getRoot();
        aVLTree16.insert((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree16.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        int int41 = aVLTree0.height();
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree aVLTree44 = new com.example.AVLTree();
        com.example.AVLTree.Node node46 = aVLTree44.find((-1));
        aVLTree44.delete(100);
        aVLTree44.insert((int) (short) 1);
        com.example.AVLTree.Node node51 = aVLTree44.getRoot();
        int int52 = aVLTree0.getBalance(node51);
        aVLTree0.delete((int) (byte) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree8.getBalance(node11);
        aVLTree8.insert(0);
        aVLTree8.insert((int) (short) 10);
        com.example.AVLTree.Node node17 = aVLTree8.getRoot();
        aVLTree8.delete(0);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.delete((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        aVLTree20.delete(0);
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree20.getBalance(node28);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree20.getBalance(node30);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree32.find((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree32.getRoot();
        aVLTree32.delete((int) (short) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        com.example.AVLTree.Node node41 = aVLTree32.getRoot();
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree42.getBalance(node43);
        aVLTree42.insert((int) (byte) 100);
        aVLTree42.insert((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree42.find((int) (byte) 100);
        int int51 = aVLTree32.getBalance(node50);
        int int52 = aVLTree20.getBalance(node50);
        int int53 = aVLTree8.getBalance(node50);
        int int54 = aVLTree0.getBalance(node50);
        int int55 = aVLTree0.height();
        com.example.AVLTree.Node node56 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        com.example.AVLTree.Node node61 = aVLTree57.find((int) 'a');
        aVLTree57.insert((int) (short) -1);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        aVLTree64.insert((int) (short) 0);
        com.example.AVLTree.Node node70 = aVLTree64.find(100);
        com.example.AVLTree aVLTree71 = new com.example.AVLTree();
        com.example.AVLTree.Node node73 = aVLTree71.find((int) '4');
        com.example.AVLTree.Node node74 = aVLTree71.getRoot();
        aVLTree71.delete(100);
        aVLTree71.insert((int) (byte) 10);
        com.example.AVLTree.Node node79 = aVLTree71.getRoot();
        int int80 = aVLTree64.getBalance(node79);
        int int81 = aVLTree57.getBalance(node79);
        int int82 = aVLTree0.getBalance(node79);
        java.lang.Class<?> wildcardClass83 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        aVLTree8.insert((int) (short) 0);
        com.example.AVLTree.Node node14 = aVLTree8.find(100);
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        aVLTree15.delete((int) 'a');
        com.example.AVLTree.Node node20 = aVLTree15.getRoot();
        aVLTree15.delete(0);
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree15.getBalance(node23);
        int int25 = aVLTree15.height();
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node29 = aVLTree26.getRoot();
        aVLTree26.delete(100);
        aVLTree26.insert((int) (byte) 10);
        com.example.AVLTree.Node node34 = aVLTree26.getRoot();
        int int35 = aVLTree15.getBalance(node34);
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        aVLTree36.delete((int) 'a');
        com.example.AVLTree.Node node41 = aVLTree36.getRoot();
        aVLTree36.delete(0);
        com.example.AVLTree.Node node44 = null;
        int int45 = aVLTree36.getBalance(node44);
        int int46 = aVLTree36.height();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node50 = aVLTree47.getRoot();
        aVLTree47.delete(100);
        aVLTree47.insert((int) (byte) 10);
        com.example.AVLTree.Node node55 = aVLTree47.getRoot();
        int int56 = aVLTree36.getBalance(node55);
        int int57 = aVLTree15.getBalance(node55);
        int int58 = aVLTree8.getBalance(node55);
        int int59 = aVLTree0.getBalance(node55);
        aVLTree0.insert(1);
        com.example.AVLTree.Node node63 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        aVLTree64.delete((int) 'a');
        com.example.AVLTree.Node node69 = aVLTree64.getRoot();
        aVLTree64.delete(0);
        com.example.AVLTree.Node node72 = null;
        int int73 = aVLTree64.getBalance(node72);
        com.example.AVLTree.Node node74 = null;
        int int75 = aVLTree64.getBalance(node74);
        com.example.AVLTree aVLTree76 = new com.example.AVLTree();
        com.example.AVLTree.Node node78 = aVLTree76.find((int) '4');
        com.example.AVLTree.Node node80 = aVLTree76.find((int) 'a');
        com.example.AVLTree.Node node81 = aVLTree76.getRoot();
        aVLTree76.delete((int) (short) 10);
        com.example.AVLTree.Node node84 = aVLTree76.getRoot();
        com.example.AVLTree.Node node85 = aVLTree76.getRoot();
        com.example.AVLTree aVLTree86 = new com.example.AVLTree();
        com.example.AVLTree.Node node87 = null;
        int int88 = aVLTree86.getBalance(node87);
        aVLTree86.insert((int) (byte) 100);
        aVLTree86.insert((int) 'a');
        com.example.AVLTree.Node node94 = aVLTree86.find((int) (byte) 100);
        int int95 = aVLTree76.getBalance(node94);
        int int96 = aVLTree64.getBalance(node94);
        int int97 = aVLTree0.getBalance(node94);
        com.example.AVLTree.Node node99 = aVLTree0.find((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node20 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) (short) 0);
        java.lang.Class<?> wildcardClass23 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert(0);
        aVLTree0.delete(0);
        aVLTree0.delete((int) (short) 100);
        java.lang.Class<?> wildcardClass22 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (byte) 10);
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree.Node node22 = aVLTree0.find((int) (byte) 0);
        int int23 = aVLTree0.height();
        int int24 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) 'a');
        aVLTree0.delete((int) (byte) 100);
        int int12 = aVLTree0.height();
        aVLTree0.delete((int) (short) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        int int24 = aVLTree18.height();
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete(0);
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree25.getBalance(node33);
        int int35 = aVLTree25.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree36.getRoot();
        aVLTree36.delete(100);
        aVLTree36.insert((int) (byte) 10);
        com.example.AVLTree.Node node44 = aVLTree36.getRoot();
        int int45 = aVLTree25.getBalance(node44);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        aVLTree46.delete((int) 'a');
        com.example.AVLTree.Node node51 = aVLTree46.getRoot();
        aVLTree46.delete(0);
        com.example.AVLTree.Node node54 = null;
        int int55 = aVLTree46.getBalance(node54);
        int int56 = aVLTree46.height();
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        com.example.AVLTree.Node node60 = aVLTree57.getRoot();
        aVLTree57.delete(100);
        aVLTree57.insert((int) (byte) 10);
        com.example.AVLTree.Node node65 = aVLTree57.getRoot();
        int int66 = aVLTree46.getBalance(node65);
        int int67 = aVLTree25.getBalance(node65);
        int int68 = aVLTree18.getBalance(node65);
        int int69 = aVLTree0.getBalance(node65);
        java.lang.Class<?> wildcardClass70 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree17.getBalance(node20);
        aVLTree17.insert((int) (short) 100);
        com.example.AVLTree.Node node25 = aVLTree17.find((int) ' ');
        int int26 = aVLTree17.height();
        com.example.AVLTree.Node node27 = aVLTree17.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        aVLTree0.delete(100);
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = null;
        int int8 = aVLTree6.getBalance(node7);
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree12.getBalance(node20);
        int int22 = aVLTree12.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree12.getBalance(node31);
        int int33 = aVLTree6.getBalance(node31);
        int int34 = aVLTree0.getBalance(node31);
        com.example.AVLTree.Node node35 = aVLTree0.getRoot();
        com.example.AVLTree.Node node36 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        int int39 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree16.getRoot();
        aVLTree16.insert((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree16.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        com.example.AVLTree.Node node42 = aVLTree0.find((int) (byte) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        int int10 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.insert((int) ' ');
        com.example.AVLTree.Node node48 = aVLTree0.find((int) (short) 1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node51 = aVLTree0.getRoot();
        com.example.AVLTree.Node node52 = aVLTree0.getRoot();
        int int53 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        int int17 = aVLTree0.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree18.getBalance(node21);
        aVLTree18.insert((int) (short) 100);
        com.example.AVLTree.Node node26 = aVLTree18.find((int) ' ');
        int int27 = aVLTree18.height();
        com.example.AVLTree.Node node28 = aVLTree18.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        aVLTree0.insert(1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        int int5 = aVLTree0.height();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        aVLTree0.delete((int) (short) -1);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        aVLTree0.insert(0);
        int int6 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.insert((int) (byte) 1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node12 = aVLTree0.find(10);
        aVLTree0.insert((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        int int11 = aVLTree0.height();
        aVLTree0.insert(0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        aVLTree0.delete((int) 'a');
        java.lang.Class<?> wildcardClass17 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (byte) 0);
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        aVLTree28.insert(0);
        int int51 = aVLTree28.height();
        com.example.AVLTree.Node node52 = aVLTree28.getRoot();
        int int53 = aVLTree0.getBalance(node52);
        int int54 = aVLTree0.height();
        aVLTree0.delete(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 10);
        aVLTree0.delete((-1));
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (byte) 10);
        int int16 = aVLTree0.height();
        java.lang.Class<?> wildcardClass17 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (byte) 1);
        int int12 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree19.getBalance(node22);
        aVLTree19.insert((int) '4');
        com.example.AVLTree.Node node27 = aVLTree19.find((int) (short) 0);
        com.example.AVLTree.Node node29 = aVLTree19.find((int) ' ');
        int int30 = aVLTree19.height();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree31.find((int) 'a');
        com.example.AVLTree.Node node36 = aVLTree31.getRoot();
        aVLTree31.delete((int) (short) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        int int40 = aVLTree31.height();
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.insert((int) (short) 0);
        com.example.AVLTree.Node node47 = aVLTree41.find(100);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree48.getRoot();
        aVLTree48.delete(100);
        aVLTree48.insert((int) (byte) 10);
        com.example.AVLTree.Node node56 = aVLTree48.getRoot();
        int int57 = aVLTree41.getBalance(node56);
        int int58 = aVLTree31.getBalance(node56);
        int int59 = aVLTree19.getBalance(node56);
        com.example.AVLTree.Node node60 = aVLTree19.getRoot();
        int int61 = aVLTree0.getBalance(node60);
        com.example.AVLTree.Node node62 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree8.getBalance(node9);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree17.getBalance(node20);
        aVLTree17.insert((int) (short) 100);
        com.example.AVLTree.Node node25 = aVLTree17.find((int) ' ');
        int int26 = aVLTree17.height();
        com.example.AVLTree.Node node27 = aVLTree17.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree8.getBalance(node27);
        int int30 = aVLTree0.getBalance(node27);
        com.example.AVLTree.Node node32 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree.Node node33 = aVLTree0.getRoot();
        com.example.AVLTree.Node node35 = aVLTree0.find((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) 'a');
        int int7 = aVLTree0.height();
        aVLTree0.delete(0);
        int int10 = aVLTree0.height();
        aVLTree0.insert((int) '4');
        int int13 = aVLTree0.height();
        int int14 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass16 = node15.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        int int44 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        int int23 = aVLTree0.height();
        int int24 = aVLTree0.height();
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        com.example.AVLTree.Node node31 = null;
        int int32 = aVLTree25.getBalance(node31);
        com.example.AVLTree.Node node34 = aVLTree25.find((int) ' ');
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree35.find((int) 'a');
        aVLTree35.delete((int) (short) 10);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree42.getBalance(node43);
        aVLTree42.insert((int) (byte) 100);
        aVLTree42.insert((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree42.find((int) (byte) 100);
        int int51 = aVLTree35.getBalance(node50);
        int int52 = aVLTree25.getBalance(node50);
        int int53 = aVLTree0.getBalance(node50);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = null;
        int int58 = aVLTree54.getBalance(node57);
        aVLTree54.insert((int) '4');
        com.example.AVLTree.Node node62 = aVLTree54.find((int) (short) 0);
        aVLTree54.insert((int) (byte) 1);
        aVLTree54.delete((int) (short) -1);
        int int67 = aVLTree54.height();
        com.example.AVLTree.Node node68 = aVLTree54.getRoot();
        int int69 = aVLTree0.getBalance(node68);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        aVLTree0.delete(1);
        aVLTree0.insert((int) 'a');
        aVLTree0.insert((int) '#');
        aVLTree0.insert((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree.Node node6 = aVLTree0.find(100);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) ' ');
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        com.example.AVLTree.Node node13 = aVLTree10.getRoot();
        aVLTree10.insert((int) (byte) 100);
        com.example.AVLTree.Node node16 = aVLTree10.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.insert((int) '#');
        com.example.AVLTree.Node node20 = aVLTree0.getRoot();
        com.example.AVLTree.Node node22 = aVLTree0.find((int) '4');
        int int23 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        aVLTree0.delete(10);
        aVLTree0.delete((-1));
        java.lang.Class<?> wildcardClass30 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        com.example.AVLTree.Node node23 = aVLTree0.getRoot();
        int int24 = aVLTree0.height();
        com.example.AVLTree.Node node26 = aVLTree0.find((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node45 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((int) (short) -1);
        aVLTree0.delete((int) ' ');
        int int50 = aVLTree0.height();
        com.example.AVLTree.Node node52 = aVLTree0.find(10);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node14 = aVLTree0.find((int) ' ');
        int int15 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree.Node node14 = aVLTree0.find((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (short) 10);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        com.example.AVLTree.Node node24 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node25 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree26.find((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree26.find((int) ' ');
        aVLTree26.delete((int) '4');
        com.example.AVLTree.Node node36 = aVLTree26.find((-1));
        com.example.AVLTree.Node node38 = aVLTree26.find((int) (byte) -1);
        com.example.AVLTree.Node node40 = aVLTree26.find((int) (short) 0);
        aVLTree26.insert((int) ' ');
        com.example.AVLTree.Node node43 = aVLTree26.getRoot();
        int int44 = aVLTree0.getBalance(node43);
        java.lang.Class<?> wildcardClass45 = node43.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        aVLTree8.delete((int) 'a');
        aVLTree8.delete(1);
        aVLTree8.delete((int) '#');
        aVLTree8.delete((int) (short) -1);
        com.example.AVLTree.Node node19 = aVLTree8.getRoot();
        aVLTree8.insert(10);
        aVLTree8.delete(1);
        com.example.AVLTree.Node node24 = aVLTree8.getRoot();
        int int25 = aVLTree8.height();
        aVLTree8.delete((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree8.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        com.example.AVLTree.Node node36 = aVLTree30.find((int) ' ');
        com.example.AVLTree.Node node38 = aVLTree30.find((int) (byte) 100);
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree39.getRoot();
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        com.example.AVLTree.Node node44 = aVLTree41.getRoot();
        com.example.AVLTree.Node node46 = aVLTree41.find((int) (short) -1);
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        aVLTree47.delete((int) 'a');
        com.example.AVLTree.Node node52 = aVLTree47.getRoot();
        aVLTree47.delete(0);
        com.example.AVLTree.Node node55 = null;
        int int56 = aVLTree47.getBalance(node55);
        int int57 = aVLTree47.height();
        aVLTree47.delete(100);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node62 = aVLTree60.find((int) '4');
        com.example.AVLTree.Node node63 = aVLTree60.getRoot();
        aVLTree60.delete(100);
        aVLTree60.insert((int) (byte) 10);
        com.example.AVLTree.Node node68 = aVLTree60.getRoot();
        int int69 = aVLTree47.getBalance(node68);
        int int70 = aVLTree41.getBalance(node68);
        int int71 = aVLTree39.getBalance(node68);
        int int72 = aVLTree30.getBalance(node68);
        aVLTree30.delete(10);
        aVLTree30.delete((int) '#');
        aVLTree30.insert((int) (short) 10);
        com.example.AVLTree aVLTree79 = new com.example.AVLTree();
        com.example.AVLTree.Node node81 = aVLTree79.find((int) '4');
        com.example.AVLTree.Node node82 = aVLTree79.getRoot();
        aVLTree79.delete(100);
        int int85 = aVLTree79.height();
        com.example.AVLTree.Node node87 = aVLTree79.find((int) (short) -1);
        aVLTree79.insert(0);
        aVLTree79.insert((int) (byte) 1);
        com.example.AVLTree.Node node92 = aVLTree79.getRoot();
        int int93 = aVLTree30.getBalance(node92);
        int int94 = aVLTree0.getBalance(node92);
        java.lang.Class<?> wildcardClass95 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find(0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        aVLTree9.delete((int) 'a');
        aVLTree9.delete(1);
        aVLTree9.delete((int) '#');
        aVLTree9.delete((int) (short) -1);
        com.example.AVLTree.Node node20 = aVLTree9.getRoot();
        com.example.AVLTree.Node node22 = aVLTree9.find((int) (byte) 100);
        int int23 = aVLTree9.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.insert((int) (byte) 100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree30.find((int) 'a');
        aVLTree30.delete((int) (short) 10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        int int46 = aVLTree30.getBalance(node45);
        int int47 = aVLTree24.getBalance(node45);
        int int48 = aVLTree9.getBalance(node45);
        int int49 = aVLTree0.getBalance(node45);
        com.example.AVLTree.Node node50 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        com.example.AVLTree.Node node53 = aVLTree0.getRoot();
        com.example.AVLTree.Node node54 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        int int12 = aVLTree0.height();
        aVLTree0.insert(2);
        int int15 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.delete(0);
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.delete((int) (short) -1);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.insert((int) (short) 0);
        com.example.AVLTree.Node node28 = aVLTree22.find(100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        aVLTree29.delete(0);
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree29.getBalance(node37);
        int int39 = aVLTree29.height();
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        aVLTree40.insert((int) (byte) 10);
        com.example.AVLTree.Node node48 = aVLTree40.getRoot();
        int int49 = aVLTree29.getBalance(node48);
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node52 = aVLTree50.find((int) '4');
        aVLTree50.delete((int) 'a');
        com.example.AVLTree.Node node55 = aVLTree50.getRoot();
        aVLTree50.delete(0);
        com.example.AVLTree.Node node58 = null;
        int int59 = aVLTree50.getBalance(node58);
        int int60 = aVLTree50.height();
        com.example.AVLTree aVLTree61 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = aVLTree61.find((int) '4');
        com.example.AVLTree.Node node64 = aVLTree61.getRoot();
        aVLTree61.delete(100);
        aVLTree61.insert((int) (byte) 10);
        com.example.AVLTree.Node node69 = aVLTree61.getRoot();
        int int70 = aVLTree50.getBalance(node69);
        int int71 = aVLTree29.getBalance(node69);
        int int72 = aVLTree22.getBalance(node69);
        int int73 = aVLTree14.getBalance(node69);
        aVLTree14.insert(1);
        com.example.AVLTree.Node node77 = aVLTree14.find((int) (byte) 0);
        com.example.AVLTree.Node node78 = aVLTree14.getRoot();
        com.example.AVLTree.Node node79 = aVLTree14.getRoot();
        int int80 = aVLTree0.getBalance(node79);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree9.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        aVLTree17.delete(100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree17.getBalance(node38);
        int int40 = aVLTree11.getBalance(node38);
        int int41 = aVLTree9.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(10);
        aVLTree0.delete((int) '4');
        aVLTree0.insert(10);
        java.lang.Class<?> wildcardClass49 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        int int25 = aVLTree0.height();
        com.example.AVLTree.Node node27 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node28 = aVLTree0.getRoot();
        com.example.AVLTree.Node node30 = aVLTree0.find((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 1);
        java.lang.Class<?> wildcardClass10 = node9.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        int int30 = aVLTree0.height();
        aVLTree0.delete((int) '4');
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        aVLTree33.delete((int) 'a');
        com.example.AVLTree.Node node38 = aVLTree33.getRoot();
        com.example.AVLTree.Node node39 = null;
        int int40 = aVLTree33.getBalance(node39);
        com.example.AVLTree.Node node42 = aVLTree33.find((int) ' ');
        aVLTree33.insert((-1));
        com.example.AVLTree.Node node45 = aVLTree33.getRoot();
        aVLTree33.delete((int) (byte) -1);
        aVLTree33.insert(0);
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree50.getBalance(node51);
        aVLTree50.insert((int) (byte) 100);
        aVLTree50.insert((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree50.find((int) (byte) 100);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        aVLTree59.delete(0);
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree59.getBalance(node67);
        int int69 = aVLTree59.height();
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree70.getRoot();
        aVLTree70.delete(100);
        aVLTree70.insert((int) (byte) 10);
        com.example.AVLTree.Node node78 = aVLTree70.getRoot();
        int int79 = aVLTree59.getBalance(node78);
        int int80 = aVLTree50.getBalance(node78);
        com.example.AVLTree.Node node81 = aVLTree50.getRoot();
        com.example.AVLTree.Node node82 = aVLTree50.getRoot();
        int int83 = aVLTree33.getBalance(node82);
        com.example.AVLTree.Node node84 = aVLTree33.getRoot();
        int int85 = aVLTree0.getBalance(node84);
        java.lang.Class<?> wildcardClass86 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find(10);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) '4');
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((-1));
        aVLTree18.delete(100);
        com.example.AVLTree.Node node24 = aVLTree18.find((int) '#');
        int int25 = aVLTree18.height();
        com.example.AVLTree.Node node27 = aVLTree18.find(10);
        int int28 = aVLTree18.height();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        int int32 = aVLTree29.height();
        int int33 = aVLTree29.height();
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree34.getBalance(node35);
        aVLTree34.insert((int) (byte) 100);
        aVLTree34.insert((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree34.find((int) (byte) 100);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        aVLTree43.delete((int) 'a');
        com.example.AVLTree.Node node48 = aVLTree43.getRoot();
        aVLTree43.delete(0);
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree43.getBalance(node51);
        int int53 = aVLTree43.height();
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree54.getRoot();
        aVLTree54.delete(100);
        aVLTree54.insert((int) (byte) 10);
        com.example.AVLTree.Node node62 = aVLTree54.getRoot();
        int int63 = aVLTree43.getBalance(node62);
        int int64 = aVLTree34.getBalance(node62);
        int int65 = aVLTree29.getBalance(node62);
        int int66 = aVLTree18.getBalance(node62);
        int int67 = aVLTree0.getBalance(node62);
        com.example.AVLTree.Node node68 = null;
        int int69 = aVLTree0.getBalance(node68);
        java.lang.Class<?> wildcardClass70 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.insert((int) (short) 0);
        com.example.AVLTree.Node node12 = aVLTree6.find(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        aVLTree13.delete((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree13.getRoot();
        aVLTree13.delete(0);
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree13.getBalance(node21);
        int int23 = aVLTree13.height();
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree24.getRoot();
        aVLTree24.delete(100);
        aVLTree24.insert((int) (byte) 10);
        com.example.AVLTree.Node node32 = aVLTree24.getRoot();
        int int33 = aVLTree13.getBalance(node32);
        com.example.AVLTree aVLTree34 = new com.example.AVLTree();
        com.example.AVLTree.Node node36 = aVLTree34.find((int) '4');
        aVLTree34.delete((int) 'a');
        com.example.AVLTree.Node node39 = aVLTree34.getRoot();
        aVLTree34.delete(0);
        com.example.AVLTree.Node node42 = null;
        int int43 = aVLTree34.getBalance(node42);
        int int44 = aVLTree34.height();
        com.example.AVLTree aVLTree45 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree45.find((int) '4');
        com.example.AVLTree.Node node48 = aVLTree45.getRoot();
        aVLTree45.delete(100);
        aVLTree45.insert((int) (byte) 10);
        com.example.AVLTree.Node node53 = aVLTree45.getRoot();
        int int54 = aVLTree34.getBalance(node53);
        int int55 = aVLTree13.getBalance(node53);
        int int56 = aVLTree6.getBalance(node53);
        int int57 = aVLTree0.getBalance(node53);
        int int58 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 0);
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node65 = aVLTree63.find((int) '4');
        com.example.AVLTree.Node node67 = aVLTree63.find((int) 'a');
        com.example.AVLTree.Node node68 = aVLTree63.getRoot();
        aVLTree63.delete((int) (short) 10);
        com.example.AVLTree.Node node71 = aVLTree63.getRoot();
        com.example.AVLTree.Node node72 = aVLTree63.getRoot();
        com.example.AVLTree aVLTree73 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = null;
        int int75 = aVLTree73.getBalance(node74);
        aVLTree73.insert((int) (byte) 100);
        aVLTree73.insert((int) 'a');
        com.example.AVLTree.Node node81 = aVLTree73.find((int) (byte) 100);
        int int82 = aVLTree63.getBalance(node81);
        int int83 = aVLTree0.getBalance(node81);
        java.lang.Class<?> wildcardClass84 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((-1));
        int int11 = aVLTree8.height();
        com.example.AVLTree.Node node12 = aVLTree8.getRoot();
        aVLTree8.insert((int) (byte) 100);
        aVLTree8.delete(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree17.getBalance(node27);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        com.example.AVLTree.Node node35 = null;
        int int36 = aVLTree29.getBalance(node35);
        com.example.AVLTree.Node node38 = aVLTree29.find((int) ' ');
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree39.find((int) 'a');
        aVLTree39.delete((int) (short) 10);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = null;
        int int48 = aVLTree46.getBalance(node47);
        aVLTree46.insert((int) (byte) 100);
        aVLTree46.insert((int) 'a');
        com.example.AVLTree.Node node54 = aVLTree46.find((int) (byte) 100);
        int int55 = aVLTree39.getBalance(node54);
        int int56 = aVLTree29.getBalance(node54);
        int int57 = aVLTree17.getBalance(node54);
        int int58 = aVLTree8.getBalance(node54);
        int int59 = aVLTree0.getBalance(node54);
        aVLTree0.insert((int) 'a');
        aVLTree0.insert((int) (short) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree9.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        com.example.AVLTree.Node node16 = aVLTree11.find((int) (short) -1);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        aVLTree17.delete(100);
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree17.getBalance(node38);
        int int40 = aVLTree11.getBalance(node38);
        int int41 = aVLTree9.getBalance(node38);
        int int42 = aVLTree0.getBalance(node38);
        aVLTree0.delete(10);
        aVLTree0.delete((int) '#');
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        int int55 = aVLTree49.height();
        com.example.AVLTree.Node node57 = aVLTree49.find((int) (short) -1);
        aVLTree49.insert(0);
        aVLTree49.insert((int) (byte) 1);
        com.example.AVLTree.Node node62 = aVLTree49.getRoot();
        int int63 = aVLTree0.getBalance(node62);
        int int64 = aVLTree0.height();
        java.lang.Class<?> wildcardClass65 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node10 = aVLTree0.find((-1));
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (byte) -1);
        int int13 = aVLTree0.height();
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node18 = aVLTree14.find((int) 'a');
        com.example.AVLTree.Node node19 = aVLTree14.getRoot();
        com.example.AVLTree.Node node20 = aVLTree14.getRoot();
        com.example.AVLTree.Node node21 = aVLTree14.getRoot();
        aVLTree14.delete((int) (byte) 10);
        int int24 = aVLTree14.height();
        com.example.AVLTree.Node node26 = aVLTree14.find((int) (short) 10);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree27.getRoot();
        aVLTree27.delete(100);
        aVLTree27.insert((int) (byte) 10);
        com.example.AVLTree.Node node35 = aVLTree27.getRoot();
        int int36 = aVLTree14.getBalance(node35);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree37.getBalance(node38);
        aVLTree37.insert((int) (byte) 100);
        aVLTree37.insert((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree37.find((int) (byte) 100);
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        aVLTree46.delete((int) 'a');
        com.example.AVLTree.Node node51 = aVLTree46.getRoot();
        aVLTree46.delete(0);
        com.example.AVLTree.Node node54 = null;
        int int55 = aVLTree46.getBalance(node54);
        int int56 = aVLTree46.height();
        com.example.AVLTree aVLTree57 = new com.example.AVLTree();
        com.example.AVLTree.Node node59 = aVLTree57.find((int) '4');
        com.example.AVLTree.Node node60 = aVLTree57.getRoot();
        aVLTree57.delete(100);
        aVLTree57.insert((int) (byte) 10);
        com.example.AVLTree.Node node65 = aVLTree57.getRoot();
        int int66 = aVLTree46.getBalance(node65);
        int int67 = aVLTree37.getBalance(node65);
        com.example.AVLTree.Node node68 = aVLTree37.getRoot();
        int int69 = aVLTree14.getBalance(node68);
        int int70 = aVLTree0.getBalance(node68);
        int int71 = aVLTree0.height();
        com.example.AVLTree.Node node72 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass73 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        int int14 = aVLTree11.height();
        int int15 = aVLTree11.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree16.getBalance(node17);
        aVLTree16.insert((int) (byte) 100);
        aVLTree16.insert((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree16.find((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete(0);
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree25.getBalance(node33);
        int int35 = aVLTree25.height();
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node38 = aVLTree36.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree36.getRoot();
        aVLTree36.delete(100);
        aVLTree36.insert((int) (byte) 10);
        com.example.AVLTree.Node node44 = aVLTree36.getRoot();
        int int45 = aVLTree25.getBalance(node44);
        int int46 = aVLTree16.getBalance(node44);
        int int47 = aVLTree11.getBalance(node44);
        int int48 = aVLTree0.getBalance(node44);
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node51 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass52 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert(0);
        com.example.AVLTree.Node node16 = aVLTree9.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.delete((int) (byte) 1);
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree0.getBalance(node22);
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        aVLTree24.delete((int) 'a');
        aVLTree24.delete(1);
        com.example.AVLTree.Node node31 = aVLTree24.getRoot();
        com.example.AVLTree.Node node33 = aVLTree24.find((int) (byte) 10);
        com.example.AVLTree.Node node34 = aVLTree24.getRoot();
        aVLTree24.delete(0);
        aVLTree24.insert((int) (short) 1);
        com.example.AVLTree.Node node39 = aVLTree24.getRoot();
        int int40 = aVLTree0.getBalance(node39);
        com.example.AVLTree.Node node41 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = aVLTree42.find((int) '4');
        com.example.AVLTree.Node node45 = aVLTree42.getRoot();
        aVLTree42.insert((int) (byte) 100);
        int int48 = aVLTree42.height();
        aVLTree42.insert(10);
        com.example.AVLTree.Node node52 = aVLTree42.find((int) (byte) 10);
        int int53 = aVLTree0.getBalance(node52);
        java.lang.Class<?> wildcardClass54 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree10.find((int) 'a');
        aVLTree10.delete((int) (short) 10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.insert((int) (byte) 100);
        aVLTree17.insert((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree17.find((int) (byte) 100);
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (short) 0);
        aVLTree0.delete((int) (short) 0);
        com.example.AVLTree.Node node33 = aVLTree0.find(0);
        com.example.AVLTree.Node node34 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 10);
        aVLTree0.delete((int) (byte) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 100);
        int int19 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        com.example.AVLTree.Node node10 = aVLTree0.find(10);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = node12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree0.getBalance(node13);
        com.example.AVLTree.Node node16 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree.Node node18 = aVLTree0.find(100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        aVLTree0.delete(0);
        com.example.AVLTree.Node node53 = aVLTree0.getRoot();
        com.example.AVLTree.Node node54 = aVLTree0.getRoot();
        com.example.AVLTree.Node node56 = aVLTree0.find((int) '#');
        aVLTree0.insert(0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree10.getRoot();
        aVLTree10.delete(100);
        aVLTree10.insert((int) (byte) 10);
        com.example.AVLTree.Node node18 = aVLTree10.getRoot();
        int int19 = aVLTree0.getBalance(node18);
        java.lang.Class<?> wildcardClass20 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((-1));
        int int9 = aVLTree6.height();
        com.example.AVLTree.Node node11 = aVLTree6.find((int) (byte) 100);
        aVLTree6.delete((int) (short) 100);
        int int14 = aVLTree6.height();
        com.example.AVLTree aVLTree15 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = aVLTree15.find((int) '4');
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree15.getBalance(node18);
        aVLTree15.insert(0);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        aVLTree22.insert((int) (byte) 100);
        aVLTree22.insert((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree22.getRoot();
        int int30 = aVLTree15.getBalance(node29);
        com.example.AVLTree.Node node32 = aVLTree15.find((int) (short) 100);
        aVLTree15.delete((int) (short) -1);
        com.example.AVLTree.Node node36 = aVLTree15.find(0);
        int int37 = aVLTree6.getBalance(node36);
        int int38 = aVLTree0.getBalance(node36);
        java.lang.Class<?> wildcardClass39 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.delete((int) 'a');
        java.lang.Class<?> wildcardClass11 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find((-1));
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) -1);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        aVLTree14.delete((int) 'a');
        com.example.AVLTree.Node node19 = aVLTree14.getRoot();
        aVLTree14.delete((int) (byte) 1);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = null;
        int int24 = aVLTree22.getBalance(node23);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = aVLTree25.getRoot();
        aVLTree25.insert((int) (byte) 100);
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node34 = null;
        int int35 = aVLTree31.getBalance(node34);
        aVLTree31.insert((int) (short) 100);
        com.example.AVLTree.Node node39 = aVLTree31.find((int) ' ');
        int int40 = aVLTree31.height();
        com.example.AVLTree.Node node41 = aVLTree31.getRoot();
        int int42 = aVLTree25.getBalance(node41);
        int int43 = aVLTree22.getBalance(node41);
        int int44 = aVLTree14.getBalance(node41);
        int int45 = aVLTree0.getBalance(node41);
        java.lang.Class<?> wildcardClass46 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        int int3 = aVLTree0.height();
        aVLTree0.insert((-1));
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node10 = aVLTree6.find((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        com.example.AVLTree.Node node12 = aVLTree6.getRoot();
        com.example.AVLTree.Node node13 = aVLTree6.getRoot();
        aVLTree6.delete((int) (byte) 10);
        int int16 = aVLTree6.height();
        com.example.AVLTree.Node node18 = aVLTree6.find((int) (short) 10);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert((int) (byte) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        aVLTree0.insert((int) ' ');
        com.example.AVLTree.Node node48 = aVLTree0.find((int) (short) 1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node51 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass52 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree23.find((int) 'a');
        com.example.AVLTree.Node node29 = aVLTree23.find((int) ' ');
        com.example.AVLTree.Node node31 = aVLTree23.find(0);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        aVLTree32.delete((int) 'a');
        aVLTree32.delete(1);
        aVLTree32.delete((int) '#');
        aVLTree32.delete((int) (short) -1);
        com.example.AVLTree.Node node43 = aVLTree32.getRoot();
        com.example.AVLTree.Node node45 = aVLTree32.find((int) (byte) 100);
        int int46 = aVLTree32.height();
        com.example.AVLTree aVLTree47 = new com.example.AVLTree();
        com.example.AVLTree.Node node49 = aVLTree47.find((int) '4');
        com.example.AVLTree.Node node50 = aVLTree47.getRoot();
        aVLTree47.insert((int) (byte) 100);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree53.find((int) 'a');
        aVLTree53.delete((int) (short) 10);
        com.example.AVLTree aVLTree60 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree60.getBalance(node61);
        aVLTree60.insert((int) (byte) 100);
        aVLTree60.insert((int) 'a');
        com.example.AVLTree.Node node68 = aVLTree60.find((int) (byte) 100);
        int int69 = aVLTree53.getBalance(node68);
        int int70 = aVLTree47.getBalance(node68);
        int int71 = aVLTree32.getBalance(node68);
        int int72 = aVLTree23.getBalance(node68);
        int int73 = aVLTree0.getBalance(node68);
        int int74 = aVLTree0.height();
        aVLTree0.insert((int) (short) -1);
        java.lang.Class<?> wildcardClass77 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node42 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass43 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        int int19 = aVLTree0.height();
        aVLTree0.insert(10);
        java.lang.Class<?> wildcardClass22 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (short) 1);
        aVLTree0.insert((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree0.find(0);
        int int14 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        int int21 = aVLTree0.height();
        int int22 = aVLTree0.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node27 = aVLTree23.find((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree23.getRoot();
        aVLTree23.delete((int) (short) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        com.example.AVLTree.Node node32 = aVLTree23.getRoot();
        aVLTree23.insert((int) (byte) 100);
        com.example.AVLTree.Node node35 = aVLTree23.getRoot();
        int int36 = aVLTree0.getBalance(node35);
        java.lang.Class<?> wildcardClass37 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 100);
        aVLTree0.insert((int) ' ');
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) 'a');
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree9.find((int) 'a');
        aVLTree9.insert((int) (short) -1);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        aVLTree16.insert((int) (short) 0);
        com.example.AVLTree.Node node22 = aVLTree16.find(100);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.delete(100);
        aVLTree23.insert((int) (byte) 10);
        com.example.AVLTree.Node node31 = aVLTree23.getRoot();
        int int32 = aVLTree16.getBalance(node31);
        int int33 = aVLTree9.getBalance(node31);
        int int34 = aVLTree9.height();
        aVLTree9.delete(10);
        com.example.AVLTree aVLTree37 = new com.example.AVLTree();
        com.example.AVLTree.Node node39 = aVLTree37.find((int) '4');
        aVLTree37.delete((int) 'a');
        com.example.AVLTree.Node node42 = aVLTree37.getRoot();
        aVLTree37.delete(0);
        com.example.AVLTree.Node node45 = null;
        int int46 = aVLTree37.getBalance(node45);
        int int47 = aVLTree37.height();
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree48.getRoot();
        aVLTree48.delete(100);
        aVLTree48.insert((int) (byte) 10);
        com.example.AVLTree.Node node56 = aVLTree48.getRoot();
        int int57 = aVLTree37.getBalance(node56);
        aVLTree37.insert(0);
        int int60 = aVLTree37.height();
        com.example.AVLTree.Node node61 = aVLTree37.getRoot();
        int int62 = aVLTree9.getBalance(node61);
        int int63 = aVLTree9.height();
        com.example.AVLTree.Node node65 = aVLTree9.find((int) (byte) -1);
        int int66 = aVLTree0.getBalance(node65);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        int int3 = aVLTree0.height();
        com.example.AVLTree.Node node4 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.delete((int) (byte) -1);
        int int12 = aVLTree7.height();
        int int13 = aVLTree7.height();
        com.example.AVLTree.Node node15 = aVLTree7.find((int) '#');
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree16.find((int) 'a');
        aVLTree16.delete((int) (short) 10);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree23.getBalance(node24);
        aVLTree23.insert((int) (byte) 100);
        aVLTree23.insert((int) 'a');
        com.example.AVLTree.Node node31 = aVLTree23.find((int) (byte) 100);
        int int32 = aVLTree16.getBalance(node31);
        int int33 = aVLTree7.getBalance(node31);
        int int34 = aVLTree0.getBalance(node31);
        com.example.AVLTree.Node node36 = aVLTree0.find((int) (byte) -1);
        aVLTree0.insert((int) 'a');
        int int39 = aVLTree0.height();
        aVLTree0.delete(0);
        int int42 = aVLTree0.height();
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((-1));
        int int46 = aVLTree43.height();
        com.example.AVLTree.Node node47 = aVLTree43.getRoot();
        aVLTree43.insert((int) (byte) 100);
        aVLTree43.insert(1);
        com.example.AVLTree.Node node53 = aVLTree43.find(100);
        int int54 = aVLTree0.getBalance(node53);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        aVLTree0.insert((int) '#');
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete(100);
        int int16 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node14 = aVLTree7.getRoot();
        int int15 = aVLTree0.getBalance(node14);
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 100);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node21 = aVLTree0.find(0);
        com.example.AVLTree.Node node23 = aVLTree0.find((int) ' ');
        aVLTree0.delete(1);
        java.lang.Class<?> wildcardClass26 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree13.getBalance(node14);
        aVLTree13.insert((int) (byte) 100);
        aVLTree13.insert((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree13.find((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.delete((int) 'a');
        com.example.AVLTree.Node node27 = aVLTree22.getRoot();
        aVLTree22.delete(0);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree22.getBalance(node30);
        int int32 = aVLTree22.height();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.delete(100);
        aVLTree33.insert((int) (byte) 10);
        com.example.AVLTree.Node node41 = aVLTree33.getRoot();
        int int42 = aVLTree22.getBalance(node41);
        int int43 = aVLTree13.getBalance(node41);
        com.example.AVLTree.Node node44 = aVLTree13.getRoot();
        com.example.AVLTree.Node node45 = aVLTree13.getRoot();
        int int46 = aVLTree12.getBalance(node45);
        int int47 = aVLTree0.getBalance(node45);
        java.lang.Class<?> wildcardClass48 = node45.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree16.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.insert((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        aVLTree25.insert((int) (short) 100);
        com.example.AVLTree.Node node33 = aVLTree25.find((int) ' ');
        int int34 = aVLTree25.height();
        com.example.AVLTree.Node node35 = aVLTree25.getRoot();
        int int36 = aVLTree19.getBalance(node35);
        int int37 = aVLTree16.getBalance(node35);
        com.example.AVLTree.Node node39 = aVLTree16.find((int) 'a');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        int int46 = aVLTree40.height();
        com.example.AVLTree.Node node48 = aVLTree40.find((int) (short) -1);
        com.example.AVLTree.Node node49 = aVLTree40.getRoot();
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree50.getBalance(node51);
        aVLTree50.insert((int) (byte) 100);
        aVLTree50.insert((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree50.find((int) (byte) 100);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        aVLTree59.delete(0);
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree59.getBalance(node67);
        int int69 = aVLTree59.height();
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree70.getRoot();
        aVLTree70.delete(100);
        aVLTree70.insert((int) (byte) 10);
        com.example.AVLTree.Node node78 = aVLTree70.getRoot();
        int int79 = aVLTree59.getBalance(node78);
        int int80 = aVLTree50.getBalance(node78);
        int int81 = aVLTree40.getBalance(node78);
        int int82 = aVLTree16.getBalance(node78);
        int int83 = aVLTree0.getBalance(node78);
        aVLTree0.insert(100);
        aVLTree0.insert(0);
        int int88 = aVLTree0.height();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) '4');
        com.example.AVLTree.Node node17 = aVLTree9.find((int) (short) 0);
        com.example.AVLTree.Node node19 = aVLTree9.find((int) ' ');
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node23 = aVLTree9.find((int) (short) 100);
        com.example.AVLTree.Node node24 = aVLTree9.getRoot();
        com.example.AVLTree.Node node25 = aVLTree9.getRoot();
        int int26 = aVLTree0.getBalance(node25);
        java.lang.Class<?> wildcardClass27 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        com.example.AVLTree.Node node43 = aVLTree0.getRoot();
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node48 = aVLTree46.find((int) '4');
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree46.getBalance(node49);
        aVLTree46.insert(0);
        aVLTree46.insert((int) (short) 10);
        com.example.AVLTree.Node node55 = aVLTree46.getRoot();
        aVLTree46.delete(0);
        com.example.AVLTree aVLTree58 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = aVLTree58.find((int) '4');
        aVLTree58.delete((int) 'a');
        aVLTree58.delete(1);
        com.example.AVLTree.Node node65 = aVLTree58.getRoot();
        com.example.AVLTree.Node node67 = aVLTree58.find((int) (byte) 10);
        com.example.AVLTree.Node node68 = aVLTree58.getRoot();
        aVLTree58.delete(0);
        aVLTree58.insert((int) (short) 1);
        com.example.AVLTree.Node node73 = aVLTree58.getRoot();
        int int74 = aVLTree46.getBalance(node73);
        int int75 = aVLTree0.getBalance(node73);
        java.lang.Class<?> wildcardClass76 = node73.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node15 = aVLTree0.find(0);
        int int16 = aVLTree0.height();
        com.example.AVLTree.Node node18 = aVLTree0.find(0);
        int int19 = aVLTree0.height();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        com.example.AVLTree.Node node29 = aVLTree0.find((int) (byte) 10);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node32 = aVLTree0.getRoot();
        int int33 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node10 = aVLTree8.find((int) '4');
        aVLTree8.delete((int) 'a');
        aVLTree8.delete(1);
        aVLTree8.delete((int) '#');
        aVLTree8.delete((int) (short) -1);
        com.example.AVLTree.Node node19 = aVLTree8.getRoot();
        com.example.AVLTree.Node node21 = aVLTree8.find((int) (byte) 100);
        int int22 = aVLTree8.height();
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.insert((int) (byte) 100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree29.find((int) 'a');
        aVLTree29.delete((int) (short) 10);
        com.example.AVLTree aVLTree36 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree36.getBalance(node37);
        aVLTree36.insert((int) (byte) 100);
        aVLTree36.insert((int) 'a');
        com.example.AVLTree.Node node44 = aVLTree36.find((int) (byte) 100);
        int int45 = aVLTree29.getBalance(node44);
        int int46 = aVLTree23.getBalance(node44);
        int int47 = aVLTree8.getBalance(node44);
        int int48 = aVLTree0.getBalance(node44);
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.insert((int) (byte) 100);
        com.example.AVLTree aVLTree55 = new com.example.AVLTree();
        com.example.AVLTree.Node node57 = aVLTree55.find((int) '4');
        com.example.AVLTree.Node node58 = aVLTree55.getRoot();
        aVLTree55.delete(100);
        aVLTree55.insert((int) (byte) 10);
        com.example.AVLTree.Node node63 = aVLTree55.getRoot();
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        aVLTree64.delete((int) 'a');
        com.example.AVLTree.Node node69 = aVLTree64.getRoot();
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree64.getBalance(node70);
        com.example.AVLTree.Node node73 = aVLTree64.find((int) ' ');
        com.example.AVLTree aVLTree74 = new com.example.AVLTree();
        com.example.AVLTree.Node node76 = aVLTree74.find((int) '4');
        com.example.AVLTree.Node node78 = aVLTree74.find((int) 'a');
        aVLTree74.delete((int) (short) 10);
        com.example.AVLTree aVLTree81 = new com.example.AVLTree();
        com.example.AVLTree.Node node82 = null;
        int int83 = aVLTree81.getBalance(node82);
        aVLTree81.insert((int) (byte) 100);
        aVLTree81.insert((int) 'a');
        com.example.AVLTree.Node node89 = aVLTree81.find((int) (byte) 100);
        int int90 = aVLTree74.getBalance(node89);
        int int91 = aVLTree64.getBalance(node89);
        int int92 = aVLTree55.getBalance(node89);
        int int93 = aVLTree49.getBalance(node89);
        com.example.AVLTree.Node node94 = aVLTree49.getRoot();
        int int95 = aVLTree0.getBalance(node94);
        aVLTree0.delete((int) (short) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node21 = aVLTree0.find(0);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(1);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        int int11 = aVLTree0.height();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node14 = aVLTree0.getRoot();
        aVLTree0.delete((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete((int) (byte) -1);
        int int33 = aVLTree25.height();
        com.example.AVLTree.Node node34 = aVLTree25.getRoot();
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree35.getBalance(node38);
        aVLTree35.insert((int) '4');
        com.example.AVLTree.Node node43 = aVLTree35.find((int) (short) 0);
        aVLTree35.insert((int) (byte) 1);
        aVLTree35.delete((int) (short) -1);
        int int48 = aVLTree35.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        aVLTree49.delete((int) (byte) -1);
        aVLTree49.delete((int) (byte) 0);
        com.example.AVLTree.Node node54 = aVLTree49.getRoot();
        com.example.AVLTree.Node node56 = aVLTree49.find(1);
        com.example.AVLTree.Node node58 = aVLTree49.find(10);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = null;
        int int61 = aVLTree59.getBalance(node60);
        aVLTree59.delete((int) (byte) -1);
        int int64 = aVLTree59.height();
        int int65 = aVLTree59.height();
        com.example.AVLTree.Node node67 = aVLTree59.find((int) '#');
        com.example.AVLTree aVLTree68 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = aVLTree68.find((int) '4');
        com.example.AVLTree.Node node72 = aVLTree68.find((int) 'a');
        aVLTree68.delete((int) (short) 10);
        com.example.AVLTree aVLTree75 = new com.example.AVLTree();
        com.example.AVLTree.Node node76 = null;
        int int77 = aVLTree75.getBalance(node76);
        aVLTree75.insert((int) (byte) 100);
        aVLTree75.insert((int) 'a');
        com.example.AVLTree.Node node83 = aVLTree75.find((int) (byte) 100);
        int int84 = aVLTree68.getBalance(node83);
        int int85 = aVLTree59.getBalance(node83);
        int int86 = aVLTree49.getBalance(node83);
        int int87 = aVLTree35.getBalance(node83);
        int int88 = aVLTree25.getBalance(node83);
        int int89 = aVLTree0.getBalance(node83);
        int int90 = aVLTree0.height();
        com.example.AVLTree.Node node91 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass92 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        aVLTree16.delete((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree16.getRoot();
        aVLTree16.delete(0);
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree16.getBalance(node24);
        int int26 = aVLTree16.height();
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree27.getRoot();
        aVLTree27.delete(100);
        aVLTree27.insert((int) (byte) 10);
        com.example.AVLTree.Node node35 = aVLTree27.getRoot();
        int int36 = aVLTree16.getBalance(node35);
        int int37 = aVLTree7.getBalance(node35);
        com.example.AVLTree.Node node38 = aVLTree7.getRoot();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree39.find((int) 'a');
        com.example.AVLTree.Node node45 = aVLTree39.find((int) ' ');
        com.example.AVLTree.Node node47 = aVLTree39.find(0);
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        aVLTree48.delete((int) 'a');
        aVLTree48.delete(1);
        aVLTree48.delete((int) '#');
        aVLTree48.delete((int) (short) -1);
        com.example.AVLTree.Node node59 = aVLTree48.getRoot();
        com.example.AVLTree.Node node61 = aVLTree48.find((int) (byte) 100);
        int int62 = aVLTree48.height();
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node65 = aVLTree63.find((int) '4');
        com.example.AVLTree.Node node66 = aVLTree63.getRoot();
        aVLTree63.insert((int) (byte) 100);
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node71 = aVLTree69.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree69.find((int) 'a');
        aVLTree69.delete((int) (short) 10);
        com.example.AVLTree aVLTree76 = new com.example.AVLTree();
        com.example.AVLTree.Node node77 = null;
        int int78 = aVLTree76.getBalance(node77);
        aVLTree76.insert((int) (byte) 100);
        aVLTree76.insert((int) 'a');
        com.example.AVLTree.Node node84 = aVLTree76.find((int) (byte) 100);
        int int85 = aVLTree69.getBalance(node84);
        int int86 = aVLTree63.getBalance(node84);
        int int87 = aVLTree48.getBalance(node84);
        int int88 = aVLTree39.getBalance(node84);
        int int89 = aVLTree7.getBalance(node84);
        int int90 = aVLTree0.getBalance(node84);
        aVLTree0.delete(10);
        aVLTree0.delete(2);
        aVLTree0.delete((int) (short) 100);
        com.example.AVLTree.Node node97 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.insert((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree7.find(100);
        com.example.AVLTree aVLTree14 = new com.example.AVLTree();
        com.example.AVLTree.Node node16 = aVLTree14.find((int) '4');
        com.example.AVLTree.Node node17 = aVLTree14.getRoot();
        aVLTree14.delete(100);
        aVLTree14.insert((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree14.getRoot();
        int int23 = aVLTree7.getBalance(node22);
        int int24 = aVLTree0.getBalance(node22);
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree aVLTree27 = new com.example.AVLTree();
        com.example.AVLTree.Node node29 = aVLTree27.find((int) '4');
        aVLTree27.delete((int) 'a');
        com.example.AVLTree.Node node32 = aVLTree27.getRoot();
        com.example.AVLTree.Node node33 = null;
        int int34 = aVLTree27.getBalance(node33);
        com.example.AVLTree.Node node36 = aVLTree27.find((int) ' ');
        aVLTree27.insert((-1));
        com.example.AVLTree.Node node39 = aVLTree27.getRoot();
        aVLTree27.delete((int) (byte) -1);
        aVLTree27.insert(0);
        com.example.AVLTree aVLTree44 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = null;
        int int46 = aVLTree44.getBalance(node45);
        aVLTree44.insert((int) (byte) 100);
        aVLTree44.insert((int) 'a');
        com.example.AVLTree.Node node52 = aVLTree44.find((int) (byte) 100);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        aVLTree53.delete((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree53.getRoot();
        aVLTree53.delete(0);
        com.example.AVLTree.Node node61 = null;
        int int62 = aVLTree53.getBalance(node61);
        int int63 = aVLTree53.height();
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        com.example.AVLTree.Node node67 = aVLTree64.getRoot();
        aVLTree64.delete(100);
        aVLTree64.insert((int) (byte) 10);
        com.example.AVLTree.Node node72 = aVLTree64.getRoot();
        int int73 = aVLTree53.getBalance(node72);
        int int74 = aVLTree44.getBalance(node72);
        com.example.AVLTree.Node node75 = aVLTree44.getRoot();
        com.example.AVLTree.Node node76 = aVLTree44.getRoot();
        int int77 = aVLTree27.getBalance(node76);
        int int78 = aVLTree0.getBalance(node76);
        com.example.AVLTree.Node node80 = aVLTree0.find((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass81 = node80.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node17 = aVLTree10.getRoot();
        int int18 = aVLTree0.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node23 = aVLTree19.find((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        com.example.AVLTree.Node node25 = aVLTree19.getRoot();
        com.example.AVLTree.Node node26 = aVLTree19.getRoot();
        aVLTree19.delete((int) (byte) 10);
        int int29 = aVLTree19.height();
        com.example.AVLTree.Node node31 = aVLTree19.find((int) (short) 10);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree19.getBalance(node40);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree42.getBalance(node43);
        aVLTree42.insert((int) (byte) 100);
        aVLTree42.insert((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree42.find((int) (byte) 100);
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        aVLTree51.delete((int) 'a');
        com.example.AVLTree.Node node56 = aVLTree51.getRoot();
        aVLTree51.delete(0);
        com.example.AVLTree.Node node59 = null;
        int int60 = aVLTree51.getBalance(node59);
        int int61 = aVLTree51.height();
        com.example.AVLTree aVLTree62 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = aVLTree62.find((int) '4');
        com.example.AVLTree.Node node65 = aVLTree62.getRoot();
        aVLTree62.delete(100);
        aVLTree62.insert((int) (byte) 10);
        com.example.AVLTree.Node node70 = aVLTree62.getRoot();
        int int71 = aVLTree51.getBalance(node70);
        int int72 = aVLTree42.getBalance(node70);
        com.example.AVLTree.Node node73 = aVLTree42.getRoot();
        int int74 = aVLTree19.getBalance(node73);
        int int75 = aVLTree0.getBalance(node73);
        int int76 = aVLTree0.height();
        com.example.AVLTree.Node node78 = aVLTree0.find((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        int int44 = aVLTree0.height();
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = aVLTree5.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree5.getRoot();
        aVLTree5.insert((int) (byte) 100);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) (short) 100);
        com.example.AVLTree.Node node19 = aVLTree11.find((int) ' ');
        int int20 = aVLTree11.height();
        com.example.AVLTree.Node node21 = aVLTree11.getRoot();
        int int22 = aVLTree5.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.insert(100);
        aVLTree0.insert((int) '4');
        int int30 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 100);
        int int14 = aVLTree0.height();
        com.example.AVLTree.Node node16 = aVLTree0.find(0);
        aVLTree0.delete((int) (byte) 100);
        java.lang.Class<?> wildcardClass19 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 1);
        aVLTree0.insert(0);
        aVLTree0.insert((int) 'a');
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.delete((int) (short) 1);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree12.getBalance(node15);
        aVLTree12.insert((int) '4');
        com.example.AVLTree.Node node20 = aVLTree12.find(100);
        com.example.AVLTree.Node node21 = aVLTree12.getRoot();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        aVLTree22.delete((int) 'a');
        com.example.AVLTree.Node node27 = aVLTree22.getRoot();
        aVLTree22.delete(0);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree22.getBalance(node30);
        int int32 = aVLTree22.height();
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = aVLTree33.getRoot();
        aVLTree33.delete(100);
        aVLTree33.insert((int) (byte) 10);
        com.example.AVLTree.Node node41 = aVLTree33.getRoot();
        int int42 = aVLTree22.getBalance(node41);
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        aVLTree43.delete((int) 'a');
        com.example.AVLTree.Node node48 = aVLTree43.getRoot();
        aVLTree43.delete(0);
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree43.getBalance(node51);
        int int53 = aVLTree43.height();
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree54.getRoot();
        aVLTree54.delete(100);
        aVLTree54.insert((int) (byte) 10);
        com.example.AVLTree.Node node62 = aVLTree54.getRoot();
        int int63 = aVLTree43.getBalance(node62);
        int int64 = aVLTree22.getBalance(node62);
        int int65 = aVLTree12.getBalance(node62);
        com.example.AVLTree.Node node66 = aVLTree12.getRoot();
        int int67 = aVLTree0.getBalance(node66);
        com.example.AVLTree.Node node69 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node71 = aVLTree0.find(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree aVLTree8 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree8.getBalance(node9);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree17.getBalance(node20);
        aVLTree17.insert((int) (short) 100);
        com.example.AVLTree.Node node25 = aVLTree17.find((int) ' ');
        int int26 = aVLTree17.height();
        com.example.AVLTree.Node node27 = aVLTree17.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree8.getBalance(node27);
        int int30 = aVLTree0.getBalance(node27);
        com.example.AVLTree.Node node32 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree.Node node33 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        aVLTree25.delete((int) (byte) -1);
        int int33 = aVLTree25.height();
        com.example.AVLTree.Node node34 = aVLTree25.getRoot();
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node38 = null;
        int int39 = aVLTree35.getBalance(node38);
        aVLTree35.insert((int) '4');
        com.example.AVLTree.Node node43 = aVLTree35.find((int) (short) 0);
        aVLTree35.insert((int) (byte) 1);
        aVLTree35.delete((int) (short) -1);
        int int48 = aVLTree35.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        aVLTree49.delete((int) (byte) -1);
        aVLTree49.delete((int) (byte) 0);
        com.example.AVLTree.Node node54 = aVLTree49.getRoot();
        com.example.AVLTree.Node node56 = aVLTree49.find(1);
        com.example.AVLTree.Node node58 = aVLTree49.find(10);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node60 = null;
        int int61 = aVLTree59.getBalance(node60);
        aVLTree59.delete((int) (byte) -1);
        int int64 = aVLTree59.height();
        int int65 = aVLTree59.height();
        com.example.AVLTree.Node node67 = aVLTree59.find((int) '#');
        com.example.AVLTree aVLTree68 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = aVLTree68.find((int) '4');
        com.example.AVLTree.Node node72 = aVLTree68.find((int) 'a');
        aVLTree68.delete((int) (short) 10);
        com.example.AVLTree aVLTree75 = new com.example.AVLTree();
        com.example.AVLTree.Node node76 = null;
        int int77 = aVLTree75.getBalance(node76);
        aVLTree75.insert((int) (byte) 100);
        aVLTree75.insert((int) 'a');
        com.example.AVLTree.Node node83 = aVLTree75.find((int) (byte) 100);
        int int84 = aVLTree68.getBalance(node83);
        int int85 = aVLTree59.getBalance(node83);
        int int86 = aVLTree49.getBalance(node83);
        int int87 = aVLTree35.getBalance(node83);
        int int88 = aVLTree25.getBalance(node83);
        int int89 = aVLTree0.getBalance(node83);
        int int90 = aVLTree0.height();
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node93 = null;
        int int94 = aVLTree0.getBalance(node93);
        com.example.AVLTree.Node node95 = aVLTree0.getRoot();
        aVLTree0.delete((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node19 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass21 = node20.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 1);
        aVLTree0.delete(0);
        int int13 = aVLTree0.height();
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        aVLTree0.delete((int) (short) 0);
        int int14 = aVLTree0.height();
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        com.example.AVLTree.Node node13 = null;
        int int14 = aVLTree0.getBalance(node13);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node19 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = node19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        aVLTree0.insert((int) ' ');
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        aVLTree0.delete(1);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree10.getRoot();
        aVLTree10.delete(100);
        int int16 = aVLTree10.height();
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (short) -1);
        com.example.AVLTree.Node node19 = aVLTree10.getRoot();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree20.getBalance(node21);
        aVLTree20.insert((int) (byte) 100);
        aVLTree20.insert((int) 'a');
        com.example.AVLTree.Node node28 = aVLTree20.find((int) (byte) 100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        aVLTree29.delete(0);
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree29.getBalance(node37);
        int int39 = aVLTree29.height();
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        aVLTree40.insert((int) (byte) 10);
        com.example.AVLTree.Node node48 = aVLTree40.getRoot();
        int int49 = aVLTree29.getBalance(node48);
        int int50 = aVLTree20.getBalance(node48);
        int int51 = aVLTree10.getBalance(node48);
        int int52 = aVLTree0.getBalance(node48);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node56 = aVLTree0.find((-1));
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.insert((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) 'a');
        aVLTree11.delete((int) (byte) 10);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        com.example.AVLTree.Node node24 = aVLTree20.find((int) 'a');
        aVLTree20.insert((int) (short) -1);
        com.example.AVLTree.Node node27 = aVLTree20.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree0.getBalance(node30);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        com.example.AVLTree.Node node37 = aVLTree32.find((int) (short) -1);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        aVLTree38.delete(100);
        com.example.AVLTree aVLTree51 = new com.example.AVLTree();
        com.example.AVLTree.Node node53 = aVLTree51.find((int) '4');
        com.example.AVLTree.Node node54 = aVLTree51.getRoot();
        aVLTree51.delete(100);
        aVLTree51.insert((int) (byte) 10);
        com.example.AVLTree.Node node59 = aVLTree51.getRoot();
        int int60 = aVLTree38.getBalance(node59);
        int int61 = aVLTree32.getBalance(node59);
        aVLTree32.delete((int) (byte) 10);
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree64.getBalance(node67);
        aVLTree64.insert((int) (short) 100);
        com.example.AVLTree.Node node72 = aVLTree64.find((int) ' ');
        int int73 = aVLTree64.height();
        com.example.AVLTree.Node node74 = aVLTree64.getRoot();
        com.example.AVLTree aVLTree75 = new com.example.AVLTree();
        com.example.AVLTree.Node node77 = aVLTree75.find((int) '4');
        com.example.AVLTree.Node node78 = aVLTree75.getRoot();
        aVLTree75.delete(100);
        aVLTree75.insert((int) (byte) 10);
        com.example.AVLTree.Node node83 = aVLTree75.getRoot();
        aVLTree75.insert((int) (byte) 100);
        int int86 = aVLTree75.height();
        aVLTree75.delete((int) (byte) 0);
        com.example.AVLTree.Node node90 = aVLTree75.find(0);
        int int91 = aVLTree75.height();
        com.example.AVLTree.Node node93 = aVLTree75.find((int) (short) 10);
        int int94 = aVLTree64.getBalance(node93);
        int int95 = aVLTree32.getBalance(node93);
        int int96 = aVLTree0.getBalance(node93);
        aVLTree0.delete((int) (short) 10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) -1);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (byte) -1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node21 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node23 = aVLTree0.find(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.find((int) (short) 1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 10);
        int int10 = aVLTree0.height();
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (short) 10);
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        aVLTree13.insert((int) (byte) 10);
        com.example.AVLTree.Node node21 = aVLTree13.getRoot();
        int int22 = aVLTree0.getBalance(node21);
        int int23 = aVLTree0.height();
        int int24 = aVLTree0.height();
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        aVLTree25.delete((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree25.getRoot();
        com.example.AVLTree.Node node31 = null;
        int int32 = aVLTree25.getBalance(node31);
        com.example.AVLTree.Node node34 = aVLTree25.find((int) ' ');
        com.example.AVLTree aVLTree35 = new com.example.AVLTree();
        com.example.AVLTree.Node node37 = aVLTree35.find((int) '4');
        com.example.AVLTree.Node node39 = aVLTree35.find((int) 'a');
        aVLTree35.delete((int) (short) 10);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = null;
        int int44 = aVLTree42.getBalance(node43);
        aVLTree42.insert((int) (byte) 100);
        aVLTree42.insert((int) 'a');
        com.example.AVLTree.Node node50 = aVLTree42.find((int) (byte) 100);
        int int51 = aVLTree35.getBalance(node50);
        int int52 = aVLTree25.getBalance(node50);
        int int53 = aVLTree0.getBalance(node50);
        aVLTree0.insert(10);
        int int56 = aVLTree0.height();
        com.example.AVLTree.Node node58 = aVLTree0.find(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(node58);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node17 = aVLTree0.find((int) (short) 0);
        int int18 = aVLTree0.height();
        com.example.AVLTree.Node node20 = aVLTree0.find(1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = node18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (byte) 0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node10 = aVLTree0.find(10);
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.delete((int) (byte) -1);
        int int5 = aVLTree0.height();
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree9.find((int) 'a');
        aVLTree9.delete((int) (short) 10);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree16.getBalance(node17);
        aVLTree16.insert((int) (byte) 100);
        aVLTree16.insert((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree16.find((int) (byte) 100);
        int int25 = aVLTree9.getBalance(node24);
        int int26 = aVLTree0.getBalance(node24);
        aVLTree0.insert((int) (byte) 100);
        java.lang.Class<?> wildcardClass29 = aVLTree0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        aVLTree0.delete((int) '4');
        java.lang.Class<?> wildcardClass11 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        aVLTree0.delete((int) (byte) 100);
        com.example.AVLTree.Node node46 = aVLTree0.find((int) ' ');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        aVLTree0.delete((int) (byte) -1);
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.find(10);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        aVLTree6.delete((int) 'a');
        com.example.AVLTree.Node node11 = aVLTree6.getRoot();
        aVLTree6.delete(0);
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree6.getBalance(node14);
        int int16 = aVLTree6.height();
        aVLTree6.delete(100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        aVLTree19.insert((int) (byte) 10);
        com.example.AVLTree.Node node27 = aVLTree19.getRoot();
        int int28 = aVLTree6.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        int int30 = aVLTree0.height();
        aVLTree0.insert(100);
        aVLTree0.delete(0);
        java.lang.Class<?> wildcardClass35 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        aVLTree0.insert((-1));
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree.Node node16 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node18 = aVLTree0.find((int) (byte) -1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        aVLTree0.insert((int) (byte) 100);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find(10);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node16 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node10 = aVLTree0.find((int) ' ');
        int int11 = aVLTree0.height();
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree12.getBalance(node15);
        aVLTree12.insert((int) (short) 100);
        com.example.AVLTree.Node node20 = aVLTree12.find((int) ' ');
        aVLTree12.insert((int) (short) 0);
        com.example.AVLTree.Node node24 = aVLTree12.find(0);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        aVLTree25.insert((int) '4');
        com.example.AVLTree.Node node33 = aVLTree25.find((int) (short) 0);
        int int34 = aVLTree25.height();
        aVLTree25.delete(0);
        com.example.AVLTree.Node node37 = aVLTree25.getRoot();
        int int38 = aVLTree12.getBalance(node37);
        int int39 = aVLTree0.getBalance(node37);
        com.example.AVLTree.Node node40 = aVLTree0.getRoot();
        com.example.AVLTree.Node node41 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        aVLTree0.delete((-1));
        int int53 = aVLTree0.height();
        aVLTree0.delete(0);
        java.lang.Class<?> wildcardClass56 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.delete(0);
        aVLTree0.delete(10);
        aVLTree0.insert(0);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        aVLTree16.delete((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree16.getRoot();
        aVLTree16.delete(0);
        com.example.AVLTree.Node node24 = null;
        int int25 = aVLTree16.getBalance(node24);
        int int26 = aVLTree16.height();
        aVLTree16.delete(100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = aVLTree29.getRoot();
        aVLTree29.delete(100);
        aVLTree29.insert((int) (byte) 10);
        com.example.AVLTree.Node node37 = aVLTree29.getRoot();
        int int38 = aVLTree16.getBalance(node37);
        int int39 = aVLTree0.getBalance(node37);
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        aVLTree40.insert((int) (short) 0);
        com.example.AVLTree.Node node46 = aVLTree40.find(100);
        int int47 = aVLTree40.height();
        com.example.AVLTree.Node node48 = aVLTree40.getRoot();
        int int49 = aVLTree0.getBalance(node48);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert(0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int6 = aVLTree0.height();
        aVLTree0.insert(1);
        aVLTree0.insert(0);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree.Node node14 = aVLTree0.find((int) (short) 0);
        java.lang.Class<?> wildcardClass15 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        int int11 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node15 = aVLTree0.find(0);
        int int16 = aVLTree0.height();
        aVLTree0.delete(10);
        aVLTree0.delete((int) '#');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) '4');
        com.example.AVLTree.Node node8 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node10 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node12 = aVLTree0.find((int) '#');
        com.example.AVLTree.Node node14 = aVLTree0.find(0);
        aVLTree0.insert(100);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = aVLTree17.getRoot();
        aVLTree17.delete(100);
        aVLTree17.insert((int) (byte) 10);
        com.example.AVLTree.Node node25 = aVLTree17.getRoot();
        int int26 = aVLTree10.getBalance(node25);
        int int27 = aVLTree0.getBalance(node25);
        aVLTree0.delete(100);
        aVLTree0.insert(10);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        int int5 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 1);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        aVLTree10.insert((int) (short) 0);
        com.example.AVLTree.Node node16 = aVLTree10.find(100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree28.getRoot();
        aVLTree28.delete(100);
        aVLTree28.insert((int) (byte) 10);
        com.example.AVLTree.Node node36 = aVLTree28.getRoot();
        int int37 = aVLTree17.getBalance(node36);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.insert((int) (byte) 10);
        com.example.AVLTree.Node node57 = aVLTree49.getRoot();
        int int58 = aVLTree38.getBalance(node57);
        int int59 = aVLTree17.getBalance(node57);
        int int60 = aVLTree10.getBalance(node57);
        com.example.AVLTree.Node node61 = aVLTree10.getRoot();
        int int62 = aVLTree0.getBalance(node61);
        aVLTree0.delete(0);
        java.lang.Class<?> wildcardClass65 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        com.example.AVLTree.Node node19 = aVLTree16.getRoot();
        aVLTree16.insert((int) (byte) 100);
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree22.find((int) 'a');
        aVLTree22.delete((int) (short) 10);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        int int38 = aVLTree22.getBalance(node37);
        int int39 = aVLTree16.getBalance(node37);
        int int40 = aVLTree0.getBalance(node37);
        int int41 = aVLTree0.height();
        aVLTree0.insert((int) (short) 10);
        aVLTree0.insert(2);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree0.getBalance(node46);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.insert((-1));
        int int13 = aVLTree0.height();
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = aVLTree16.find((int) '4');
        aVLTree16.delete((int) 'a');
        com.example.AVLTree.Node node21 = aVLTree16.getRoot();
        com.example.AVLTree.Node node22 = null;
        int int23 = aVLTree16.getBalance(node22);
        com.example.AVLTree.Node node25 = aVLTree16.find((int) ' ');
        com.example.AVLTree aVLTree26 = new com.example.AVLTree();
        com.example.AVLTree.Node node28 = aVLTree26.find((int) '4');
        com.example.AVLTree.Node node30 = aVLTree26.find((int) 'a');
        aVLTree26.delete((int) (short) 10);
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = null;
        int int35 = aVLTree33.getBalance(node34);
        aVLTree33.insert((int) (byte) 100);
        aVLTree33.insert((int) 'a');
        com.example.AVLTree.Node node41 = aVLTree33.find((int) (byte) 100);
        int int42 = aVLTree26.getBalance(node41);
        int int43 = aVLTree16.getBalance(node41);
        aVLTree16.insert(0);
        com.example.AVLTree.Node node46 = aVLTree16.getRoot();
        int int47 = aVLTree0.getBalance(node46);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 1);
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        aVLTree0.insert(10);
        aVLTree0.delete(1);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        int int17 = aVLTree0.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree18.getBalance(node21);
        aVLTree18.insert((int) (short) 100);
        com.example.AVLTree.Node node26 = aVLTree18.find((int) ' ');
        int int27 = aVLTree18.height();
        com.example.AVLTree.Node node28 = aVLTree18.getRoot();
        int int29 = aVLTree0.getBalance(node28);
        com.example.AVLTree.Node node31 = aVLTree0.find((int) '4');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        aVLTree0.insert(0);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((-1));
        aVLTree0.delete(100);
        com.example.AVLTree.Node node6 = aVLTree0.find((int) '#');
        int int7 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.find(10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        int int22 = aVLTree11.height();
        com.example.AVLTree.Node node24 = aVLTree11.find((int) (byte) -1);
        aVLTree11.insert((-1));
        int int27 = aVLTree11.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree28.getRoot();
        aVLTree28.insert((int) (byte) 100);
        int int34 = aVLTree28.height();
        aVLTree28.insert(1);
        aVLTree28.insert(0);
        com.example.AVLTree.Node node39 = aVLTree28.getRoot();
        int int40 = aVLTree11.getBalance(node39);
        com.example.AVLTree.Node node42 = aVLTree11.find((int) (short) -1);
        int int43 = aVLTree0.getBalance(node42);
        com.example.AVLTree.Node node44 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node11 = aVLTree0.find(0);
        int int12 = aVLTree0.height();
        com.example.AVLTree aVLTree13 = new com.example.AVLTree();
        com.example.AVLTree.Node node15 = aVLTree13.find((int) '4');
        com.example.AVLTree.Node node16 = aVLTree13.getRoot();
        aVLTree13.delete(100);
        int int19 = aVLTree13.height();
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node22 = aVLTree20.find((int) '4');
        aVLTree20.delete((int) 'a');
        com.example.AVLTree.Node node25 = aVLTree20.getRoot();
        aVLTree20.delete(0);
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree20.getBalance(node28);
        int int30 = aVLTree20.height();
        com.example.AVLTree aVLTree31 = new com.example.AVLTree();
        com.example.AVLTree.Node node33 = aVLTree31.find((int) '4');
        com.example.AVLTree.Node node34 = aVLTree31.getRoot();
        aVLTree31.delete(100);
        aVLTree31.insert((int) (byte) 10);
        com.example.AVLTree.Node node39 = aVLTree31.getRoot();
        int int40 = aVLTree20.getBalance(node39);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        com.example.AVLTree.Node node46 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree41.getBalance(node49);
        int int51 = aVLTree41.height();
        com.example.AVLTree aVLTree52 = new com.example.AVLTree();
        com.example.AVLTree.Node node54 = aVLTree52.find((int) '4');
        com.example.AVLTree.Node node55 = aVLTree52.getRoot();
        aVLTree52.delete(100);
        aVLTree52.insert((int) (byte) 10);
        com.example.AVLTree.Node node60 = aVLTree52.getRoot();
        int int61 = aVLTree41.getBalance(node60);
        int int62 = aVLTree20.getBalance(node60);
        int int63 = aVLTree13.getBalance(node60);
        aVLTree13.delete((-1));
        aVLTree13.insert((int) (short) -1);
        com.example.AVLTree.Node node68 = aVLTree13.getRoot();
        int int69 = aVLTree0.getBalance(node68);
        java.lang.Class<?> wildcardClass70 = node68.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree.Node node8 = aVLTree0.find((int) (short) -1);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree aVLTree42 = new com.example.AVLTree();
        com.example.AVLTree.Node node44 = aVLTree42.find((int) '4');
        com.example.AVLTree.Node node45 = aVLTree42.getRoot();
        aVLTree42.delete(100);
        aVLTree42.insert((int) (byte) 10);
        com.example.AVLTree.Node node50 = aVLTree42.getRoot();
        aVLTree42.insert((int) (byte) 100);
        int int53 = aVLTree42.height();
        aVLTree42.delete((int) (byte) 0);
        com.example.AVLTree.Node node57 = aVLTree42.find(0);
        com.example.AVLTree.Node node58 = aVLTree42.getRoot();
        int int59 = aVLTree0.getBalance(node58);
        aVLTree0.delete((int) (short) -1);
        java.lang.Class<?> wildcardClass62 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree17.getBalance(node20);
        aVLTree17.insert((int) (short) 100);
        com.example.AVLTree.Node node25 = aVLTree17.find((int) ' ');
        int int26 = aVLTree17.height();
        com.example.AVLTree.Node node27 = aVLTree17.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        com.example.AVLTree.Node node31 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node32 = aVLTree0.getRoot();
        com.example.AVLTree.Node node33 = aVLTree0.getRoot();
        int int34 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        com.example.AVLTree.Node node10 = null;
        int int11 = aVLTree0.getBalance(node10);
        com.example.AVLTree.Node node12 = aVLTree0.getRoot();
        com.example.AVLTree.Node node14 = aVLTree0.find(100);
        aVLTree0.delete(10);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node18 = null;
        int int19 = aVLTree17.getBalance(node18);
        aVLTree17.delete((int) (byte) -1);
        int int22 = aVLTree17.height();
        int int23 = aVLTree17.height();
        com.example.AVLTree.Node node25 = aVLTree17.find((int) '#');
        com.example.AVLTree.Node node26 = aVLTree17.getRoot();
        aVLTree17.insert(0);
        com.example.AVLTree.Node node30 = aVLTree17.find((int) (byte) 0);
        int int31 = aVLTree0.getBalance(node30);
        aVLTree0.insert((int) (short) 0);
        java.lang.Class<?> wildcardClass34 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree0.getBalance(node6);
        com.example.AVLTree.Node node9 = aVLTree0.find((int) ' ');
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.insert((int) (byte) 100);
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node20 = null;
        int int21 = aVLTree17.getBalance(node20);
        aVLTree17.insert((int) (short) 100);
        com.example.AVLTree.Node node25 = aVLTree17.find((int) ' ');
        int int26 = aVLTree17.height();
        com.example.AVLTree.Node node27 = aVLTree17.getRoot();
        int int28 = aVLTree11.getBalance(node27);
        int int29 = aVLTree0.getBalance(node27);
        aVLTree0.delete(100);
        aVLTree0.delete((int) (byte) -1);
        com.example.AVLTree.Node node34 = null;
        int int35 = aVLTree0.getBalance(node34);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node6 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node10 = aVLTree0.find((-1));
        com.example.AVLTree.Node node12 = aVLTree0.find((int) (byte) -1);
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.insert((int) (short) -1);
        int int7 = aVLTree0.height();
        aVLTree0.delete((int) '4');
        com.example.AVLTree.Node node11 = aVLTree0.find(0);
        int int12 = aVLTree0.height();
        aVLTree0.insert(2);
        aVLTree0.insert(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        aVLTree0.insert((int) (byte) 10);
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        aVLTree0.insert((int) (short) 0);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        aVLTree11.delete((int) 'a');
        com.example.AVLTree.Node node16 = aVLTree11.getRoot();
        aVLTree11.delete(0);
        com.example.AVLTree.Node node19 = null;
        int int20 = aVLTree11.getBalance(node19);
        int int21 = aVLTree11.height();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node25 = aVLTree22.getRoot();
        aVLTree22.delete(100);
        aVLTree22.insert((int) (byte) 10);
        com.example.AVLTree.Node node30 = aVLTree22.getRoot();
        int int31 = aVLTree11.getBalance(node30);
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        aVLTree32.delete((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree32.getRoot();
        aVLTree32.delete(0);
        com.example.AVLTree.Node node40 = null;
        int int41 = aVLTree32.getBalance(node40);
        int int42 = aVLTree32.height();
        com.example.AVLTree aVLTree43 = new com.example.AVLTree();
        com.example.AVLTree.Node node45 = aVLTree43.find((int) '4');
        com.example.AVLTree.Node node46 = aVLTree43.getRoot();
        aVLTree43.delete(100);
        aVLTree43.insert((int) (byte) 10);
        com.example.AVLTree.Node node51 = aVLTree43.getRoot();
        int int52 = aVLTree32.getBalance(node51);
        int int53 = aVLTree11.getBalance(node51);
        int int54 = aVLTree0.getBalance(node51);
        aVLTree0.delete((int) (short) -1);
        aVLTree0.delete((int) (byte) 1);
        int int59 = aVLTree0.height();
        java.lang.Class<?> wildcardClass60 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        int int13 = aVLTree0.height();
        com.example.AVLTree.Node node15 = aVLTree0.find(10);
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        aVLTree0.delete(1);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.delete(100);
        int int25 = aVLTree19.height();
        com.example.AVLTree.Node node27 = aVLTree19.find((int) (short) -1);
        com.example.AVLTree.Node node28 = aVLTree19.getRoot();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = null;
        int int31 = aVLTree29.getBalance(node30);
        aVLTree29.insert((int) (byte) 100);
        aVLTree29.insert((int) 'a');
        com.example.AVLTree.Node node37 = aVLTree29.find((int) (byte) 100);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.insert((int) (byte) 10);
        com.example.AVLTree.Node node57 = aVLTree49.getRoot();
        int int58 = aVLTree38.getBalance(node57);
        int int59 = aVLTree29.getBalance(node57);
        int int60 = aVLTree19.getBalance(node57);
        aVLTree19.insert((int) (short) 1);
        int int63 = aVLTree19.height();
        com.example.AVLTree aVLTree64 = new com.example.AVLTree();
        com.example.AVLTree.Node node66 = aVLTree64.find((int) '4');
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree64.getBalance(node67);
        com.example.AVLTree.Node node69 = aVLTree64.getRoot();
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree70.getRoot();
        aVLTree70.delete(100);
        int int76 = aVLTree70.height();
        com.example.AVLTree.Node node78 = aVLTree70.find((int) (short) -1);
        com.example.AVLTree.Node node79 = aVLTree70.getRoot();
        com.example.AVLTree.Node node80 = aVLTree70.getRoot();
        aVLTree70.insert((int) (byte) 1);
        com.example.AVLTree.Node node83 = aVLTree70.getRoot();
        int int84 = aVLTree64.getBalance(node83);
        int int85 = aVLTree19.getBalance(node83);
        int int86 = aVLTree0.getBalance(node83);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        aVLTree0.delete((int) '#');
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node11 = aVLTree0.getRoot();
        com.example.AVLTree.Node node13 = aVLTree0.find((int) (byte) 100);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) ' ');
        aVLTree0.delete((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree.Node node11 = aVLTree0.find((int) (short) 0);
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node15 = aVLTree0.find((int) (byte) 10);
        int int16 = aVLTree0.height();
        java.lang.Class<?> wildcardClass17 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        int int8 = aVLTree0.height();
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.insert((int) 'a');
        aVLTree0.insert((int) (byte) -1);
        com.example.AVLTree.Node node15 = aVLTree0.find(1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree aVLTree16 = new com.example.AVLTree();
        com.example.AVLTree.Node node17 = null;
        int int18 = aVLTree16.getBalance(node17);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        com.example.AVLTree.Node node22 = aVLTree19.getRoot();
        aVLTree19.insert((int) (byte) 100);
        com.example.AVLTree aVLTree25 = new com.example.AVLTree();
        com.example.AVLTree.Node node27 = aVLTree25.find((int) '4');
        com.example.AVLTree.Node node28 = null;
        int int29 = aVLTree25.getBalance(node28);
        aVLTree25.insert((int) (short) 100);
        com.example.AVLTree.Node node33 = aVLTree25.find((int) ' ');
        int int34 = aVLTree25.height();
        com.example.AVLTree.Node node35 = aVLTree25.getRoot();
        int int36 = aVLTree19.getBalance(node35);
        int int37 = aVLTree16.getBalance(node35);
        com.example.AVLTree.Node node39 = aVLTree16.find((int) 'a');
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        int int46 = aVLTree40.height();
        com.example.AVLTree.Node node48 = aVLTree40.find((int) (short) -1);
        com.example.AVLTree.Node node49 = aVLTree40.getRoot();
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree50.getBalance(node51);
        aVLTree50.insert((int) (byte) 100);
        aVLTree50.insert((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree50.find((int) (byte) 100);
        com.example.AVLTree aVLTree59 = new com.example.AVLTree();
        com.example.AVLTree.Node node61 = aVLTree59.find((int) '4');
        aVLTree59.delete((int) 'a');
        com.example.AVLTree.Node node64 = aVLTree59.getRoot();
        aVLTree59.delete(0);
        com.example.AVLTree.Node node67 = null;
        int int68 = aVLTree59.getBalance(node67);
        int int69 = aVLTree59.height();
        com.example.AVLTree aVLTree70 = new com.example.AVLTree();
        com.example.AVLTree.Node node72 = aVLTree70.find((int) '4');
        com.example.AVLTree.Node node73 = aVLTree70.getRoot();
        aVLTree70.delete(100);
        aVLTree70.insert((int) (byte) 10);
        com.example.AVLTree.Node node78 = aVLTree70.getRoot();
        int int79 = aVLTree59.getBalance(node78);
        int int80 = aVLTree50.getBalance(node78);
        int int81 = aVLTree40.getBalance(node78);
        int int82 = aVLTree16.getBalance(node78);
        int int83 = aVLTree0.getBalance(node78);
        aVLTree0.insert(100);
        aVLTree0.insert((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            aVLTree0.insert((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: duplicate Key!");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.insert((int) (short) 1);
        aVLTree0.insert((int) '#');
        aVLTree0.delete(10);
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        aVLTree0.delete((int) '#');
        int int16 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert((int) (byte) 100);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = null;
        int int10 = aVLTree6.getBalance(node9);
        aVLTree6.insert((int) (short) 100);
        com.example.AVLTree.Node node14 = aVLTree6.find((int) ' ');
        int int15 = aVLTree6.height();
        com.example.AVLTree.Node node16 = aVLTree6.getRoot();
        int int17 = aVLTree0.getBalance(node16);
        com.example.AVLTree.Node node19 = aVLTree0.find((int) '4');
        aVLTree0.insert((int) (byte) -1);
        aVLTree0.delete((int) '#');
        com.example.AVLTree.Node node24 = aVLTree0.getRoot();
        com.example.AVLTree.Node node26 = aVLTree0.find((int) (byte) 0);
        com.example.AVLTree.Node node28 = aVLTree0.find((int) (short) 0);
        com.example.AVLTree.Node node29 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass30 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = null;
        int int7 = aVLTree3.getBalance(node6);
        aVLTree3.insert((int) (short) 100);
        com.example.AVLTree.Node node11 = aVLTree3.find((int) ' ');
        int int12 = aVLTree3.height();
        com.example.AVLTree.Node node13 = aVLTree3.getRoot();
        int int14 = aVLTree0.getBalance(node13);
        int int15 = aVLTree0.height();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree17.find((int) 'a');
        aVLTree17.insert((int) (short) -1);
        com.example.AVLTree.Node node24 = aVLTree17.getRoot();
        int int25 = aVLTree0.getBalance(node24);
        aVLTree0.delete((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        com.example.AVLTree aVLTree21 = new com.example.AVLTree();
        com.example.AVLTree.Node node23 = aVLTree21.find((int) '4');
        aVLTree21.delete((int) 'a');
        com.example.AVLTree.Node node26 = aVLTree21.getRoot();
        aVLTree21.delete(0);
        com.example.AVLTree.Node node29 = null;
        int int30 = aVLTree21.getBalance(node29);
        int int31 = aVLTree21.height();
        com.example.AVLTree aVLTree32 = new com.example.AVLTree();
        com.example.AVLTree.Node node34 = aVLTree32.find((int) '4');
        com.example.AVLTree.Node node35 = aVLTree32.getRoot();
        aVLTree32.delete(100);
        aVLTree32.insert((int) (byte) 10);
        com.example.AVLTree.Node node40 = aVLTree32.getRoot();
        int int41 = aVLTree21.getBalance(node40);
        int int42 = aVLTree0.getBalance(node40);
        int int43 = aVLTree0.height();
        aVLTree0.delete((int) (short) -1);
        com.example.AVLTree.Node node47 = aVLTree0.find((int) 'a');
        int int48 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert((int) (short) 100);
        com.example.AVLTree.Node node8 = aVLTree0.find((int) ' ');
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) 'a');
        com.example.AVLTree.Node node13 = aVLTree0.find((-1));
        int int14 = aVLTree0.height();
        int int15 = aVLTree0.height();
        int int16 = aVLTree0.height();
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree.Node node20 = aVLTree0.find((int) (short) 1);
        com.example.AVLTree.Node node22 = aVLTree0.find(100);
        aVLTree0.insert(2);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find((int) (byte) 10);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node13 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass14 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = aVLTree11.getRoot();
        aVLTree11.delete(100);
        aVLTree11.insert((int) (byte) 10);
        com.example.AVLTree.Node node19 = aVLTree11.getRoot();
        int int20 = aVLTree0.getBalance(node19);
        int int21 = aVLTree0.height();
        com.example.AVLTree aVLTree22 = new com.example.AVLTree();
        com.example.AVLTree.Node node24 = aVLTree22.find((int) '4');
        com.example.AVLTree.Node node25 = aVLTree22.getRoot();
        aVLTree22.delete(100);
        int int28 = aVLTree22.height();
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        aVLTree29.delete((int) 'a');
        com.example.AVLTree.Node node34 = aVLTree29.getRoot();
        aVLTree29.delete(0);
        com.example.AVLTree.Node node37 = null;
        int int38 = aVLTree29.getBalance(node37);
        int int39 = aVLTree29.height();
        com.example.AVLTree aVLTree40 = new com.example.AVLTree();
        com.example.AVLTree.Node node42 = aVLTree40.find((int) '4');
        com.example.AVLTree.Node node43 = aVLTree40.getRoot();
        aVLTree40.delete(100);
        aVLTree40.insert((int) (byte) 10);
        com.example.AVLTree.Node node48 = aVLTree40.getRoot();
        int int49 = aVLTree29.getBalance(node48);
        com.example.AVLTree aVLTree50 = new com.example.AVLTree();
        com.example.AVLTree.Node node52 = aVLTree50.find((int) '4');
        aVLTree50.delete((int) 'a');
        com.example.AVLTree.Node node55 = aVLTree50.getRoot();
        aVLTree50.delete(0);
        com.example.AVLTree.Node node58 = null;
        int int59 = aVLTree50.getBalance(node58);
        int int60 = aVLTree50.height();
        com.example.AVLTree aVLTree61 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = aVLTree61.find((int) '4');
        com.example.AVLTree.Node node64 = aVLTree61.getRoot();
        aVLTree61.delete(100);
        aVLTree61.insert((int) (byte) 10);
        com.example.AVLTree.Node node69 = aVLTree61.getRoot();
        int int70 = aVLTree50.getBalance(node69);
        int int71 = aVLTree29.getBalance(node69);
        int int72 = aVLTree22.getBalance(node69);
        int int73 = aVLTree0.getBalance(node69);
        int int74 = aVLTree0.height();
        com.example.AVLTree.Node node75 = aVLTree0.getRoot();
        com.example.AVLTree.Node node76 = aVLTree0.getRoot();
        int int77 = aVLTree0.height();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree aVLTree5 = new com.example.AVLTree();
        com.example.AVLTree.Node node7 = aVLTree5.find((int) '4');
        com.example.AVLTree.Node node8 = aVLTree5.getRoot();
        aVLTree5.insert((int) (byte) 100);
        com.example.AVLTree aVLTree11 = new com.example.AVLTree();
        com.example.AVLTree.Node node13 = aVLTree11.find((int) '4');
        com.example.AVLTree.Node node14 = null;
        int int15 = aVLTree11.getBalance(node14);
        aVLTree11.insert((int) (short) 100);
        com.example.AVLTree.Node node19 = aVLTree11.find((int) ' ');
        int int20 = aVLTree11.height();
        com.example.AVLTree.Node node21 = aVLTree11.getRoot();
        int int22 = aVLTree5.getBalance(node21);
        int int23 = aVLTree0.getBalance(node21);
        int int24 = aVLTree0.height();
        aVLTree0.delete((int) (short) -1);
        aVLTree0.insert((int) 'a');
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        aVLTree29.insert(0);
        aVLTree29.insert((int) (short) 10);
        com.example.AVLTree.Node node38 = aVLTree29.getRoot();
        aVLTree29.delete(0);
        com.example.AVLTree aVLTree41 = new com.example.AVLTree();
        com.example.AVLTree.Node node43 = aVLTree41.find((int) '4');
        aVLTree41.delete((int) 'a');
        com.example.AVLTree.Node node46 = aVLTree41.getRoot();
        aVLTree41.delete(0);
        com.example.AVLTree.Node node49 = null;
        int int50 = aVLTree41.getBalance(node49);
        com.example.AVLTree.Node node51 = null;
        int int52 = aVLTree41.getBalance(node51);
        com.example.AVLTree aVLTree53 = new com.example.AVLTree();
        com.example.AVLTree.Node node55 = aVLTree53.find((int) '4');
        com.example.AVLTree.Node node57 = aVLTree53.find((int) 'a');
        com.example.AVLTree.Node node58 = aVLTree53.getRoot();
        aVLTree53.delete((int) (short) 10);
        com.example.AVLTree.Node node61 = aVLTree53.getRoot();
        com.example.AVLTree.Node node62 = aVLTree53.getRoot();
        com.example.AVLTree aVLTree63 = new com.example.AVLTree();
        com.example.AVLTree.Node node64 = null;
        int int65 = aVLTree63.getBalance(node64);
        aVLTree63.insert((int) (byte) 100);
        aVLTree63.insert((int) 'a');
        com.example.AVLTree.Node node71 = aVLTree63.find((int) (byte) 100);
        int int72 = aVLTree53.getBalance(node71);
        int int73 = aVLTree41.getBalance(node71);
        int int74 = aVLTree29.getBalance(node71);
        aVLTree29.delete(0);
        com.example.AVLTree.Node node77 = aVLTree29.getRoot();
        com.example.AVLTree.Node node78 = aVLTree29.getRoot();
        int int79 = aVLTree0.getBalance(node78);
        java.lang.Class<?> wildcardClass80 = node78.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = null;
        int int12 = aVLTree10.getBalance(node11);
        aVLTree10.insert((int) (byte) 100);
        aVLTree10.insert((int) 'a');
        com.example.AVLTree.Node node18 = aVLTree10.find((int) (byte) 100);
        com.example.AVLTree aVLTree19 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = aVLTree19.find((int) '4');
        aVLTree19.delete((int) 'a');
        com.example.AVLTree.Node node24 = aVLTree19.getRoot();
        aVLTree19.delete(0);
        com.example.AVLTree.Node node27 = null;
        int int28 = aVLTree19.getBalance(node27);
        int int29 = aVLTree19.height();
        com.example.AVLTree aVLTree30 = new com.example.AVLTree();
        com.example.AVLTree.Node node32 = aVLTree30.find((int) '4');
        com.example.AVLTree.Node node33 = aVLTree30.getRoot();
        aVLTree30.delete(100);
        aVLTree30.insert((int) (byte) 10);
        com.example.AVLTree.Node node38 = aVLTree30.getRoot();
        int int39 = aVLTree19.getBalance(node38);
        int int40 = aVLTree10.getBalance(node38);
        int int41 = aVLTree0.getBalance(node38);
        com.example.AVLTree.Node node43 = aVLTree0.find((int) (byte) -1);
        int int44 = aVLTree0.height();
        com.example.AVLTree.Node node45 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass46 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        aVLTree0.delete(1);
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node8 = aVLTree0.getRoot();
        int int9 = aVLTree0.height();
        com.example.AVLTree aVLTree10 = new com.example.AVLTree();
        com.example.AVLTree.Node node12 = aVLTree10.find((int) '4');
        com.example.AVLTree.Node node13 = aVLTree10.getRoot();
        aVLTree10.delete(100);
        int int16 = aVLTree10.height();
        com.example.AVLTree aVLTree17 = new com.example.AVLTree();
        com.example.AVLTree.Node node19 = aVLTree17.find((int) '4');
        aVLTree17.delete((int) 'a');
        com.example.AVLTree.Node node22 = aVLTree17.getRoot();
        aVLTree17.delete(0);
        com.example.AVLTree.Node node25 = null;
        int int26 = aVLTree17.getBalance(node25);
        int int27 = aVLTree17.height();
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        com.example.AVLTree.Node node31 = aVLTree28.getRoot();
        aVLTree28.delete(100);
        aVLTree28.insert((int) (byte) 10);
        com.example.AVLTree.Node node36 = aVLTree28.getRoot();
        int int37 = aVLTree17.getBalance(node36);
        com.example.AVLTree aVLTree38 = new com.example.AVLTree();
        com.example.AVLTree.Node node40 = aVLTree38.find((int) '4');
        aVLTree38.delete((int) 'a');
        com.example.AVLTree.Node node43 = aVLTree38.getRoot();
        aVLTree38.delete(0);
        com.example.AVLTree.Node node46 = null;
        int int47 = aVLTree38.getBalance(node46);
        int int48 = aVLTree38.height();
        com.example.AVLTree aVLTree49 = new com.example.AVLTree();
        com.example.AVLTree.Node node51 = aVLTree49.find((int) '4');
        com.example.AVLTree.Node node52 = aVLTree49.getRoot();
        aVLTree49.delete(100);
        aVLTree49.insert((int) (byte) 10);
        com.example.AVLTree.Node node57 = aVLTree49.getRoot();
        int int58 = aVLTree38.getBalance(node57);
        int int59 = aVLTree17.getBalance(node57);
        int int60 = aVLTree10.getBalance(node57);
        com.example.AVLTree aVLTree61 = new com.example.AVLTree();
        com.example.AVLTree.Node node63 = aVLTree61.find((int) '4');
        aVLTree61.delete((int) 'a');
        com.example.AVLTree.Node node66 = aVLTree61.getRoot();
        aVLTree61.delete((int) (byte) 1);
        com.example.AVLTree aVLTree69 = new com.example.AVLTree();
        com.example.AVLTree.Node node70 = null;
        int int71 = aVLTree69.getBalance(node70);
        com.example.AVLTree aVLTree72 = new com.example.AVLTree();
        com.example.AVLTree.Node node74 = aVLTree72.find((int) '4');
        com.example.AVLTree.Node node75 = aVLTree72.getRoot();
        aVLTree72.insert((int) (byte) 100);
        com.example.AVLTree aVLTree78 = new com.example.AVLTree();
        com.example.AVLTree.Node node80 = aVLTree78.find((int) '4');
        com.example.AVLTree.Node node81 = null;
        int int82 = aVLTree78.getBalance(node81);
        aVLTree78.insert((int) (short) 100);
        com.example.AVLTree.Node node86 = aVLTree78.find((int) ' ');
        int int87 = aVLTree78.height();
        com.example.AVLTree.Node node88 = aVLTree78.getRoot();
        int int89 = aVLTree72.getBalance(node88);
        int int90 = aVLTree69.getBalance(node88);
        int int91 = aVLTree61.getBalance(node88);
        int int92 = aVLTree10.getBalance(node88);
        int int93 = aVLTree0.getBalance(node88);
        int int94 = aVLTree0.height();
        com.example.AVLTree.Node node96 = aVLTree0.find((-1));
        java.lang.Class<?> wildcardClass97 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        com.example.AVLTree.Node node6 = aVLTree0.getRoot();
        com.example.AVLTree.Node node7 = aVLTree0.getRoot();
        com.example.AVLTree.Node node9 = aVLTree0.find(0);
        com.example.AVLTree.Node node10 = aVLTree0.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = node10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.delete(100);
        int int9 = aVLTree0.height();
        aVLTree0.insert((int) (byte) 100);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree aVLTree3 = new com.example.AVLTree();
        com.example.AVLTree.Node node5 = aVLTree3.find((int) '4');
        com.example.AVLTree.Node node6 = aVLTree3.getRoot();
        aVLTree3.insert((int) (byte) 100);
        com.example.AVLTree aVLTree9 = new com.example.AVLTree();
        com.example.AVLTree.Node node11 = aVLTree9.find((int) '4');
        com.example.AVLTree.Node node12 = null;
        int int13 = aVLTree9.getBalance(node12);
        aVLTree9.insert((int) (short) 100);
        com.example.AVLTree.Node node17 = aVLTree9.find((int) ' ');
        int int18 = aVLTree9.height();
        com.example.AVLTree.Node node19 = aVLTree9.getRoot();
        int int20 = aVLTree3.getBalance(node19);
        int int21 = aVLTree0.getBalance(node19);
        aVLTree0.insert((int) (short) 1);
        com.example.AVLTree aVLTree24 = new com.example.AVLTree();
        com.example.AVLTree.Node node26 = aVLTree24.find((int) '4');
        com.example.AVLTree.Node node28 = aVLTree24.find((int) 'a');
        com.example.AVLTree.Node node30 = aVLTree24.find((int) ' ');
        com.example.AVLTree.Node node32 = aVLTree24.find((int) '#');
        com.example.AVLTree aVLTree33 = new com.example.AVLTree();
        com.example.AVLTree.Node node35 = aVLTree33.find((int) '4');
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree33.getBalance(node36);
        aVLTree33.insert((int) (short) 100);
        com.example.AVLTree.Node node41 = aVLTree33.find((int) ' ');
        int int42 = aVLTree33.height();
        com.example.AVLTree.Node node43 = aVLTree33.getRoot();
        int int44 = aVLTree24.getBalance(node43);
        int int45 = aVLTree24.height();
        com.example.AVLTree aVLTree46 = new com.example.AVLTree();
        com.example.AVLTree.Node node47 = aVLTree46.getRoot();
        com.example.AVLTree aVLTree48 = new com.example.AVLTree();
        com.example.AVLTree.Node node50 = aVLTree48.find((int) '4');
        com.example.AVLTree.Node node51 = aVLTree48.getRoot();
        com.example.AVLTree.Node node53 = aVLTree48.find((int) (short) -1);
        com.example.AVLTree aVLTree54 = new com.example.AVLTree();
        com.example.AVLTree.Node node56 = aVLTree54.find((int) '4');
        aVLTree54.delete((int) 'a');
        com.example.AVLTree.Node node59 = aVLTree54.getRoot();
        aVLTree54.delete(0);
        com.example.AVLTree.Node node62 = null;
        int int63 = aVLTree54.getBalance(node62);
        int int64 = aVLTree54.height();
        aVLTree54.delete(100);
        com.example.AVLTree aVLTree67 = new com.example.AVLTree();
        com.example.AVLTree.Node node69 = aVLTree67.find((int) '4');
        com.example.AVLTree.Node node70 = aVLTree67.getRoot();
        aVLTree67.delete(100);
        aVLTree67.insert((int) (byte) 10);
        com.example.AVLTree.Node node75 = aVLTree67.getRoot();
        int int76 = aVLTree54.getBalance(node75);
        int int77 = aVLTree48.getBalance(node75);
        int int78 = aVLTree46.getBalance(node75);
        int int79 = aVLTree24.getBalance(node75);
        int int80 = aVLTree0.getBalance(node75);
        java.lang.Class<?> wildcardClass81 = node75.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        aVLTree0.delete((int) 'a');
        com.example.AVLTree.Node node5 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree0.getBalance(node8);
        int int10 = aVLTree0.height();
        aVLTree0.delete(100);
        aVLTree0.insert(10);
        com.example.AVLTree.Node node15 = aVLTree0.getRoot();
        com.example.AVLTree.Node node16 = aVLTree0.getRoot();
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        java.lang.Class<?> wildcardClass18 = node17.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = null;
        int int4 = aVLTree0.getBalance(node3);
        aVLTree0.insert(0);
        aVLTree0.insert((int) (short) 10);
        com.example.AVLTree.Node node9 = aVLTree0.getRoot();
        aVLTree0.delete(0);
        com.example.AVLTree aVLTree12 = new com.example.AVLTree();
        com.example.AVLTree.Node node14 = aVLTree12.find((int) '4');
        aVLTree12.delete((int) 'a');
        aVLTree12.delete(1);
        com.example.AVLTree.Node node19 = aVLTree12.getRoot();
        com.example.AVLTree.Node node21 = aVLTree12.find((int) (byte) 10);
        com.example.AVLTree.Node node22 = aVLTree12.getRoot();
        aVLTree12.delete(0);
        aVLTree12.insert((int) (short) 1);
        com.example.AVLTree.Node node27 = aVLTree12.getRoot();
        int int28 = aVLTree0.getBalance(node27);
        int int29 = aVLTree0.height();
        com.example.AVLTree.Node node31 = aVLTree0.find((int) 'a');
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.delete(100);
        int int6 = aVLTree0.height();
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node9 = aVLTree7.find((int) '4');
        aVLTree7.delete((int) 'a');
        com.example.AVLTree.Node node12 = aVLTree7.getRoot();
        aVLTree7.delete(0);
        com.example.AVLTree.Node node15 = null;
        int int16 = aVLTree7.getBalance(node15);
        int int17 = aVLTree7.height();
        com.example.AVLTree aVLTree18 = new com.example.AVLTree();
        com.example.AVLTree.Node node20 = aVLTree18.find((int) '4');
        com.example.AVLTree.Node node21 = aVLTree18.getRoot();
        aVLTree18.delete(100);
        aVLTree18.insert((int) (byte) 10);
        com.example.AVLTree.Node node26 = aVLTree18.getRoot();
        int int27 = aVLTree7.getBalance(node26);
        com.example.AVLTree aVLTree28 = new com.example.AVLTree();
        com.example.AVLTree.Node node30 = aVLTree28.find((int) '4');
        aVLTree28.delete((int) 'a');
        com.example.AVLTree.Node node33 = aVLTree28.getRoot();
        aVLTree28.delete(0);
        com.example.AVLTree.Node node36 = null;
        int int37 = aVLTree28.getBalance(node36);
        int int38 = aVLTree28.height();
        com.example.AVLTree aVLTree39 = new com.example.AVLTree();
        com.example.AVLTree.Node node41 = aVLTree39.find((int) '4');
        com.example.AVLTree.Node node42 = aVLTree39.getRoot();
        aVLTree39.delete(100);
        aVLTree39.insert((int) (byte) 10);
        com.example.AVLTree.Node node47 = aVLTree39.getRoot();
        int int48 = aVLTree28.getBalance(node47);
        int int49 = aVLTree7.getBalance(node47);
        int int50 = aVLTree0.getBalance(node47);
        int int51 = aVLTree0.height();
        aVLTree0.delete((int) (byte) 10);
        com.example.AVLTree.Node node54 = aVLTree0.getRoot();
        com.example.AVLTree.Node node55 = aVLTree0.getRoot();
        aVLTree0.delete((int) (byte) 0);
        com.example.AVLTree.Node node59 = aVLTree0.find(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass60 = node59.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        com.example.AVLTree.Node node5 = aVLTree0.find((int) (short) -1);
        aVLTree0.insert((int) (short) 100);
        java.lang.Class<?> wildcardClass8 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node2 = aVLTree0.find((int) '4');
        com.example.AVLTree.Node node4 = aVLTree0.find((int) 'a');
        aVLTree0.delete((int) (short) 10);
        com.example.AVLTree aVLTree7 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = null;
        int int9 = aVLTree7.getBalance(node8);
        aVLTree7.insert((int) (byte) 100);
        aVLTree7.insert((int) 'a');
        com.example.AVLTree.Node node15 = aVLTree7.find((int) (byte) 100);
        int int16 = aVLTree0.getBalance(node15);
        com.example.AVLTree.Node node17 = aVLTree0.getRoot();
        com.example.AVLTree.Node node18 = aVLTree0.getRoot();
        com.example.AVLTree.Node node20 = aVLTree0.find((int) 'a');
        int int21 = aVLTree0.height();
        java.lang.Class<?> wildcardClass22 = aVLTree0.getClass();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.example.AVLTree aVLTree0 = new com.example.AVLTree();
        com.example.AVLTree.Node node1 = null;
        int int2 = aVLTree0.getBalance(node1);
        com.example.AVLTree.Node node3 = aVLTree0.getRoot();
        aVLTree0.insert(1);
        com.example.AVLTree aVLTree6 = new com.example.AVLTree();
        com.example.AVLTree.Node node8 = aVLTree6.find((int) '4');
        com.example.AVLTree.Node node9 = aVLTree6.getRoot();
        aVLTree6.insert((int) (byte) 100);
        int int12 = aVLTree6.height();
        aVLTree6.insert(1);
        aVLTree6.insert(0);
        com.example.AVLTree.Node node17 = aVLTree6.getRoot();
        com.example.AVLTree.Node node18 = aVLTree6.getRoot();
        int int19 = aVLTree0.getBalance(node18);
        com.example.AVLTree aVLTree20 = new com.example.AVLTree();
        com.example.AVLTree.Node node21 = null;
        int int22 = aVLTree20.getBalance(node21);
        com.example.AVLTree aVLTree23 = new com.example.AVLTree();
        com.example.AVLTree.Node node25 = aVLTree23.find((int) '4');
        com.example.AVLTree.Node node26 = aVLTree23.getRoot();
        aVLTree23.insert((int) (byte) 100);
        com.example.AVLTree aVLTree29 = new com.example.AVLTree();
        com.example.AVLTree.Node node31 = aVLTree29.find((int) '4');
        com.example.AVLTree.Node node32 = null;
        int int33 = aVLTree29.getBalance(node32);
        aVLTree29.insert((int) (short) 100);
        com.example.AVLTree.Node node37 = aVLTree29.find((int) ' ');
        int int38 = aVLTree29.height();
        com.example.AVLTree.Node node39 = aVLTree29.getRoot();
        int int40 = aVLTree23.getBalance(node39);
        int int41 = aVLTree20.getBalance(node39);
        aVLTree20.insert((int) (short) 1);
        int int44 = aVLTree20.height();
        com.example.AVLTree.Node node46 = aVLTree20.find(2);
        com.example.AVLTree.Node node47 = aVLTree20.getRoot();
        int int48 = aVLTree0.getBalance(node47);
        com.example.AVLTree.Node node49 = aVLTree0.getRoot();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
    }
}

